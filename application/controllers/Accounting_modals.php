<?php
defined('BASEPATH') or exit('No direct script access allowed');

class Accounting_modals extends MY_Controller
{
    private $upload_path = "./uploads/accounting/attachments/";
    public $result = null;
    public $page_data = [];

    public function __construct()
    {
        parent::__construct();
        $this->checkLogin();

        add_css(array(
            'assets/css/accounting/accounting-modal-forms.css'
        ));

        add_footer_js(array(
            'assets/js/accounting/modal-forms.js'
        ));

        $this->load->model('vendors_model');
        $this->load->model('accounting_transfer_funds_model');
        $this->load->model('accounting_single_time_activity_model');
        $this->load->model('accounting_pay_down_credit_card_model');
        $this->load->model('accounting_customers_model');
        $this->load->model('accounting_journal_entries_model');
        $this->load->model('accounting_inventory_qty_adjustments_model');
        $this->load->model('accounting_bank_deposit_model');
        $this->load->model('accounting_weekly_timesheet_model');
        $this->load->model('accounting_payroll_model');
        $this->load->model('accounting_invoices_model');
        $this->load->model('accounting_statements_model');
        $this->load->model('chart_of_accounts_model');
        $this->load->model('AcsProfile_model');
        $this->load->model('tags_model');
        $this->load->model('job_tags_model');
        $this->load->model('users_model');
        $this->load->model('items_model');
        $this->load->model('accounting_recurring_transactions_model');
        $this->load->model('accounting_payment_methods_model');
        $this->load->model('accounting_terms_model');
        $this->load->model('accounting_attachments_model');
        $this->load->model('expenses_model');
        $this->load->model('accounting_assigned_checks_model');
        $this->load->model('accounting_timesheet_settings_model');
        $this->load->model('TaxRates_model');
        $this->load->model('item_starting_value_adj_model', 'starting_value_model');
        $this->load->model('accounting_receive_payment_model');
        $this->load->model('payment_records_model');
        $this->load->model('accounting_credit_memo_model');
        $this->load->model('accounting_sales_receipt_model');
        $this->load->model('accounting_refund_receipt_model');
        $this->load->model('accounting_delayed_credit_model');
        $this->load->model('accounting_delayed_charge_model');
        $this->load->model('invoice_model');
        $this->load->model('workorder_model');
        $this->load->model('invoice_settings_model');
        $this->load->model('accounting_linked_transactions_model');
        $this->load->model('accounting_print_checks_settings_model');
        $this->load->model('accounting_account_transactions_model');
        $this->load->model('estimate_model');
        $this->load->model('EstimateSettings_model');
        $this->load->model('Clients_model');
        $this->load->model('accounting_custom_reports_model');
        $this->load->library('form_validation');
    }

    public function index($view ="")
    {
        if ($view) {
            switch ($view) {
                case 'pay_down_credit_card_modal':
                    $detailTypes = $this->account_detail_model->getDetailTypesById(3);
                    $accounts = $this->chart_of_accounts_model->select();

                    $bankAccounts = [];
                    foreach ($detailTypes as $detailType) {
                        $detailTypeAccs = array_filter($accounts, function ($v, $k) use ($detailType) {
                            return $v->acc_detail_id === $detailType->acc_detail_id;
                        }, ARRAY_FILTER_USE_BOTH);

                        if (!empty($detailTypeAccs)) {
                            $bankAccounts[$detailType->acc_detail_name] = $detailTypeAccs;
                        }
                    }
                    
                    $this->page_data['dropdown']['accounts'] = $bankAccounts;
                    $this->page_data['dropdown']['vendors'] = $this->vendors_model->getAllByCompany();
                break;
                case 'single_time_activity_modal':
                    $this->page_data['timesheetSettings'] = $this->accounting_timesheet_settings_model->get_by_company_id(logged('company_id'));
                    $this->page_data['dropdown']['vendors'] = $this->vendors_model->getAllByCompany();
                    $this->page_data['dropdown']['employees'] = $this->users_model->getCompanyUsers(logged('company_id'));
                    $this->page_data['dropdown']['services'] = $this->items_model->getItemsWithFilter(['type' => ['service', 'Service'], 'status' => [1]]);

                    $time = '00:00';
                    $endTime = '23:45';
                    
                    $times = [
                        [
                            'value' => $time,
                            'display' => date('h:i A', strtotime($time))
                        ]
                    ];

                    for ($i = 0; $time != $endTime; $i++) {
                        $time = date('H:i', strtotime($time . '+ 15 minutes'));

                        $times[] = [
                            'value' => $time,
                            'display' => date('h:i A', strtotime($time))
                        ];
                    }

                    $this->page_data['dropdown']['times'] = $times;
                break;
                case 'journal_entry_modal':
                    $lastJournalNo = (int)$this->accounting_journal_entries_model->getLastJournalNo();
                    $this->page_data['journal_no'] = $lastJournalNo + 1;
                    $this->page_data['journal_date'] = date('m/d/Y');
                break;
                case 'bank_deposit_modal':
                    $this->page_data['balance'] = '$0.00';
                break;
                case 'inventory_qty_modal':
                    $lastAdjustmentNo = (int)$this->accounting_inventory_qty_adjustments_model->getLastAdjustmentNo();
                    $this->page_data['adjustment_no'] = $lastAdjustmentNo + 1;
                break;
                case 'payroll_modal':
                    $this->page_data['pay_schedules'] = $this->users_model->getPaySchedules();
                break;
                case 'weekly_timesheet_modal':
                    $this->page_data['timesheetSettings'] = $this->accounting_timesheet_settings_model->get_by_company_id(logged('company_id'));

                    $date = date('m/d/Y');
                    $yearLater = date('m/d/Y', strtotime($date . ' -1 year'));

                    $dateTime = new DateTime($yearLater);
                    $weekNo = $dateTime->format('W');
                    $newDate = new DateTime();
                    $firstDay = $newDate->setISODate($dateTime->format("Y"), $weekNo, 0);
                    $firstDayString = $firstDay->format('m/d/Y');
                    $lastDay = $newDate->setISODate($dateTime->format("Y"), $weekNo, 6);
                    $lastDayString = $lastDay->format('m/d/Y');

                    $weeks = [
                        [
                            'firstDay' => $firstDayString,
                            'lastDay' => $lastDayString,
                            'selected' => (strtotime($date) >= strtotime($firstDayString) && strtotime($date) <= strtotime($lastDayString)) ? true : false
                        ]
                    ];

                    for ($i = 2; $i <= 105; $i++) {
                        $firstDay = $lastDay->add(new DateInterval('P1D'));
                        $firstDayString = $firstDay->format('m/d/Y');
                        $lastDay = $firstDay->add(new DateInterval('P6D'));
                        $lastDayString = $lastDay->format('m/d/Y');

                        $weeks[] = [
                           'firstDay' => $firstDayString,
                           'lastDay' => $lastDayString,
                           'selected' => (strtotime($date) >= strtotime($firstDayString) && strtotime($date) <= strtotime($lastDayString)) ? true : false
                       ];
                    }

                    $this->page_data['dropdown']['weeks'] = $weeks;
                break;
                case 'statement_modal':
                    $customers = $this->accounting_customers_model->getAllByCompany();

                    $data = [
                        'cust_bal_status' => 'open',
                        'company_id' => logged('company_id'),
                        'start_date' => date('Y-m-d', strtotime('-1 months')),
                        'end_date' => date('Y-m-d')
                    ];

                    $rows = [];
                    foreach($customers as $customer) {
                        $data['customer_id'] = $customer->prof_id;
                        $invoices = $this->accounting_invoices_model->getStatementInvoices($data);
                        $creditMemos = $this->accounting_credit_memo_model->get_customer_credit_memos($data);

                        if(count($invoices) > 0) {
                            $invoiceTotal = array_sum(array_map(function($invoice) {
                                return floatval($invoice->balance);
                            }, $invoices));

                            $creditMemosTotal = array_sum(array_map(function($memo) {
                                return floatval($memo->balance);
                            }, $creditMemos));

                            $name = $customer->last_name.' '.$customer->first_name;
                            $name = str_replace(' ', '', $name);
                            $name = $name === '' ? $customer->business_name : $customer->last_name.', '.$customer->first_name;

                            $rows[] = [
                                'id' => $customer->prof_id,
                                'name' => $name,
                                'email' => $customer->email,
                                'balance' => floatval($invoiceTotal) - floatval($creditMemosTotal)
                            ];
                        }
                    }

                    usort($rows, function($a, $b) {
                        return strcmp($a['name'], $b['name']);
                    });

                    $totalBalance = array_sum(array_map(function ($item) {
                        return $item['balance'];
                    }, $rows));

                    $withoutEmail = array_filter($rows, function ($value, $key) {
                        return $value['email'] === '' || $value['email'] === null;
                    }, ARRAY_FILTER_USE_BOTH);

                    $this->page_data['withoutEmail'] = $withoutEmail;
                    $this->page_data['total'] = number_format($totalBalance, 2, '.', ',');
                    $this->page_data['customers'] = $rows;
                break;
                case 'expense_modal':
                    $this->page_data['balance'] = '$0.00';

                    $transactions = $this->expenses_model->get_company_expense_transactions(['company_id' => logged('company_id')]);
                    usort($transactions, function($a, $b) {
                        return strtotime($b->created_at) > strtotime($a->created_at);
                    });
                break;
                case 'check_modal':
                    $this->page_data['balance'] = '$0.00';

                    $transactions = $this->expenses_model->get_company_check_transactions(['company_id' => logged('company_id')]);
                    usort($transactions, function($a, $b) {
                        return strtotime($b->created_at) > strtotime($a->created_at);
                    });
                break;
                case 'bill_modal':
                    $terms = $this->accounting_terms_model->getActiveCompanyTerms(logged('company_id'));

                    $selectedTerm = $terms[0];

                    if ($selectedTerm->type === "1") {
                        $dueDate = date("m/d/Y", strtotime(date("m/d/Y")." +$selectedTerm->net_due_days days"));
                    } else {
                        if ($selectedTerm->minimum_days_to_pay === null ||
                            $selectedTerm->minimum_days_to_pay === "" ||
                            $selectedTerm->minimum_days_to_pay === "0") {
                            if (intval(date("d")) > intval($selectedTerm->day_of_month_due)) {
                                $dueDate = date("m/d/Y", strtotime(date("m/$selectedTerm->day_of_month_due/Y")." +1 month"));
                            } else {
                                $dueDate = date("m/$selectedTerm->day_of_month_due/Y");
                            }
                        } else {
                            if (intval(date("d") > intval(date("d", strtotime(date("m/$selectedTerm->day_of_month_due/Y")." -$selectedTerm->minimum_days_to_pay days"))))) {
                                $dueDate = date("m/d/Y", strtotime(date("m/$selectedTerm->day_of_month_due/Y")." +1 month"));
                            } else {
                                $dueDate = date("m/$selectedTerm->day_of_month_due/Y");
                            }
                        }
                    }

                    $this->page_data['due_date'] = $dueDate;
                    $this->page_data['term'] = $selectedTerm;
                break;
                case 'pay_bills_modal':
                    $accountTypes = [
                        'Bank',
                        'Credit Card',
                        'Other Current Assets'
                    ];

                    $count = 1;
                    foreach ($accountTypes as $typeName) {
                        $accType = $this->account_model->getAccTypeByName($typeName);

                        $accounts = $this->chart_of_accounts_model->getByAccountType($accType->id, null, logged('company_id'));

                        if (count($accounts) > 0) {
                            foreach ($accounts as $account) {
                                if ($count === 1) {
                                    $lastAssignedCheck = $this->accounting_assigned_checks_model->get_last_assigned($account->id);

                                    $this->page_data['startingCheckNo'] = intval($lastAssignedCheck->check_no) + 1;
                                    $this->page_data['account'] = $account;
                                    $this->page_data['balance'] = str_replace('$-', '-$', '$'.number_format(floatval($account->balance), 2, '.', ','));
                                }
    
                                $count++;
                            }
                        }
                    }

                    // $this->page_data['balance'] = '$0.00';

                    $filters = [
                        'start_date' => date("Y-m-d", strtotime(date("m/d/Y")." -365 days"))
                    ];

                    $bills = $this->expenses_model->get_open_bills($filters);

                    $data = [];
                    foreach ($bills as $bill) {
                        $vendor = $this->vendors_model->get_vendor_by_id($bill->vendor_id);

                        $data[] = [
                            'id' => $bill->id,
                            'payee_id' => $bill->vendor_id,
                            'payee' => $vendor->display_name,
                            'ref_no' => $bill->bill_no !== null && $bill->bill_no !== "" ? $bill->bill_no : "",
                            'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                            'open_balance' => number_format($bill->remaining_balance, 2, '.', ','),
                            'vendor_credits' => number_format(floatval(str_replace(',', '', $vendor->vendor_credits)), 2, '.', ',')
                        ];
                    }

                    usort($data, function ($a, $b) use ($order, $columnName) {
                        return strtotime($a[$columnName]) > strtotime($b[$columnName]);
                    });

                    $this->page_data['bills'] = $data;
                break;
                case 'vendor_credit_modal':
                    $this->page_data['dropdown']['customers'] = $this->accounting_customers_model->getAllByCompany();
                    $this->page_data['dropdown']['vendors'] = $this->vendors_model->getAllByCompany();
                break;
                case 'purchase_order_modal':
                    $this->page_data['dropdown']['vendors'] = $this->vendors_model->getAllByCompany();
                    $this->page_data['dropdown']['customers'] = $this->accounting_customers_model->getAllByCompany();
                break;
                case 'credit_card_credit_modal':
                    $this->page_data['balance'] = '$0.00';
                break;
                case 'print_checks_modal':
                    $accountTypes = [
                        'Bank',
                        'Credit Card'
                    ];

                    $count = 1;
                    foreach ($accountTypes as $typeName) {
                        $accType = $this->account_model->getAccTypeByName($typeName);

                        $accounts = $this->chart_of_accounts_model->getByAccountType($accType->id, null, logged('company_id'));

                        if (count($accounts) > 0) {
                            foreach ($accounts as $account) {
                                if ($count === 1) {
                                    $lastAssignedCheck = $this->accounting_assigned_checks_model->get_last_assigned($account->id);

                                    $this->page_data['startingCheckNo'] = intval($lastAssignedCheck->check_no) + 1;
                                    $this->page_data['account'] = $account;
                                    $this->page_data['balance'] = str_replace('$-', '-$', '$'.number_format(floatval($account->balance), 2, '.', ','));
                                }
    
                                $count++;
                            }
                        }
                    }

                    $filters = [
                        'payment_account' => $this->page_data['account']->id
                    ];

                    $checks = $this->expenses_model->get_checks_to_print($filters);
                    $billPayments = $this->expenses_model->get_bill_payments_to_print($filters);
                    $totalCount = count($checks) + count($billPayments);

                    $data = [];
                    if (isset($checks) && count($checks) > 0) {
                        foreach ($checks as $check) {
                            switch ($check->payee_type) {
                                case 'vendor':
                                    $payee = $this->vendors_model->get_vendor_by_id($check->payee_id);
                                    $payeeName = $payee->display_name;
                                break;
                                case 'customer':
                                    $payee = $this->accounting_customers_model->get_by_id($check->payee_id);
                                    $payeeName = $payee->first_name . ' ' . $payee->last_name;
                                break;
                                case 'employee':
                                    $payee = $this->users_model->getUser($check->payee_id);
                                    $payeeName = $payee->FName . ' ' . $payee->LName;
                                break;
                            }
            
                            if (strpos($check->total_amount, '-') !== false) {
                                $total = str_replace('-', '', floatval(str_replace(',', '', $check->total_amount)));
                                $amount = '-$'.number_format($total, 2, '.', ',');
                            } else {
                                $amount = '$'.number_format(floatval(str_replace(',', '', $check->total_amount)), 2, '.', ',');
                            }
            
                            $data[] = [
                                'id' => $check->id,
                                'date' => date("m/d/Y", strtotime($check->payment_date)),
                                'type' => 'Check',
                                'payee' => $payeeName,
                                'amount' => $amount,
                                'order_created' => strtotime($check->created_at)
                            ];
                        }
                    }
            
                    if (isset($billPayments) && count($billPayments) > 0) {
                        foreach ($billPayments as $payment) {
                            $payee = $this->vendors_model->get_vendor_by_id($payment->payee_id);
                            $payeeName = $payee->display_name;
            
                            $paymentAcc = $this->chart_of_accounts_model->getById($billPayment->payment_account_id);
                            $paymentAccType = $this->account_model->getById($paymentAcc->account_id);
                            $paymentType = $paymentAccType->account_name === 'Bank' ? 'Check' : 'Credit Card';
            
                            if (strpos($payment->total_amount, '-') !== false) {
                                $total = str_replace('-', '', floatval(str_replace(',', '', $payment->total_amount)));
                                $amount = '-$'.number_format($total, 2, '.', ',');
                            } else {
                                $amount = '$'.number_format(floatval(str_replace(',', '', $payment->total_amount)), 2, '.', ',');
                            }
            
                            $data[] = [
                                'id' => $payment->id,
                                'date' => date("m/d/Y", strtotime($payment->payment_date)),
                                'type' => 'Bill Payment ('.$paymentType.')',
                                'payee' => $payeeName,
                                'amount' => $amount,
                                'order_created' => strtotime($payment->created_at)
                            ];
                        }
                    }
            
                    usort($data, function ($a, $b) use ($sort) {
                        return strtotime($a['date']) > strtotime($b['date']) || strtotime($a['date']) > strtotime($b['date']) && $a['order_created'] > $b['order_created'];
                    });

                    $this->page_data['printSettings'] = $this->accounting_print_checks_settings_model->get_by_company_id(logged('company_id'));
                    $this->page_data['checks'] = $data;
                break;
                case 'invoice_modal' :
                    $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

                    $this->page_data['invoice_prefix'] = $invoiceSettings->invoice_num_prefix;
                    $this->page_data['number'] = $this->invoice_model->get_last_invoice_number(logged('company_id'), $invoiceSettings->invoice_num_prefix);
                break;
                case 'print_checks_setup_modal' :
                    $settings = $this->accounting_print_checks_settings_model->get_by_company_id(logged('company_id'));

                    $amountGridMargin = [
                        'left' => 100 - intval($settings->horizontal),
                        'top' => 113 + intval($settings->vertical)
                    ];

                    $this->page_data['amountGridMargin'] = $amountGridMargin;
                    $this->page_data['settings'] = $settings;
                break;
                case 'standard_estimate_modal' :
                    $number = $this->estimate_model->getlastInsert();
                    $estNum = "EST-";
                    foreach ($number as $num) {
                        $next = $num->estimate_number;
                        $arr = explode("-", $next);
                        $date_start = $arr[0];
                        $nextNum = $arr[1];
                    }
                    $val = $nextNum + 1;
                    $estNum .= str_pad($val, 9, "0", STR_PAD_LEFT);

                    $this->page_data['est_number'] = $estNum;
                break;
                case 'options_estimate_modal' :
                    $number = $this->estimate_model->getlastInsert();
                    $estNum = "EST-";
                    foreach ($number as $num) {
                        $next = $num->estimate_number;
                        $arr = explode("-", $next);
                        $date_start = $arr[0];
                        $nextNum = $arr[1];
                    }
                    $val = $nextNum + 1;
                    $estNum .= str_pad($val, 9, "0", STR_PAD_LEFT);

                    $this->page_data['est_number'] = $estNum;
                break;
                case 'bundle_estimate_modal' :
                    $number = $this->estimate_model->getlastInsert();
                    $estNum = "EST-";
                    foreach ($number as $num) {
                        $next = $num->estimate_number;
                        $arr = explode("-", $next);
                        $date_start = $arr[0];
                        $nextNum = $arr[1];
                    }
                    $val = $nextNum + 1;
                    $estNum .= str_pad($val, 9, "0", STR_PAD_LEFT);

                    $this->page_data['est_number'] = $estNum;
                break;
            }

            $this->load->view("v2/includes/accounting/modal_forms/". $view, $this->page_data);
        }
    }

    public function load_job_tags()
    {
        $search = $this->input->get('search');
        $getTags = $this->tags_model->getTags();

        $tags = [];
        foreach($getTags as $key => $tag) {
            if($search !== "") {
                if (stripos($tag['name'], $search) !== false) {
                    if($tag['type'] !== 'group-tag') {
                        $tags[] = [
                            'id' => $tag['id'],
                            'name' => $tag['name'],
                            'transactions' => '',
                            'type' => $tag['type'],
                            'parentIndex' => $tag['parentIndex'],
                        ];

                        if($tag['type'] === 'group') {
                            $tags[array_key_last($tags)]['tags'] = $tag['tags'];
                        }
                    } else {
                        if (stripos($tag['name'], $search) !== false) {
                            $parentKey = array_key_last(array_filter($tags, function($value, $key) use ($tag) {
                                return ($tag['group_tag_id'] === $value['id'] && $value['type'] === 'group');
                            }, ARRAY_FILTER_USE_BOTH));

                            if(!is_null($parentKey)) {
                                $keyExists = array_key_last(array_filter($tags[$parentKey]['tags'], function($value, $key) use ($tag) {
                                    return ($tag['id'] === $value['id'] && $value['type'] === 'group-tag');
                                }, ARRAY_FILTER_USE_BOTH));

                                if(!is_null($keyExists)) {
                                    $tags[$parentKey]['tags'][] = $tag;
                                }
                            } else {
                                $queryParentKey = array_key_last(array_filter($getTags, function($value, $key) use ($tag) {
                                    return ($tag['group_tag_id'] === $value['id'] && $value['type'] === 'group');
                                }, ARRAY_FILTER_USE_BOTH));

                                $tags[] = [
                                    'id' => $getTags[$queryParentKey]['id'],
                                    'name' => $getTags[$queryParentKey]['name'],
                                    'transactions' => '',
                                    'type' => $getTags[$queryParentKey]['type'],
                                    'parentIndex' => $getTags[$queryParentKey]['parentIndex'],
                                    'tags' => [
                                        $tag
                                    ]
                                ];
                            }
                        }
                    }
                }
            } else {
                if($tag['type'] !== 'group-tag') {
                    $tags[] = [
                        'id' => $tag['id'],
                        'name' => $tag['name'],
                        'transactions' => '',
                        'type' => $tag['type'],
                        'parentIndex' => $tag['parentIndex'],
                    ];
        
                    if($tag['type'] === 'group') {
                        $tags[array_key_last($tags)]['tags'] = $tag['tags'];
                    }
                }
            }
        }

        echo json_encode($tags);
    }

    // public function load_job_tags()
    // {
    //     $postData = json_decode(file_get_contents('php://input'), true);

    //     $tags = $this->tags_model->getTags();

    //     $data = [];
    //     $search = $postData['columns'][0]['search']['value'];

    //     foreach ($tags as $tag) {
    //         if ($search !== "") {
    //             if (stripos($tag['name'], $search) !== false) {
    //                 if ($tag['type'] === 'group-tag') {
    //                     $groupIdExists = array_search($tags[$tag['parentIndex']]['id'], array_column($data, 'id'));

    //                     if ($groupIdExists === false || $groupIdExists !== false && $tags[$groupIdExists]['type'] !== 'group') {
    //                         $data[] = [
    //                             'id' => $tags[$tag['parentIndex']]['id'],
    //                             'tag_name' => $tags[$tag['parentIndex']]['name'],
    //                             'type' => $tags[$tag['parentIndex']]['type'],
    //                             'parentIndex' => $tags[$tag['parentIndex']]['type'] === 'group-tag' ? $tags[$tag['parentIndex']]['parentIndex'] : null,
    //                             'tags' => $tags[$tag['parentIndex']]['type'] === 'group' ? $tags[$tag['parentIndex']]['tags'] : null
    //                         ];
    //                     }

    //                     $idExists = array_search($tag['id'], array_column($data, 'id'));

    //                     if ($idExists === false || $idExists !== false && $data[$idExists]['type'] !== 'group-tag') {
    //                         $groupIndex = array_key_last($data);
    //                         $data[] = [
    //                             'id' => $tag['id'],
    //                             'tag_name' => $tag['name'],
    //                             'type' => $tag['type'],
    //                             'group_tag_id' => $tag['group_tag_id'],
    //                             'parentIndex' => $groupIndex,
    //                             'tags' => null
    //                         ];
    //                     }
    //                 } elseif ($tag['type'] === 'group') {
    //                     $groupIdExists = array_search($tags[$tag['parentIndex']]['id'], array_column($data, 'id'));

    //                     if ($groupIdExists === false || $groupIdExists !== false && $tags[$groupIdExists]['type'] !== 'group') {
    //                         $data[] = [
    //                             'id' => $tag['id'],
    //                             'tag_name' => $tag['name'],
    //                             'type' => $tag['type'],
    //                             'parentIndex' => null,
    //                             'tags' => $tag['tags']
    //                         ];

    //                         $parentIndex = array_key_last($data);
    //                         foreach ($tag['tags'] as $groupTag) {
    //                             $data[] = [
    //                                 'id' => $groupTag['id'],
    //                                 'tag_name' => $groupTag['name'],
    //                                 'type' => 'group-tag',
    //                                 'group_tag_id' => $tag['group_tag_id'],
    //                                 'parentIndex' => $parentIndex,
    //                                 'tags' => null
    //                             ];
    //                         }
    //                     }
    //                 } else {
    //                     $data[] = [
    //                         'id' => $tag['id'],
    //                         'tag_name' => $tag['name'],
    //                         'type' => $tag['type'],
    //                         'group_tag_id' => $tag['group_tag_id'],
    //                         'parentIndex' => null,
    //                         'tags' => null
    //                     ];
    //                 }
    //             }
    //         } else {
    //             $data[] = [
    //                 'id' => $tag['id'],
    //                 'tag_name' => $tag['name'],
    //                 'type' => $tag['type'],
    //                 'group_tag_id' => $tag['group_tag_id'],
    //                 'parentIndex' => $tag['type'] === 'group-tag' ? $tag['parentIndex'] : null,
    //                 'tags' => $tag['type'] === 'group' ? $tag['tags'] : null
    //             ];
    //         }
    //     }

    //     $result = [
    //         'draw' => $postData['draw'],
    //         'recordsTotal' => count($tags),
    //         'recordsFiltered' => count($data),
    //         'data' => $data
    //     ];

    //     echo json_encode($result);
    // }

    public function submit_job_tag()
    {
        $data = [
            'name' => $this->input->post('tag_name'),
            'group_tag_id' => $this->input->post('group_id') !== "" ? $this->input->post('group_id') : null,
            'company_id' => logged('company_id'),
            'status' => 1
        ];

        try {
            if ($this->input->post('method') === 'create') {
                $jobTagId = $this->job_tags_model->create($data);
            } else {
                $id = $this->input->post('id');
                $jobTagId = $this->job_tags_model->update($id, $data);
            }

            $return = [
                'data' => $jobTagId,
                'success' => $jobTagId ? true : false,
                'message' => 'Success'
            ];
        } catch (\Exception $e) {
            $return = [
                'data' => null,
                'success' => false,
                'message' => 'Error'
            ];
        }

        echo json_encode($return);
    }

    public function group_job_tag_form()
    {
        $this->load->view('v2/includes/accounting/modal_forms/group_tag_form');
        // $this->load->view("accounting/modals/group_tag_form");
    }

    public function job_tag_modal()
    {
        $getTags = $this->tags_model->getTags();

        $tags = [];
        foreach($getTags as $key => $tag) {
            if($tag['type'] !== 'group-tag') {
                $tags[] = [
                    'id' => $tag['id'],
                    'name' => $tag['name'],
                    'transactions' => '',
                    'type' => $tag['type'],
                    'parentIndex' => $tag['parentIndex'],
                ];
    
                if($tag['type'] === 'group') {
                    $tags[array_key_last($tags)]['tags'] = $tag['tags'];
                }
            }
        }

        $this->page_data['tags'] = $tags;
        $this->load->view('v2/includes/accounting/modal_forms/job_tags_modal', $this->page_data);
        // $this->load->view("accounting/modals/job_tags_modal");
    }

    public function job_tag_form()
    {
        $this->load->view('v2/includes/accounting/modal_forms/new_job_tag_modal_form');
        // $this->load->view("accounting/modals/job_tag_modal_form");
    }

    public function edit_group_tag_form()
    {
        $this->load->view('v2/includes/accounting/modal_forms/edit_group_tag_form');
        // $this->load->view("accounting/modals/edit_group_form");
    }

    public function get_job_tags()
    {
        $tags = $this->tags_model->getCompanyTags();

        $return = [];

        foreach ($tags as $tag) {
            $name = $tag['name'];
            if ($tag['group_tag_id'] !== null) {
                $group = $this->tags_model->getGroupById($tag['group_tag_id']);
                $name = $group->name.': '.$tag['name'];
            }
            $return['results'][] = [
                'id' => $tag['id'],
                'text' => $name
            ];
        }

        echo json_encode($return);
    }

    public function get_payroll_form($paySchedId)
    {
        $paySchedule = $this->users_model->getPaySchedule($paySchedId);
        $this->page_data['paySchedule'] = $paySchedule;
        $this->page_data['payDetails'] = $this->users_model->getPayDetailsByPaySched($paySchedule->id);
        $accounts = $this->chart_of_accounts_model->select();
        $accounts = array_filter($accounts, function ($v, $k) {
            return $v->account_id === 3 || $v->account_id === "3";
        }, ARRAY_FILTER_USE_BOTH);

        $currentDay = date('m/d/Y');

        switch ($paySchedule->pay_frequency) {
            case 'every-week':
                $endDay = strtotime($paySchedule->next_pay_period_end);
                $payDate = strtotime($paySchedule->next_payday);

                if ($payDate < strtotime(date('m/d/Y'))) {
                    do {
                        $payDate = strtotime(date('m/d/Y', $payDate).' +7 days');
                        $endDay = strtotime(date('m/d/Y', $endDay).' +7 days');
                    } while ($payDate < strtotime(date('m/d/Y')));
                }
                $endDay = date('m/d/Y', $endDay);
                $payDate = date('m/d/Y', $payDate);
                $firstPayDate = date('m/d/Y', strtotime($payDate.' +5 weeks'));
                $lastDateString = date('m/d/Y', strtotime($endDay.' +5 weeks'));
                $firstDateString = date('m/d/Y', strtotime($lastDateString.' -6 days'));
                $dropdownLimit = 30;
            break;
            case 'every-other-week':
                $endDay = strtotime($paySchedule->next_pay_period_end);
                $payDate = strtotime($paySchedule->next_payday);

                if ($payDate < strtotime(date('m/d/Y'))) {
                    do {
                        $payDate = strtotime(date('m/d/Y', $payDate).' +2 weeks');
                        $endDay = strtotime(date('m/d/Y', $endDay).' +2 weeks');
                    } while ($payDate <= strtotime(date('m/d/Y')));
                }
                $endDay = date('m/d/Y', $endDay);
                $payDate = date('m/d/Y', $payDate);
                $firstPayDate = date('m/d/Y', strtotime($payDate.' +8 weeks'));
                $lastDateString = date('m/d/Y', strtotime($endDay.' +8 weeks'));
                $firstDateString = date('m/d/Y', strtotime($lastDateString.' -13 days'));
                $dropdownLimit = 18;
            break;
            case 'twice-month':
                $currentMonth = intval(date("m"));
                $currentYear = intval(date("Y"));
                $firstPayDay = $paySchedule->first_payday === "0" ? strtotime(date("m/t/Y", strtotime(date("m/d/Y")))) : strtotime(date("m/$paySchedule->first_payday/Y"));
                $secondPayDay = $paySchedule->second_payday === "0" ? strtotime(date("m/t/Y", strtotime(date("m/d/Y")))) : strtotime(date("m/$paySchedule->second_payday/Y"));
                $currentDate = strtotime(date("m/d/Y"));

                if ($currentDate <= $firstPayDay) {
                    $payDate = $firstPayDay;
                    $payDateMonth = intval(date('m', $payDate));
                    $payDateYear = intval(date('Y', $payDate));

                    if ($paySchedule->end_of_first_pay_period === 'end-date') {
                        switch ($paySchedule->first_pay_month) {
                            case 'same':
                                $endDay = $paySchedule->first_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear")));
                            break;
                            case 'previous':
                                $endDay = $paySchedule->first_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear -1 month")));
                            break;
                            case 'next':
                                $endDay = $paySchedule->first_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear +1 month"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear +1 month")));
                            break;
                        }
                    } else {
                        $endDay = strtotime(date("m/d/Y", $payDate)." -$paySchedule->first_pay_days_before days");
                    }

                    $payDate = date('m/d/Y', $payDate);
                    $payDateMonth = intval(date('m', strtotime($payDate)));
                    $payDateYear = date('Y', strtotime($payDate));
                    $payDateDay = date('d', strtotime($payDate));
                    $firstPayDate = $paySchedule->first_payday === "0" ? date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear +2 months")) : date('m/d/Y', strtotime("$payDate +2 months"));
                } else {
                    $payDate = $secondPayDay;
                    $payDateMonth = intval(date('m', $payDate));
                    $payDateYear = intval(date('Y', $payDate));

                    if ($paySchedule->end_of_second_pay_period === 'end-date') {
                        switch ($paySchedule->second_pay_month) {
                            case 'same':
                                $endDay = $paySchedule->second_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_pay_day/$payDateYear")));
                            break;
                            case 'previous':
                                $endDay = $paySchedule->second_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_pay_day/$payDateYear -1 month")));
                            break;
                            case 'next':
                                $endDay = $paySchedule->second_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear +1 month"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_pay_day/$payDateYear +1 month")));
                            break;
                        }
                    } else {
                        $endDay = strtotime(date("m/d/Y", $payDate)." -$paySchedule->second_pay_days_before days");
                    }

                    $payDate = date('m/d/Y', $payDate);
                    $payDateMonth = intval(date('m', strtotime($payDate)));
                    $payDateYear = date('Y', strtotime($payDate));
                    $payDateDay = date('d', strtotime($payDate));
                    $firstPayDate = $paySchedule->second_payday === "0" ? date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear +2 months")) : date('m/d/Y', strtotime("$payDate +2 months"));
                }

                $endDay = date('m/d/Y', $endDay);
                $endDayMonth = intval(date('m', strtotime($endDay)));
                $endDayYear = date('Y', strtotime($endDay));

                $payDateMonth = date("m", strtotime($firstPayDate));
                $payDateYear = date("Y", strtotime($firstPayDate));
                $payDateDay = date("d", strtotime($firstPayDate));
                $first = $paySchedule->first_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_payday/$payDateYear"));
                $second = $paySchedule->second_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_payday/$payDateYear"));

                if ($firstPayDate === $first) {
                    if ($paySchedule->end_of_first_pay_period === 'end-date') {
                        switch ($paySchedule->first_pay_month) {
                            case 'same':
                                $lastDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear"));
                            break;
                            case 'previous':
                                $lastDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear -1 month"));
                            break;
                            case 'next':
                                $lastDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear +1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear +1 month"));
                            break;
                        }
                    } else {
                        $lastDateString = date("m/d/Y", strtotime("$firstPayDate -$paySchedule->first_pay_days_before days"));
                    }

                    $prevPayDate = $paySchedule->second_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_payday/$payDateYear -1 month"));
                    $prevPayMonth = date("m", strtotime($prevPayDate));
                    $prevPayYear = date("Y", strtotime($prevPayDate));

                    if ($paySchedule->end_of_second_pay_period === 'end-date') {
                        switch ($paySchedule->second_pay_month) {
                            case 'same':
                                $firstDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->second_pay_day/$prevPayYear"));
                            break;
                            case 'previous':
                                $firstDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear -1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->second_pay_day/$prevPayYear -1 month"));
                            break;
                            case 'next':
                                $firstDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear +1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->second_pay_day/$prevPayYear +1 month"));
                            break;
                        }
                    } else {
                        $firstDateString = date("m/d/Y", strtotime("$prevPayDate -$paySchedule->second_pay_days_before days"));
                    }
                } else {
                    if ($paySchedule->end_of_second_pay_period === 'end-date') {
                        switch ($paySchedule->second_pay_month) {
                            case 'same':
                                $lastDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_pay_day/$payDateYear"));
                            break;
                            case 'previous':
                                $lastDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_pay_day/$payDateYear -1 month"));
                            break;
                            case 'next':
                                $lastDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear +1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_pay_day/$payDateYear +1 month"));
                            break;
                        }
                    } else {
                        $lastDateString = date("m/d/Y", strtotime("$firstPayDate -$paySchedule->second_pay_days_before days"));
                    }

                    $prevPayDate = $paySchedule->first_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_payday/$payDateYear"));
                    $prevPayMonth = date("m", strtotime($prevPayDate));
                    $prevPayYear = date("Y", strtotime($prevPayDate));

                    if ($paySchedule->end_of_first_pay_period === 'end-date') {
                        switch ($paySchedule->first_pay_month) {
                            case 'same':
                                $firstDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->first_pay_day/$prevPayYear"));
                            break;
                            case 'previous':
                                $firstDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear -1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->first_pay_day/$prevPayYear -1 month"));
                            break;
                            case 'next':
                                $firstDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear +1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->first_pay_day/$prevPayYear +1 month"));
                            break;
                        }
                    } else {
                        $firstDateString = date("m/d/Y", strtotime("$prevPayDate -$paySchedule->first_pay_days_before days"));
                    }
                }
                $firstDateString = date("m/d/Y", strtotime("$firstDateString +1 day"));
                
                $dropdownLimit = 17;
            break;
            case 'every-month':
                $currentMonth = intval(date("m"));
                $currentYear = intval(date("Y"));
                $firstPayDate = $paySchedule->first_payday === "0" ? cal_days_in_month(CAL_GREGORIAN, $currentMonth, $currentYear) : intval($paySchedule->first_payday);
                $firstPayDay = strtotime(date("m/$firstPayDate/Y"));
                $currentDate = strtotime(date("m/d/Y"));

                if ($currentDate <= $firstPayDay) {
                    $payDate = $firstPayDay;
                } else {
                    $payDate = strtotime(date("m/d/Y").' +1 month');
                    $payDateMonth = intval(date('m', $payDate));
                    $payDateYear = intval(date('Y', $payDate));
                    $payDate = $paySchedule->first_payday === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear"))) : strtotime(date("$payDateMonth/$firstPayDate/$payDateYear"));
                }
                $payDateMonth = date('m', $payDate);
                $payDateYear = date('Y', $payDate);

                if ($paySchedule->end_of_first_pay_period === 'end-date') {
                    switch ($paySchedule->first_pay_month) {
                        case 'same':
                            $endDay = $paySchedule->first_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear")));
                        break;
                        case 'previous':
                            $endDay = $paySchedule->first_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear -1 month")));
                        break;
                        case 'next':
                            $endDay = $paySchedule->first_pay_day === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear +1 month"))) : strtotime(date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear +1 month")));
                        break;
                    }
                } else {
                    $endDay = strtotime(date("m/d/Y", $payDate)." -$paySchedule->first_pay_days_before days");
                }

                $payDate = date('m/d/Y', $payDate);
                $endDay = date('m/d/Y', $endDay);
                $month = intval(date('m', strtotime($endDay)));
                $year = intval(date('Y', strtotime($endDay)));
                $totalDays = cal_days_in_month(CAL_GREGORIAN, $month, $year);
                $payDateMonth = intval(date('m', strtotime($payDate)));
                $payDateYear = intval(date('Y', strtotime($payDate)));
                $payDateTotalDays = cal_days_in_month(CAL_GREGORIAN, $payDateMonth, $payDateYear);

                if ($paySchedule->first_payday === "0") {
                    $firstPayDate = date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear +4 months"));
                } else {
                    $firstPayDate = date('m/d/Y', strtotime($payDate.' +4 months'));
                }
                $payDateMonth = intval(date('m', strtotime($firstPayDate)));
                $payDateYear = intval(date('Y', strtotime($firstPayDate)));

                $prevPayDate = $paySchedule->first_payday === "0" ? date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear -1 month")) : date('m/d/Y', strtotime("$payDateMonth/$paySchedule->first_payday/$payDateYear -1 month"));
                $prevPayDateMonth = intval(date('m', strtotime($prevPayDate)));
                $prevPayDateYear = intval(date('Y', strtotime($prevPayDate)));

                if ($paySchedule->end_of_first_pay_period === 'end-date') {
                    switch ($paySchedule->first_pay_month) {
                        case 'same':
                            $lastDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear")) : date('m/d/Y', strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear"));
                            $firstDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$prevPayDateMonth/01/$prevPayDateYear")) : date('m/d/Y', strtotime("$prevPayDateMonth/$paySchedule->first_pay_day/$prevPayDateYear"));
                        break;
                        case 'previous':
                            $lastDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear -1 month")) : date('m/d/Y', strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear -1 month"));
                            $firstDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$prevPayDateMonth/01/$prevPayDateYear -1 month")) : date('m/d/Y', strtotime("$prevPayDateMonth/$paySchedule->first_pay_day/$prevPayDateYear -1 month"));
                        break;
                        case 'next':
                            $lastDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear +1 month")) : date('m/d/Y', strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear +1 month"));
                            $firstDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$prevPayDateMonth/01/$prevPayDateYear +1 month")) : date('m/d/Y', strtotime("$prevPayDateMonth/$paySchedule->first_pay_day/$prevPayDateYear +1 month"));
                        break;
                    }
                } else {
                    $lastDateString = date('m/d/Y', strtotime("$firstPayDate -$paySchedule->first_pay_days_before days"));
                    $firstDateString = date('m/d/Y', strtotime("$prevPayDate -$paySchedule->first_pay_days_before days"));
                }

                $firstDateString = date("m/d/Y", strtotime("$firstDateString +1 day"));

                $dropdownLimit = 11;
            break;
        }

        $payPeriod = [
            [
                'first_day' => $firstDateString,
                'last_day' => $lastDateString,
                'selected' => (strtotime($payDate) === strtotime($firstPayDate)) ? true : false,
                'pay_date' => $firstPayDate
            ]
        ];

        for ($i = 0; count($payPeriod) < $dropdownLimit; $i++) {
            $lastDateString = date('m/d/Y', strtotime($firstDateString.' -1 day'));
            switch ($paySchedule->pay_frequency) {
                case 'every-week':
                    $firstDateString = date('m/d/Y', strtotime($lastDateString.' -6 days'));
                    $firstPayDate = date('m/d/Y', strtotime($firstPayDate.' -7 days'));
                break;
                case 'every-other-week':
                    $firstDateString = date('m/d/Y', strtotime($lastDateString.' -13 days'));
                    $firstPayDate = date('m/d/Y', strtotime($firstPayDate.' -2 weeks'));
                break;
                case 'twice-month':
                    $payDateMonth = intval(date('m', strtotime($firstPayDate)));
                    $payDateYear = intval(date('Y', strtotime($firstPayDate)));
                    $firstPayDay = $paySchedule->first_payday === "0" ? strtotime(date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear"))) : strtotime("$payDateMonth/$paySchedule->first_payday/$payDateYear");
                    if (strtotime($firstPayDate) === $firstPayDay) {
                        $firstPayDate = date('m/d/Y', strtotime("$payDateMonth/01/$payDateYear -1 month"));
                        $payDateMonth = intval(date('m', strtotime($firstPayDate)));
                        $payDateYear = intval(date('Y', strtotime($firstPayDate)));
                        $firstPayDate = $paySchedule->second_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_payday/$payDateYear"));
                    } else {
                        $firstPayDate = date('m/d/Y', $firstPayDay);
                    }

                    $payDateMonth = intval(date('m', strtotime($firstPayDate)));
                    $payDateYear = intval(date('Y', strtotime($firstPayDate)));
                    $firstPayDay = $paySchedule->first_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_payday/$payDateYear"));

                    if (date('m/d/Y', strtotime($firstPayDate)) === $firstPayDay) {
                        $prevPayDate = $paySchedule->second_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->second_payday/$payDateYear -1 month"));

                        if ($paySchedule->end_of_second_pay_period === 'end-date') {
                            $prevPayMonth = date("m", strtotime($prevPayDate));
                            $prevPayYear = date("Y", strtotime($prevPayDate));

                            switch ($paySchedule->second_pay_month) {
                                case 'same':
                                    $firstDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->second_pay_day/$prevPayYear"));
                                break;
                                case 'previous':
                                    $firstDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear -1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->second_pay_day/$prevPayYear -1 month"));
                                break;
                                case 'next':
                                    $firstDateString = $paySchedule->second_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear +1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->second_pay_day/$prevPayYear +1 month"));
                                break;
                            }
                        } else {
                            $firstDateString = date('m/d/Y', strtotime("$prevPayDate -$paySchedule->second_pay_days_before days"));
                        }
                    } else {
                        $prevPayDate = $paySchedule->first_payday === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_payday/$payDateYear"));

                        if ($paySchedule->end_of_first_pay_period === 'end-date') {
                            $prevPayMonth = date("m", strtotime($prevPayDate));
                            $prevPayYear = date("Y", strtotime($prevPayDate));

                            switch ($paySchedule->first_pay_month) {
                                case 'same':
                                    $firstDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->first_pay_day/$prevPayYear"));
                                break;
                                case 'previous':
                                    $firstDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear -1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->first_pay_day/$prevPayYear -1 month"));
                                break;
                                case 'next':
                                    $firstDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$prevPayMonth/01/$prevPayYear +1 month")) : date("m/d/Y", strtotime("$prevPayMonth/$paySchedule->first_pay_day/$prevPayYear +1 month"));
                                break;
                            }
                        } else {
                            $firstDateString = date('m/d/Y', strtotime("$prevPayDate -$paySchedule->first_pay_days_before days"));
                        }
                    }

                    $firstDateString = date('m/d/Y', strtotime("$firstDateString +1 day"));
                break;
                case 'every-month':
                    if ($paySchedule->first_payday === "0") {
                        $payDateMonth = intval(date('m', strtotime($firstPayDate)));
                        $payDateYear = intval(date('Y', strtotime($firstPayDate)));

                        $firstPayDate = date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear -1 month"));
                    } else {
                        $firstPayDate = date('m/d/Y', strtotime($firstPayDate.' -1 month'));
                    }

                    $payDateMonth = intval(date('m', strtotime($firstPayDate)));
                    $payDateYear = intval(date('Y', strtotime($firstPayDate)));

                    $prevPayDate = $paySchedule->first_payday === "0" ? date('m/t/Y', strtotime("$payDateMonth/01/$payDateYear -1 month")) : date('m/d/Y', strtotime("$payDateMonth/$paySchedule->first_payday/$payDateYear -1 month"));
                    $prevPayDateMonth = intval(date('m', strtotime($prevPayDate)));
                    $prevPayDateYear = intval(date('Y', strtotime($prevPayDate)));

                    if ($paySchedule->end_of_first_pay_period === 'end-date') {
                        switch ($paySchedule->first_pay_month) {
                            case 'same':
                                $lastDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear"));
                                $firstDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$prevPayDateMonth/01/$prevPayDateYear")) : date('m/d/Y', strtotime("$prevPayDateMonth/$paySchedule->first_pay_day/$prevPayDateYear"));
                            break;
                            case 'previous':
                                $lastDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear -1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear -1 month"));
                                $firstDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$prevPayDateMonth/01/$prevPayDateYear -1 month")) : date('m/d/Y', strtotime("$prevPayDateMonth/$paySchedule->first_pay_day/$prevPayDateYear -1 month"));
                            break;
                            case 'next':
                                $lastDateString = $paySchedule->first_pay_day === "0" ? date("m/t/Y", strtotime("$payDateMonth/01/$payDateYear +1 month")) : date("m/d/Y", strtotime("$payDateMonth/$paySchedule->first_pay_day/$payDateYear +1 month"));
                                $firstDateString = $paySchedule->first_pay_day === "0" ? date('m/t/Y', strtotime("$prevPayDateMonth/01/$prevPayDateYear +1 month")) : date('m/d/Y', strtotime("$prevPayDateMonth/$paySchedule->first_pay_day/$prevPayDateYear +1 month"));
                            break;
                        }
                    } else {
                        $lastDateString = date('m/d/Y', strtotime("$firstPayDate -$paySchedule->first_pay_days_before days"));
                        $firstDateString = date('m/d/Y', strtotime("$prevPayDate -$paySchedule->first_pay_days_before days"));
                    }

                    $firstDateString = date("m/d/Y", strtotime("$firstDateString +1 day"));
                break;
            }

            $payPeriod[] = [
                'first_day' => $firstDateString,
                'last_day' => $lastDateString,
                'selected' => (strtotime($payDate) === strtotime($firstPayDate)) ? true : false,
                'pay_date' => $firstPayDate
            ];
        }

        $this->page_data['payPeriods'] = $payPeriod;
        $this->page_data['accounts'] = $accounts;
        $this->page_data['payDate'] = $payDate;

        $this->load->view('v2/includes/accounting/modal_forms/payroll_form', $this->page_data);
    }

    public function generate_payroll()
    {
        $postData = $this->input->post();
        $socialSecurity = 6.2;
        $medicare = 1.45;
        $futa = 0.006;
        $sui = 0.00;
        // $sui = 2.7;

        $this->page_data['payPeriod'] = str_replace('-', ' to ', $postData['pay_period']);
        $this->page_data['payDate'] = date('l, M d', strtotime($postData['pay_date']));

        $employees = [];
        foreach ($postData['employees'] as $key => $empId) {
            $emp = $this->users_model->getUser($empId);
            $payDetails = $this->users_model->getEmployeePayDetails($emp->id);

            $empTotalPay = ($payDetails->pay_rate * floatval(str_replace(',', '', $postData['reg_pay_hours'][$key]))) + floatval(str_replace(',', '', $postData['commission'][$key]));

            $empSocial = ($empTotalPay / 100) * $socialSecurity;
            $empMedicare = ($empTotalPay / 100) * $medicare;
            $empTax = $empSocial + $empMedicare;
            $employeeSUI = ($empTotalPay / 100) * $sui;

            $netPay = $empTotalPay - $empTax;

            $employees[] = [
                'id' => $emp->id,
                'name' => $emp->LName . ', ' . $emp->FName,
                'pay_method' => 'Paper check',
                'employee_hours' => $postData['reg_pay_hours'][$key],
                'total_pay' => number_format($empTotalPay, 2, '.', ','),
                'employee_tax' => number_format($empTax, 2, '.', ','),
                'net_pay' => number_format($netPay, 2, '.', ','),
                'employee_futa' => number_format($empTotalPay * $futa, 2, '.', ','),
                'employee_sui' => number_format($employeeSUI, 2, '.', ',')
            ];
        }

        $totalHours = array_sum(array_column($employees, 'employee_hours'));
        $totalHours =  number_format($totalHours, 2, '.', ',');
        $totalPay = array_sum(array_column($employees, 'total_pay'));
        $totalPay = number_format($totalPay, 2, '.', ',');
        $totalTaxes = array_sum(array_column($employees, 'employee_tax'));
        $totalTaxes = number_format($totalTaxes, 2, '.', ',');
        $totalNetPay = array_sum(array_column($employees, 'net_pay'));
        $totalNetPay = number_format($totalNetPay, 2, '.', ',');
        $totalFuta = array_sum(array_column($employees, 'employee_futa'));
        $totalFuta = number_format($totalFuta, 2, '.', ',');
        $totalSUI = array_sum(array_column($employees, 'employee_sui'));
        $totalSUI = number_format($totalSUI, 2, '.', ',');

        $totalEmployerTax = $totalTaxes + $totalFuta + $totalSUI;

        $totalPayrollCost = $totalNetPay + $totalTaxes + $totalEmployerTax;

        $this->page_data['employees'] = $employees;
        $this->page_data['total'] = [
            'total_hours' => $totalHours,
            'total_pay' => $totalPay,
            'total_taxes' => $totalTaxes,
            'total_net_pay' => $totalNetPay,
            'total_employer_tax' => number_format($totalEmployerTax, 2, '.', ','),
            'total_payroll_cost' => number_format($totalPayrollCost, 2, '.', ',')
        ];

        $this->load->view("v2/includes/accounting/modal_forms/payroll_summary", $this->page_data);
    }

    public function get_statement_customers()
    {
        $input = $this->input->post();
        $company_id = logged('company_id');

        $customers = $this->accounting_customers_model->getAllByCompany();

        $data = [
            'cust_bal_status' => $input['cust_bal_status'],
            'company_id' => logged('company_id'),
            'start_date' => ($input['statement_type'] === '2') ? date('Y-m-d', strtotime(' -1 year')) : date('Y-m-d', strtotime($input['start_date'])),
            'end_date' => ($input['statement_type'] === '2') ? date('Y-m-d', strtotime(' -1 year')) : date('Y-m-d', strtotime($input['start_date']))
        ];

        $rows = [];
        foreach($customers as $customer) {
            $data['customer_id'] = $customer->prof_id;
            if ($input['statement_type'] === '1' || $input['statement_type'] === '2') {
                $invoices = $this->accounting_invoices_model->getStatementInvoices($data);
            } else {
                $invoices = $this->accounting_invoices_model->getTransactionInvoices($data);
            }
            $creditMemos = $this->accounting_credit_memo_model->get_customer_credit_memos($data);

            if(count($invoices) > 0) {
                $invoiceTotal = array_sum(array_map(function($invoice) {
                    return floatval($invoice->balance);
                }, $invoices));

                $creditMemosTotal = array_sum(array_map(function($memo) {
                    return floatval($memo->balance);
                }, $creditMemos));

                $name = $customer->last_name.' '.$customer->first_name;
                $name = str_replace(' ', '', $name);
                $name = $name === '' ? $customer->business_name : $customer->last_name.', '.$customer->first_name;

                $rows[] = [
                    'id' => $customer->prof_id,
                    'name' => $name,
                    'email' => $customer->email,
                    'balance' => floatval($invoiceTotal) - floatval($creditMemosTotal)
                ];
            }
        }

        $totalBalance = array_sum(array_map(function ($item) {
            return $item['balance'];
        }, $rows));

        $withoutEmail = array_filter($rows, function ($value, $key) {
            return $value['email'] === '' || $value['email'] === null;
        }, ARRAY_FILTER_USE_BOTH);

        $result = [
            'customers' => $rows,
            'total' => number_format(floatval(str_replace(',', '', $totalBalance)), 2, '.', ','),
            'withoutEmail' => array_values($withoutEmail)
        ];

        echo json_encode($result);
    }

    public function getAccountBalance($accountId = "")
    {
        $account = $this->chart_of_accounts_model->getById($accountId);

        if (strpos($account->balance, '-') !== false) {
            $balance = str_replace('-', '', $account->balance);
            $balance = floatval(str_replace(',', '', $balance));
            $selectedBalance = '-$'.number_format($balance, 2, '.', ',');
        } else {
            $selectedBalance = '$'.number_format(floatval(str_replace(',', '', $account->balance)), 2, '.', ',');
        }

        echo json_encode(['balance' => $selectedBalance]);
    }

    public function getItemDetails($id)
    {
        $item = $this->items_model->getItemById($id)[0];
        $locations = $this->items_model->getLocationByItemId($id);

        echo json_encode(['item' => $item, 'locations' => $locations]);
    }

    public function action()
    {
        $data = $this->input->post();
        $modalName = $data['modal_name'];

        if (isset($_FILES['attachments'])) {
            $files = $_FILES['attachments'];
        }

        try {
            switch ($modalName) {
                case 'transferModal':
                    $this->result = $this->transfer_funds($data);
                break;
                case 'payDownCreditModal':
                    $this->result = $this->pay_down_credit_card($data);
                break;
                case 'singleTimeModal':
                    $this->result = $this->single_time_activity($data);
                break;
                case 'journalEntryModal':
                    $this->result = $this->journal_entry($data);
                break;
                case 'depositModal':
                    $this->result = $this->bank_deposit($data);
                break;
                case 'inventoryModal':
                    $this->result = $this->inventory_qty_adjustment($data);
                break;
                case 'weeklyTimesheetModal':
                    $this->result = $this->weekly_timesheet($data);
                break;
                case 'payrollModal':
                    $this->result = $this->payroll($data);
                break;
                case 'statementModal':
                    $this->result = $this->statement($data);
                break;
                case 'commission-payroll-modal':
                    $this->result = $this->payroll($data, 'commission-only');
                break;
                case 'bonus-payroll-modal':
                    $this->result = $this->payroll($data, 'bonus');
                break;
                case 'expenseModal':
                    $this->result = $this->expense($data);
                break;
                case 'checkModal':
                    $this->result = $this->check($data);
                break;
                case 'billModal':
                    $this->result = $this->bill($data);
                break;
                case 'payBillsModal':
                    $this->result = $this->pay_bills($data);
                break;
                case 'vendorCreditModal':
                    $this->result = $this->vendor_credit($data);
                break;
                case 'purchaseOrderModal':
                    $this->result = $this->purchase_order($data);
                break;
                case 'creditCardCreditModal':
                    $this->result = $this->credit_card_credit($data);
                break;
                case 'billPaymentModal':
                    $this->result = $this->bill_payment($data);
                break;
                case 'invoiceModal' :
                    $this->result = $this->invoice($data);
                break;
                case 'receivePaymentModal' :
                    $this->result = $this->receive_payment($data);
                break;
                case 'creditMemoModal' :
                    $this->result = $this->credit_memo($data);
                break;
                case 'salesReceiptModal' :
                    $this->result = $this->sales_receipt($data);
                break;
                case 'refundReceiptModal' :
                    $this->result = $this->refund_receipt($data);
                break;
                case 'delayedCreditModal' :
                    $this->result = $this->delayed_credit($data);
                break;
                case 'delayedChargeModal' :
                    $this->result = $this->delayed_charge($data);
                break;
                case 'standard-estimate-modal' :
                    $this->result = $this->standard_estimate($data);
                break;
                case 'options-estimate-modal' :
                    $this->result = $this->options_estimate($data);
                break;
                case 'bundle-estimate-modal' :
                    $this->result = $this->bundle_estimate($data);
                break;
            }
        } catch (\Exception $e) {
            $this->result = $e->getMessage();
        }

        echo json_encode($this->result);
        exit;
    }

    private function transfer_funds($data)
    {
        $this->form_validation->set_rules('transfer_from_account', 'Transfer From Account', 'required');
        $this->form_validation->set_rules('transfer_to_account', 'Transfer To Account', 'required|differs[transfer_from_account]');
        $this->form_validation->set_rules('transfer_amount', 'Amount', 'required');

        if (isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('date', 'Date', 'required|date');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $insertData = [
                'company_id' => logged('company_id'),
                'transfer_from_account_id' => $data['transfer_from_account'],
                'transfer_to_account_id' => $data['transfer_to_account'],
                'transfer_amount' => floatval(str_replace(',', '', $data['transfer_amount'])),
                'transfer_date' => isset($data['date']) ? date('Y-m-d', strtotime($data['date'])) : null,
                'transfer_memo' => $data['memo'],
                'recurring' => isset($data['template_name']) ? 1 : null,
                'created_by' => logged('id'),
                'status' => 1
            ];

            $transferId = $this->accounting_transfer_funds_model->create($insertData);

            if ($transferId) {
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Transfer',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $transferId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(!isset($data['template_name'])) {
                    $transferFromAcc = $this->chart_of_accounts_model->getById($data['transfer_from_account']);
                    $transferToAcc = $this->chart_of_accounts_model->getById($data['transfer_to_account']);

                    $transferFromBal = $transferFromAcc->account_id !== "7" ? floatval(str_replace(',', '', $transferFromAcc->balance)) - floatval(str_replace(',', '', $data['transfer_amount'])) : floatval(str_replace(',', '', $transferFromAcc->balance)) + floatval(str_replace(',', '', $data['transfer_amount']));
                    $transferToBal = $transferToAcc->account_id !== "7" ? floatval(str_replace(',', '', $transferToAcc->balance)) + floatval(str_replace(',', '', $data['transfer_amount'])) : floatval(str_replace(',', '', $transferToAcc->balance)) - floatval(str_replace(',', '', $data['transfer_amount']));

                    $transferFromBal = number_format($transferFromBal, 2, '.', ',');
                    $transferToBal = number_format($transferToBal, 2, '.', ',');

                    $transferFromAccData = [
                        'id' => $transferFromAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $transferFromBal))
                    ];
                    $transferToAccData = [
                        'id' => $transferToAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $transferToBal))
                    ];

                    $this->chart_of_accounts_model->updateBalance($transferFromAccData);
                    $this->chart_of_accounts_model->updateBalance($transferToAccData);

                    $accTransacData = [
                        'account_id' => $transferFromAcc->id,
                        'transaction_type' => 'Transfer',
                        'transaction_id' => $transferId,
                        'amount' => floatval(str_replace(',', '', $data['transfer_amount'])),
                        'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                        'type' => 'decrease'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);

                    $accTransacData = [
                        'account_id' => $transferToAcc->id,
                        'transaction_type' => 'Transfer',
                        'transaction_id' => $transferId,
                        'amount' => floatval(str_replace(',', '', $data['transfer_amount'])),
                        'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                        'type' => 'increase'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                } else {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? ($data['days_in_advance'] !== '' ? $data['days_in_advance'] : null) : null,
                        'txn_type' => 'transfer',
                        'txn_id' => $transferId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
    
                    $return['data'] = $transferId;
                    $return['success'] = $transferId && $recurringId ? true : false;
                    $return['message'] = $transferId && $recurringId ? 'Template saved!' : 'An unexpected error occured!';
                }
            }

            $return['data'] = $transferId;
            $return['success'] = $transferId ? true : false;
            $return['message'] = $transferId ? 'Transfer Successfully!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function pay_down_credit_card($data)
    {
        $this->form_validation->set_rules('credit_card_account', 'Credit Card', 'required');
        $this->form_validation->set_rules('amount', 'Amount', 'required');
        $this->form_validation->set_rules('payment_date', 'Date of Payment', 'required');
        $this->form_validation->set_rules('bank_account', 'Date of Payment', 'required');

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $insertData = [
                'company_id' => logged('company_id'),
                'credit_card_id' => $data['credit_card_account'],
                'payee_id' => $data['payee'],
                'amount' => floatval(str_replace(',', '', $data['amount'])),
                'date' => date('Y-m-d', strtotime($data['payment_date'])),
                'bank_account_id' => $data['bank_account'],
                'memo' => $data['memo'],
                'created_by' => logged('id'),
                'status' => 1
            ];

            $payDownId = $this->accounting_pay_down_credit_card_model->create($insertData);

            if ($payDownId) {
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'CC Payment',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $payDownId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                $creditAcc = $this->chart_of_accounts_model->getById($data['credit_card_account']);

                $newBalance = floatval(str_replace(',', '', $creditAcc->balance)) - floatval(str_replace(',', '', $data['amount']));
                $newBalance = number_format($newBalance, 2, '.', ',');

                $this->chart_of_accounts_model->updateBalance(['id' => $creditAcc->id, 'company_id' => logged('company_id'), 'balance' => floatval(str_replace(',', '', $newBalance))]);

                $accTransacData = [
                    'account_id' => $creditAcc->id,
                    'transaction_type' => 'CC Payment',
                    'transaction_id' => $payDownId,
                    'amount' => floatval(str_replace(',', '', $data['amount'])),
                    'transaction_date' => date('Y-m-d', strtotime($data['payment_date'])),
                    'type' => 'increase'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                $bankAcc = $this->chart_of_accounts_model->getById($data['bank_account']);

                $newBalance = floatval(str_replace(',', '', $bankAcc->balance)) - floatval(str_replace(',', '', $data['amount']));
                $newBalance = number_format($newBalance, 2, '.', ',');

                $this->chart_of_accounts_model->updateBalance(['id' => $bankAcc->id, 'company_id' => logged('company_id'), 'balance' => floatval(str_replace(',', '', $newBalance))]);

                $accTransacData = [
                    'account_id' => $bankAcc->id,
                    'transaction_type' => 'CC Payment',
                    'transaction_id' => $payDownId,
                    'amount' => floatval(str_replace(',', '', $data['amount'])),
                    'transaction_date' => date('Y-m-d', strtotime($data['payment_date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);
            }

            $return['data'] = $payDownId;
            $return['success'] = $payDownId ? true : false;
            $return['message'] = $payDownId ? 'Payment Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function single_time_activity($data)
    {
        $this->form_validation->set_rules('date', 'Date', 'required');
        $this->form_validation->set_rules('person_tracking', 'Name', 'required');
        $this->form_validation->set_rules('customer', 'Customer', 'required');
        $this->form_validation->set_rules('service', 'Service', 'required');
        if ($data['billable'] === 1 || $data['billable'] === "1") {
            $this->form_validation->set_rules('hourly_rate', 'Hourly Rate', 'required');
        }

        if ($data['start_end_time'] === 1 || $data['start_end_time'] === "1") {
            $this->form_validation->set_rules('start_time', 'Start Time', 'required');
            $this->form_validation->set_rules('end_time', 'End Time', 'required');
        } else {
            $this->form_validation->set_rules('time', 'Time', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $timesheetSettings = $this->accounting_timesheet_settings_model->get_by_company_id(logged('company_id'));
            $name = explode('-', $data['person_tracking']);

            if(isset($data['start_end_time'])) {
                $startTime = strtotime($data['start_time']);
                $endTime = strtotime($data['end_time']);
                $break = strtotime($data['time'] === '' ? "00:00" : $data['time']);
                $duration = date("H:i:s", (($endTime - $startTime) - $break));
            } else {
                $duration = date("H:i:s", strtotime($data['time']));
            }
            $hms = explode(":", $duration);
            $totalTime = $hms[0].":".$hms[1].":".$hms[2];

            $timeActData = [
                'company_id' => logged('company_id'),
                'date' => date('Y-m-d', strtotime($data['date'])),
                'name_key' => $name[0],
                'name_id' => $name[1],
                'customer_id' => $data['customer'],
                'service_id' => $timesheetSettings->service === "1" || is_null($timesheetSettings) ? $data['service'] : null,
                'billable' => $timesheetSettings->billable === "1" && isset($data['billable']) || is_null($timesheetSettings) && isset($data['billable']) ? 1 : 0,
                'hourly_rate' => $timesheetSettings->billable === "1" && isset($data['billable']) || is_null($timesheetSettings) && isset($data['billable']) ? floatval(str_replace(',', '', $data['hourly_rate'])) : null,
                'taxable' => $timesheetSettings->billable === "1" && isset($data['billable']) && isset($data['taxable']) || is_null($timesheetSettings) && isset($data['billable']) && isset($data['taxable']) ? 1 : 0,
                'start_time' => isset($data['start_end_time']) ? $data['start_time'] : null,
                'end_time' => isset($data['start_end_time']) ? $data['end_time'] : null,
                'break_duration' => isset($data['start_end_time']) ? $data['time'] : null,
                'time' => $totalTime,
                'description' => $data['description'],
                'status' => 1
            ];

            $activityId = $this->accounting_single_time_activity_model->create($timeActData);
            
            $date = date('Y-m-d', strtotime($data['date']));
            $dateTime = new DateTime($date);
            $weekNo = $dateTime->format('W');

            $newDate = new DateTime();
            $firstDay = $newDate->setISODate($dateTime->format("Y"), $weekNo, 0);
            $firstDayString = $firstDay->format('Y-m-d');
            $lastDay = $newDate->setISODate($dateTime->format("Y"), $weekNo, 6);
            $lastDayString = $lastDay->format('Y-m-d');

            $timesheetData = [
                'name_type' => $name[0],
                'name_id' => $name[1],
                'week_start_date' => $firstDayString,
                'week_end_date' => $lastDayString
            ];

            $timesheet = $this->accounting_weekly_timesheet_model->get_timesheet($timesheetData);

            if(is_null($timesheet)) {
                $timesheetRecord = [
                    'company_id' => logged('company_id'),
                    'name_type' => $name[0],
                    'name_id' => $name[1],
                    'week_start_date' => date("Y-m-d", strtotime($firstDayString)),
                    'week_end_date' => date("Y-m-d", strtotime($lastDayString)),
                    'status' => 1
                ];
    
                $timeSheetRecordId = $this->accounting_weekly_timesheet_model->create($timesheetRecord);
            }
            
            $return['data'] = $activityId;
            $return['success'] = $activityId ? true : false;
            $return['message'] = $activityId ? 'Recorded Successfully!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function journal_entry($data)
    {
        if (isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('journal_date', 'Date', 'required');
            $this->form_validation->set_rules('journal_no', 'Journal No.', 'required');
        }

        $totalDebit = array_sum(array_map(function ($item) {
            return $item;
        }, $data['debits']));

        $totalCredit = array_sum(array_map(function ($item) {
            return $item;
        }, $data['credits']));

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (isset($data['journal_entry_accounts']) && count($data['journal_entry_accounts']) < 2 || !isset($data['journal_entry_accounts'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'You must fill out at least two detail lines.';
        } elseif ($totalDebit !== $totalCredit) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please balance debits and credits.';
        } else {
            $insertData = [
                'company_id' => logged('company_id'),
                'journal_no' => (!isset($data['template_name'])) ? $data['journal_no'] : null,
                'journal_date' => (!isset($data['template_name'])) ? date('Y-m-d', strtotime($data['journal_date'])) : null,
                'memo' => $data['memo'],
                'recurring' => isset($data['template_name']) ? 1 : null,
                'created_by' => logged('id'),
                'status' => 1
            ];

            $entryId = $this->accounting_journal_entries_model->create($insertData);

            if ($entryId > 0) {
                if (isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? ($data['days_in_advance'] !== '' ? $data['days_in_advance'] : null) : null,
                        'txn_type' => 'journal entry',
                        'txn_id' => $entryId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Journal',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $entryId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                $entryItems = [];
                foreach ($data['journal_entry_accounts'] as $key => $value) {
                    $name = explode('-', $data['names'][$key]);
    
                    // $entryItems[] = [
                    $entryItem = [
                        'journal_entry_id' => $entryId,
                        'account_id' => $value,
                        'debit' => $data['debits'][$key],
                        'credit' => $data['credits'][$key],
                        'description' => $data['descriptions'][$key],
                        'name_key' => $name[0],
                        'name_id' => $name[1]
                    ];

                    $entryItemId = $this->accounting_journal_entries_model->insertEntryItem($entryItem);

                    if(!isset($data['template_name'])) {
                        $account = $this->chart_of_accounts_model->getById($value);
                        if($account->account_id !== "7" && $account->account_id !== "6") {
                            $newBalance = floatval($account->balance) - floatval($data['credits'][$key]);
                            $newBalance = $newBalance + floatval($data['debits'][$key]);
                        } else {
                            $newBalance = floatval($account->balance) + floatval($data['credits'][$key]);
                            $newBalance = $newBalance - floatval($data['debits'][$key]);
                        }

                        $type = floatval($data['debits'][$key]) > 0 && floatval($data['credits'][$key]) < 1 ? 'increase' : 'decrease';

                        $newBalance = number_format($newBalance, 2, '.', ',');

                        $accountData = [
                            'id' => $account->id,
                            'company_id' => logged('company_id'),
                            'balance' => $newBalance
                        ];

                        $this->chart_of_accounts_model->updateBalance($accountData);

                        $accTransacData = [
                            'account_id' => $account->id,
                            'transaction_type' => 'Journal',
                            'transaction_id' => $entryId,
                            'amount' => floatval($data['debits'][$key]) + floatval($data['credits'][$key]),
                            'transaction_date' => date("Y-m-d", strtotime($data['journal_date'])),
                            'type' => $type,
                            'child_id' => $entryItemId
                        ];
    
                        $this->accounting_account_transactions_model->create($accTransacData);
                    }
                }

                // $entryItemsId = $this->accounting_journal_entries_model->insertEntryItems($entryItems);
            }

            $return['data'] = $entryId;
            $return['success'] = $entryId && $entryItemId ? true : false;
            $return['message'] = $entryId && $entryItemId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function bank_deposit($data)
    {
        $this->form_validation->set_rules('bank_account', 'Bank Account', 'required');

        if ($data['cash_back_amount'] !== "" && $data['cash_back_amount'] !== "0.00") {
            $this->form_validation->set_rules('cash_back_account', 'Cash back account', 'required|differs[bank_account]');
        }

        if (isset($data['funds_account']) && isset($data['amount'])) {
            $this->form_validation->set_rules('funds_account[]', 'Account', 'required');
            $this->form_validation->set_rules('amount[]', 'Amount', 'required');
        }

        if (!isset($data['template_name'])) {
            $this->form_validation->set_rules('date', 'Date', 'required');
        } else {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['account']) && !isset($data['amount'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $totalAmount = array_sum(array_map(function ($item) {
                return floatval($item);
            }, $data['amount']));

            $totalAmount = $totalAmount - floatval(str_replace(',', '', $data['cash_back_amount']));

            $insertData = [
                'company_id' => logged('company_id'),
                'account_id' => $data['bank_account'],
                'date' => isset($data['template_name']) ? null : date('Y-m-d', strtotime($data['date'])),
                'total_amount' => floatval(str_replace(',', '', $totalAmount)),
                'cash_back_account_id' => $data['cash_back_account'],
                'cash_back_memo' => $data['cash_back_memo'],
                'cash_back_amount' => $data['cash_back_amount'],
                'memo' => $data['memo'],
                'recurring' => isset($data['template_name']) ? 1 : null,
                'created_by' => logged('id'),
                'status' => 1
            ];

            $depositId = $this->accounting_bank_deposit_model->create($insertData);

            if ($depositId > 0) {
                if (isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'deposit',
                        'txn_id' => $depositId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                } else {
                    $depositToAcc = $this->chart_of_accounts_model->getById($data['bank_account']);
                    $depositData = [
                        'id' => $depositToAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $depositToAcc->balance)) + floatval(str_replace(',', '', $totalAmount))
                    ];
                    $deposit = $this->chart_of_accounts_model->updateBalance($depositData);

                    $accTransacData = [
                        'account_id' => $depositToAcc->id,
                        'transaction_type' => 'Deposit',
                        'transaction_id' => $depositId,
                        'amount' => floatval(str_replace(',', '', $totalAmount)),
                        'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                        'type' => 'increase'
                    ];
    
                    $this->accounting_account_transactions_model->create($accTransacData);

                    if ($data['cash_back_amount'] !== "") {
                        $cashBackAccount = $this->chart_of_accounts_model->getById($data['cash_back_account']);
                        $cashBackData = [
                            'id' => $cashBackAccount->id,
                            'company_id' => logged('company_id'),
                            'balance' => $cashBackAccount->account_id !== "7" ? floatval(str_replace(',', '', $cashBackAccount->balance)) + floatval(str_replace(',', '', $data['cash_back_amount'])) : floatval(str_replace(',', '', $cashBackAccount->balance)) - floatval(str_replace(',', '', $data['cash_back_amount']))
                        ];

                        $cashBack = $this->chart_of_accounts_model->updateBalance($cashBackData);

                        $accTransacData = [
                            'account_id' => $cashBackAccount->id,
                            'transaction_type' => 'Deposit',
                            'transaction_id' => $depositId,
                            'amount' => floatval(str_replace(',', '', $data['cash_back_amount'])),
                            'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                            'type' => 'increase'
                        ];
        
                        $this->accounting_account_transactions_model->create($accTransacData);
                    }
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Deposit',
                            'transaction_id' => $depositId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Deposit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $depositId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                $fundsData = [];
                foreach ($data['funds_account'] as $key => $value) {
                    $receivedFrom = explode('-', $data['received_from'][$key]);

                    // $fundsData[] =[
                    $fundData = [
                        'bank_deposit_id' => $depositId,
                        'received_from_key' => $receivedFrom[0],
                        'received_from_id' => $receivedFrom[1],
                        'received_from_account_id' => $value,
                        'description' => $data['description'][$key],
                        'payment_method' => $data['payment_method'][$key],
                        'ref_no' => $data['reference_no'][$key],
                        'amount' => $data['amount'][$key]
                    ];

                    $fundId = $this->accounting_bank_deposit_model->insert_fund($fundData);

                    if (!isset($data['template_name'])) {
                        $account = $this->chart_of_accounts_model->getById($value);

                        $accountBalance = !in_array($account->account_id, ['6', '7']) ? floatval($account->balance) - floatval($data['amount'][$key]) : floatval($account->balance) + floatval($data['amount'][$key]);
                        $accountBalance = number_format($accountBalance, 2, '.', ',');
                        $accountData = [
                            'id' => $value,
                            'company_id' => logged('company_id'),
                            'balance' => $accountBalance
                        ];
                        $withdraw = $this->chart_of_accounts_model->updateBalance($accountData);

                        $accTransacData = [
                            'account_id' => $account->id,
                            'transaction_type' => 'Deposit',
                            'transaction_id' => $depositId,
                            'amount' => floatval(str_replace(',', '', $data['amount'][$key])),
                            'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                            'type' => 'decrease',
                            'is_category' => 1,
                            'child_id' => $fundId
                        ];
        
                        $this->accounting_account_transactions_model->create($accTransacData);
                    }
                }

                // $fundsId = $this->accounting_bank_deposit_model->insertFunds($fundsData);
            }

            $return['data'] = $depositId;
            $return['success'] = $depositId && $fundId ? true : false;
            $return['message'] = $depositId && $fundId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function revert_inventory_qty_adjustment($data)
    {
        $adjustment = $this->accounting_inventory_qty_adjustments_model->get_by_id($data['transaction_id']);
        $products = $this->accounting_inventory_qty_adjustments_model->get_adjusted_products($adjustment->id);

        $locationData = [];
        foreach ($products as $product) {
            $location = $this->items_model->getItemLocation($product->location_id, $product->product_id);
            $locationData[] = [
                'id' => $product->location_id,
                'qty' => intval($location->qty) - intval($product->change_in_quantity)
            ];
        }

        $adjustQuantity = $this->items_model->updateBatchLocations($locationData);

        $delete = $this->accounting_inventory_qty_adjustments_model->delete_adjustment_products($adjustment->id);

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Inventory Qty Adjust', $adjustment->id);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);
        }

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Inventory Qty Adjust', $adjustment->id);

        return $delete;
    }

    private function inventory_qty_adjustment($data)
    {
        $this->form_validation->set_rules('adjustment_date', 'Date', 'required');
        $this->form_validation->set_rules('reference_no', 'Reference No.', 'required');
        $this->form_validation->set_rules('inventory_adj_account', 'Inventory Adjustment Account', 'required');

        if (isset($data['product']) && isset($data['new_qty']) && isset($data['change_in_qty']) && isset($data['location'])) {
            $this->form_validation->set_rules('product[]', 'Product', 'required');
            $this->form_validation->set_rules('location[]', 'Location', 'required');
            $this->form_validation->set_rules('new_qty[]', 'New Quantity', 'required');
            $this->form_validation->set_rules('change_in_qty[]', 'Change in Quantity', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['product']) && !isset($data['new_qty']) && !isset($data['change_in_qty'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one inventory item.';
        } else {
            $total = 0.00;
            foreach ($data['product'] as $key => $value) {
                $item = $this->items_model->getItemById($value)[0];
                $startingValAdj = $this->starting_value_model->get_by_item_id($value);

                if(!is_null($startingValAdj)) {
                    $total += floatval(str_replace(',', '', $data['change_in_qty'][$key])) * floatval(str_replace(',', '', $startingValAdj->initial_cost));
                } else {
                    $total += floatval(str_replace(',', '', $data['change_in_qty'][$key])) *  floatval(str_replace(',', '', $item->cost));
                }
            }

            if (!isset($data['transaction_id']) || is_null($data['transaction_id'])) {
                $adjustmentData = [
                    'adjustment_no' => $data['reference_no'],
                    'company_id' => logged('company_id'),
                    'adjustment_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                    'inventory_adjustment_account_id' => $data['inventory_adj_account'],
                    'memo' => $data['memo'],
                    'total_amount' => floatval(str_replace(',', '', $total)),
                    'created_by' => logged('id'),
                    'status' => 1
                ];

                $adjustmentId = $this->accounting_inventory_qty_adjustments_model->create($adjustmentData);

                $successMessage = 'Entry Successful!';
            } else {
                $revert = $this->revert_inventory_qty_adjustment($data);

                if ($revert) {
                    $adjustmentData = [
                        'adjustment_no' => $data['reference_no'],
                        'adjustment_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                        'inventory_adjustment_account_id' => $data['inventory_adj_account'],
                        'memo' => $data['memo'],
                        'total_amount' => floatval(str_replace(',', '', $total)),
                        'created_by' => logged('id'),
                        'status' => 1,
                        'updated_at' => date('Y-m-d h:i:s')
                    ];
    
                    $update = $this->accounting_inventory_qty_adjustments_model->update($data['transaction_id'], $adjustmentData);
    
                    if ($update) {
                        $adjustmentId = $data['transaction_id'];
                    }
                }

                $successMessage = 'Update successful.';
            }

            if ($adjustmentId > 0) {
                $adjustmentProducts = [];
                $locationData = [];
                foreach ($data['product'] as $key => $value) {
                    $adjustmentProducts[] = [
                        'adjustment_id' => $adjustmentId,
                        'product_id' => $value,
                        'location_id' => $data['location'][$key],
                        'new_quantity' => $data['new_qty'][$key],
                        'change_in_quantity' => $data['change_in_qty'][$key]
                    ];

                    $locationData[] = [
                        'id' => $data['location'][$key],
                        'qty' => $data['new_qty'][$key]
                    ];

                    $itemAccDetails = $this->items_model->getItemAccountingDetails($value);
                    $startingValAdj = $this->starting_value_model->get_by_item_id($value);
                    $item = $this->items_model->getItemById($value)[0];

                    if(!is_null($startingValAdj)) {
                        $amount = floatval(str_replace(',', '', $data['change_in_qty'][$key])) * floatval(str_replace(',', '', $startingValAdj->initial_cost));
                    } else {
                        $amount = floatval(str_replace(',', '', $data['change_in_qty'][$key])) *  floatval(str_replace(',', '', $item->cost));
                    }

                    $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                    $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + $amount;
                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $invAssetAccData = [
                        'id' => $invAssetAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                    $accTransacData = [
                        'account_id' => $invAssetAcc->id,
                        'transaction_type' => 'Inventory Qty Adjust',
                        'transaction_id' => $adjustmentId,
                        'amount' => $amount,
                        'transaction_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                        'type' => 'increase',
                        'is_item_category' => 1
                    ];
    
                    $this->accounting_account_transactions_model->create($accTransacData);
                }

                $adjustQuantity = $this->items_model->updateBatchLocations($locationData);
                $adjustmentProdId = $this->accounting_inventory_qty_adjustments_model->insertAdjProduct($adjustmentProducts);

                $adjustmentAcc = $this->chart_of_accounts_model->getById($data['inventory_adj_account']);
                $newBalance = floatval(str_replace(',', '', $adjustmentAcc->balance)) - $total;
                $newBalance = number_format($newBalance, 2, '.', ',');

                $adjustmentAccData = [
                    'id' => $adjustmentAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($adjustmentAccData);

                $accTransacData = [
                    'account_id' => $adjustmentAcc->id,
                    'transaction_type' => 'Inventory Qty Adjust',
                    'transaction_id' => $adjustmentId,
                    'amount' => $total,
                    'transaction_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);
            }

            $return['data'] = $adjustmentId;
            $return['success'] = $adjustmentId && $adjustmentProdId && $adjustQuantity > 0 ? true : false;
            $return['message'] = $adjustmentId && $adjustmentProdId && $adjustQuantity > 0 ? $successMessage : 'An unexpected error occured!';
        }

        return $return;
    }

    private function weekly_timesheet($data)
    {
        $this->form_validation->set_rules('person_tracking', 'Person being Tracked', 'required');
        $this->form_validation->set_rules('week_dates', 'Week Dates', 'required');

        if (isset($data['billable'])) {
            $this->form_validation->set_rules('hourly_rate[]', 'Week Dates', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (isset($data['customer']) && count($data['customer']) < 1 || !isset($data['customer'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'You must enter at least one time activity before you can save the timesheet.';
        } else {
            $name = explode('-', $data['person_tracking']);
            $weekDate = explode('-', $data['week_dates']);
            $weekStartDate = strtotime($weekDate[0]);
            $weekEndDate = strtotime($weekDate[1]);
            $timesheetSettings = $this->accounting_timesheet_settings_model->get_by_company_id(logged('company_id'));

            $timesheetRecord = [
                'company_id' => logged('company_id'),
                'name_type' => $name[0],
                'name_id' => $name[1],
                'week_start_date' => date("Y-m-d", $weekStartDate),
                'week_end_date' => date("Y-m-d", $weekEndDate),
                'status' => 1,
                'created_at' => date("Y-m-d H:i:s"),
                'updated_at' => date("Y-m-d H:i:s"),
            ];

            $timeSheetRecordId = $this->accounting_weekly_timesheet_model->create($timesheetRecord);

            if ($timeSheetRecordId > 0) {
                $row = 1;
                foreach ($data['customer'] as $key => $value) {
                    if ($value !== '') {
                        $count = 0;
                        foreach (json_decode($data['hours'][$key], true) as $day => $hours) {
                            if ($hours !== "" && $hours !== "00:00") {
                                $timeActData = [
                                    'company_id' => logged('company_id'),
                                    'date' => date('Y-m-d', strtotime($weekDate[0]." +$count days")),
                                    'name_key' => $name[0],
                                    'name_id' => $name[1],
                                    'customer_id' => $value,
                                    'service_id' => $timesheetSettings->service === "1" ? $data['service'][$key] : null,
                                    'billable' => $timesheetSettings->billable === "1" ? $data['billable'][$key] : 0,
                                    'hourly_rate' => $timesheetSettings->billable === "1" ? floatval(str_replace(',', '', $data['hourly_rate'][$key])) : null,
                                    'taxable' => $timesheetSettings->billable === "1" ? $data['taxable'][$key] : 0,
                                    'time' => $hours,
                                    'description' => $data['description'][$key],
                                    'status' => 1
                                ];
    
                                $timeActivityId = $this->accounting_single_time_activity_model->create($timeActData);
                            }
    
                            $count++;
                        }
    
                        $row++;
                    }
                }

                $return['data'] = $timeSheetRecordId;
                $return['success'] = $timeSheetRecordId ? true : false;
                $return['message'] = $timeSheetRecordId ? 'Entry Successful!' : 'An unexpected error occured!';
            }
        }

        return $return;
    }

    private function payroll($data, $payType = 'all')
    {
        $this->form_validation->set_rules('pay_from_account', 'Pay from account', 'required');
        if ($payType === 'all') {
            $this->form_validation->set_rules('pay_period', 'Pay Period', 'required');
        }
        $this->form_validation->set_rules('pay_date', 'Pay Date', 'required');

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $payPeriod = explode('-', $data['pay_period']);

            $company_id = logged('company_id');
            $payrollNo = $this->accounting_payroll_model->getCompanyLastPayrollNo($company_id);

            $insertData = [
                'payroll_no' => is_null($payrollNo) ? 1 : $payrollNo+1,
                'pay_from_account' => $data['pay_from_account'],
                'pay_period_start' => $data['pay_period'] !== null ? date('Y-m-d', strtotime($payPeriod[0])) : date('Y-m-d', strtotime($data['pay_date'])),
                'pay_period_end' => $data['pay_period'] !== null ? date('Y-m-d', strtotime($payPeriod[1])) : date('Y-m-d', strtotime($data['pay_date'])),
                'pay_date' => date('Y-m-d', strtotime($data['pay_date'])),
                'company_id' => $company_id,
                'pay_schedule_id' => $data['pay_schedule'],
                'payroll_type' => $payType,
                'created_by' => logged('id'),
                'status' => 1
            ];

            $payrollId = $this->accounting_payroll_model->create($insertData);

            $employees = [];

            if ($payrollId > 0) {
                $paychecks = [];
                foreach ($data['employees'] as $key => $value) {
                    $emp = $this->users_model->getUser($value);
                    $empPayDetails = $this->users_model->getEmployeePayDetails($emp->id);
                    $empTotalPay = (floatval(str_replace(',', '', $empPayDetails->pay_rate)) * floatval(str_replace(',', '', $data['reg_pay_hours'][$key]))) + floatval(str_replace(',', '', $data['commission'][$key])) + floatval(str_replace(',', '', $data['bonus'][$key]));
    
                    $empSocial = ($empTotalPay / 100) * 6.2;
                    $empMedicare = ($empTotalPay / 100) * 1.45;
                    $empTax = $empSocial + $empMedicare;
    
                    $employees[] = [
                        'payroll_id' => $payrollId,
                        'employee_id' => $value,
                        'employee_hours' => $data['reg_pay_hours'][$key],
                        'employee_commission' => $data['commission'][$key],
                        'employee_bonus' => $data['bonus'][$key],
                        'employee_total_pay' => floatval(str_replace(',', '', $empTotalPay)),
                        'employee_taxes' => floatval(str_replace(',', '', $empTax)),
                        'employee_net_pay' => floatval(str_replace(',', '', $empTotalPay - $empTax)),
                        'employee_memo' => ($data['memo'][$key] === '') ? null : $data['memo'][$key],
                    ];

                    $paychecks[] = [
                        'company_id' => $company_id,
                        'employee_id' => $value,
                        'pay_date' => date('Y-m-d', strtotime($data['pay_date'])),
                        'net_pay' => floatval(str_replace(',', '', $empTotalPay - $empTax)),
                        'status' => 1
                    ];
                }
            }

            if (count($employees) > 0) {
                $payrollEmpId = $this->accounting_payroll_model->insertPayrollEmployees($employees);
                $insertPaychecks = $this->accounting_paychecks_model->insert_by_batch($paychecks);

                $totalNetPay = array_sum(array_column($employees, 'employee_net_pay'));
                $account = $this->chart_of_accounts_model->getById($data['pay_from_account']);
                $balance = floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $totalNetPay));

                $update = $this->chart_of_accounts_model->updateBalance(['id' => $data['pay_from_account'], 'company_id' => $company_id, 'balance' => $balance]);

                $accTransacData = [
                    'account_id' => $account->id,
                    'transaction_type' => 'Paycheck',
                    'transaction_id' => $payrollId,
                    'amount' => floatval(str_replace(',', '', $totalNetPay)),
                    'transaction_date' => date('Y-m-d', strtotime($data['pay_date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                $return['data'] = $payrollId;
                $return['success'] = $payrollId && $payrollEmpId ? true : false;
                $return['message'] = $payrollId && $payrollEmpId ? 'Entry Successful!' : 'An unexpected error occured!';
            } else {
                $return['data'] = null;
                $return['success'] = false;
                $return['message'] = 'Nothing inserted.';
            }
        }

        return $return;
    }

    private function statement($data)
    {
        $flag = true;

        $this->form_validation->set_rules('statement_type', 'Statement Type', 'required');
        $this->form_validation->set_rules('statement_date', 'Statement Date', 'required');
        $this->form_validation->set_rules('customer_balance_status', 'Customer Balance Status', 'required');
        $this->form_validation->set_rules('email[]', 'Email', 'required');

        if (isset($data['start_date']) && isset($data['end_date'])) {
            $this->form_validation->set_rules('start_date', 'Start Date', 'required');
            $this->form_validation->set_rules('end_date', 'End Date', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $insertData = [
                'statement_type' => $data['statement_type'],
                'statement_date' => date('Y-m-d', strtotime($data['statement_date'])),
                'customer_balance_status' => $data['customer_balance_status'],
                'start_date' => (isset($data['start_date'])) ? date('Y-m-d', strtotime($data['start_date'])) : null,
                'end_date' => (isset($data['end_date'])) ? date('Y-m-d', strtotime($data['end_date'])) : null,
                'company_id' => logged('company_id'),
                'created_by' => logged('id'),
                'status' => 1
            ];

            $statementId = $this->accounting_statements_model->create($insertData);

            if ($statementId > 0) {
                $queryData = [
                    'cust_bal_status' => $data['customer_balance_status'],
                    'company_id' => logged('company_id'),
                    'start_date' => ($data['statement_type'] === '2') ? date('Y-m-d', strtotime(' -1 year')) : date('Y-m-d', strtotime($data['start_date'])),
                    'end_date' => ($data['statement_type'] === '2') ? date('Y-m-d') : date('Y-m-d', strtotime($data['end_date']))
                ];

                if ($data['statement_type'] === '1' || $data['statement_type'] === '2') {
                    $invoices = $this->accounting_invoices_model->getStatementInvoices($queryData);
                } else {
                    $invoices = $this->accounting_invoices_model->getTransactionInvoices($queryData);
                }

                $statementCustomers = [];
                foreach ($data['customer'] as $customer) {
                    $customerInvoices = array_filter($invoices, function ($value, $key) use ($customer) {
                        return $value->customer_id === $customer;
                    }, ARRAY_FILTER_USE_BOTH);

                    $balance = 0.00;
                    foreach ($customerInvoices as $invoice) {
                        if ($invoice->status === '1' || $invoice->status === '2' && $data['statement_type'] === '3' && $data['customer_balance_status'] === 'overdue') {
                            $balance += number_format(floatval(str_replace(',', '', $invoice->amount)), 2, '.', ',');
                        }
                    }

                    $statementCustomers[] = [
                        'statement_id' => $statementId,
                        'customer_id' => $customer,
                        'email' => $data['email'][$customer],
                        'balance' => floatval(str_replace(',', '', $balance))
                    ];
                }

                $statementCustomers = $this->accounting_statements_model->insertCustomers($statementCustomers);

                if (isset($data['subject']) && $statementCustomers > 0 && $data['save_method'] === 'save-and-send') {
                    $this->load->library('pdf');
                    $this->load->library('email');

                    foreach ($data['customer'] as $customer) {
                        $custProfile = $this->AcsProfile_model->getByProfId((int)$customer);
                        
                        $pdfData = new stdClass();
                        $pdfData->statement_type = $data['statement_type'];
                        $pdfData->customers = [$customer];
                        $pdfData->statement_date = $data['statement_date'];
                        $pdfData->start_date = $data['start_date'];
                        $pdfData->end_date = $data['end_date'];

                        $pdfData = $this->generateStatementPdfData($pdfData);
                        $fileName = $custProfile->first_name.'_'.$custProfile->last_name.'_Statement_'.$statementId.'_from_ADI.pdf';

                        $this->pdf->save_pdf("accounting/modals/print_action/statement", ['data' => $pdfData], $fileName, 'portrait');

                        $this->email->clear(true);
                        $this->email->from('nsmartrac@gmail.com');
                        $this->email->to($data['email'][$customer]);
                        $this->email->subject($data['subject']);
                        $this->email->message($data['body']);
                        $this->email->attach(base_url("/assets/pdf/$fileName"));

                        $this->email->send();
                    }
                }
            }

            $return['data'] = $statementId;
            $return['success'] = $statementId && $statementCustomers ? true : false;
            $return['message'] = $statementId && $statementCustomers ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    public function showStatement()
    {
        echo $this->load->view("accounting/modals/print_action/statement", [], true);
        exit;
    }
    
    public function generatePDF()
    {
        $this->load->library('pdf');
        $post = $this->input->post();
        // $post = json_decode('{"received_from":{"0":"Aaron Weston"},"accounts":{"0":"Billable Expense Income"},"description":{"0":"test1"},"payment_method":{"0":"Credit Card"},"reference_no":{"0":"1"},"amount":{"0":"12.00"}}');
        $post = json_decode($post['json']);
        // $fileName = 'deposit-summary-statement-'.logged('id').'.pdf';
        $fileName = $post->title."-".logged('id').'.pdf';
        // $this->pdf->save_pdf('accounting/modals/print_action/summary', ['data' => $post], $fileName, 'portrait');
        $view = '';
        switch ($post->id) {
            case '1':
                # code...
                $view = "accounting/modals/print_action/summary";
                break;
            case '2':
                # code...
                $post = $this->generateStatementPdfData($post);
                $view = "accounting/modals/print_action/statement";
                break;
        }
        $this->pdf->save_pdf($view, ['data' => $post], $fileName, 'portrait');

        $this->page_data['filename'] = $fileName;
        $this->load->view('v2/includes/accounting/modal_forms/show_pdf_modal', $this->page_data);
        // echo json_encode(['filename' => $fileName]);
        // exit;
    }

    private function generateStatementPdfData($post)
    {
        $data = [
            'statement_type' => $post->statement_type,
            'customers' => []
        ];
        foreach ($post->customers as $customer) {
            $items = [];
            $customerProfile = $this->AcsProfile_model->getByProfId((int)$customer);
            $balance = 0.00;
            if ($post->statement_type === "1" || $post->statement_type === 1) {
                $overdueQuery = [
                    'company_id' => logged('company_id'),
                    'customer_id' => (int)$customer,
                    'end_date' => date('Y-m-d', strtotime($post->end_date))
                ];

                $overdueInvoices = $this->accounting_invoices_model->getCustomerOverdueInvoices($overdueQuery);

                $overdueAmount = 0.00;
                foreach ($overdueInvoices as $inv) {
                    $overdueAmount = $overdueAmount + floatval($inv->amount);
                }
                $balance = $balance + floatval($overdueAmount);
                $items[] = [
                    'date' => $post->start_date,
                    'activity' => 'Balance Forward',
                    'amount' => '',
                    'balance' => $overdueAmount
                ];

                $invoiceQuery = [
                    'company_id' => logged('company_id'),
                    'customer_id' => (int)$customer,
                    'start_date' => date('Y-m-d', strtotime($post->start_date)),
                    'end_date' => date('Y-m-d', strtotime($post->end_date))
                ];
    
                $invoices = $this->accounting_invoices_model->getCustomerInvoicesByDate($invoiceQuery);
    
                foreach ($invoices as $invoice) {
                    $balance = $balance + floatval($invoice->amount);
                    $items[] = [
                        'date' => date('m/d/Y', strtotime($invoice->invoice_date)),
                        'activity' => 'Invoice #' . $invoice->id,
                        'amount' => $invoice->amount,
                        'balance' => $balance
                    ];
    
                    if ($invoice->status === 2 || $invoice->status === "2") {
                        $balance = $balance - floatval($invoice->amount);
                        $items[] = [
                            'date' => date('m/d/Y', $invoice->updated_at),
                            'activity' => 'Payment',
                            'amount' => $invoice->amount - ($invoice->amount * 2),
                            'balance' => $balance
                        ];
                    }
                }
            } elseif ($post->statement_type === "2" || $post->statement_type === 2) {
                $invoiceQuery = [
                    'company_id' => logged('company_id'),
                    'customer_id' => (int)$customer,
                    'start_date' => date('Y-m-d', strtotime(' -1 year')),
                    'end_date' => date('Y-m-d')
                ];

                $invoices = $this->accounting_invoices_model->getCustomerOpenInvoices($invoiceQuery);

                foreach ($invoices as $invoice) {
                    $items[] = [
                        'date' => date('m/d/Y', strtotime($invoice->invoice_date)),
                        'activity' => 'Invoice #'.$invoice->id.': Due '.date('m/d/Y', strtotime($invoice->due_date)),
                        'amount' => $invoice->amount,
                        'balance' => $invoice->amount
                    ];
                }
            } elseif ($post->statement_type === "3" || $post->statement_type === 3) {
                $invoiceQuery = [
                    'cust_bal_status' => $post->cust_bal_status,
                    'company_id' => logged('company_id'),
                    'customer_id' => (int)$customer,
                    'start_date' => date('Y-m-d', strtotime($post->start_date)),
                    'end_date' => date('Y-m-d', strtotime($post->end_date))
                ];

                $invoices = $this->accounting_invoices_model->getCustomerTransactions($invoiceQuery);

                foreach ($invoices as $invoice) {
                    $items[] = [
                        'date' => date('m/d/Y', strtotime($invoice->invoice_date)),
                        'activity' => 'Invoice #'.$invoice->id.': '.$invoice->message_on_statement,
                        'amount' => $invoice->amount,
                        'balance' => ($invoice->status === 2 || $invoice->status === "2") ? $invoice->amount : 0.00
                    ];
                }
            }

            if ($post->statement_type === "1" || $post->statement_type === 1) {
                $totalDue = end($items)['balance'];
            } else {
                $totalDue = array_sum(array_map(function ($item) {
                    return $item['balance'];
                }, $items));
            }

            $data['customers'][$customer] = [
                'name' => $customerProfile->first_name . ' ' . $customerProfile->last_name,
                'date' => $post->statement_date,
                'total_due' => $totalDue,
                'items' => $items
            ];
        }

        return $data;
    }

    public function showPDF()
    {
        // Store the file name into variable
        $file = $this->input->get('pdf');
        $filename = base_url("/assets/pdf/$file");
        
        // Header content type
        header("Content-type: application/pdf");
        
        // header("Content-Length: " . filesize($filename));
        
        // Send the file to the browser.
        @readfile($filename);
        exit;
    }

    public function downloadPDF()
    {
        $filename = $this->input->get('filename');
        $file = base_url("/assets/pdf/$filename");

        header('Content-Description: File Transfer');
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename="'.basename($file).'"');
        header('Expires: 0');
        header('Cache-Control: must-revalidate');
        header('Pragma: public');
        header('Content-Length: ' . filesize($file));
        readfile($file);
    }

    public function showEmailModal()
    {
        $this->load->library('pdf');
        $post = $this->input->post();
        $post = json_decode($post['json']);

        if (count($post->customers) === 1) {
            $customer = $this->AcsProfile_model->getByProfId((int)$post->customers[0]);
            $this->page_data['email'] = $customer->email;
            $this->page_data['customer_name'] = $customer->first_name . ' ' . $customer->last_name;
        } else {
            $this->page_data['customer_count'] = count($post->customers);
        }

        $this->page_data['company_name'] = 'ADI';
        $filename = 'statement-summary-'.logged('id').'.pdf';
        $this->page_data['filename'] = $filename;

        $post = $this->generateStatementPdfData($post);

        $this->pdf->save_pdf("accounting/modals/print_action/statement", ['data' => $post], $filename, 'portrait');

        $this->load->view("accounting/modals/send_statement_modal", $this->page_data);
    }

    private function expense($data)
    {
        $this->form_validation->set_rules('expense_payment_account', 'Payment account', 'required');

        if (isset($data['expense_account'])) {
            $this->form_validation->set_rules('expense_account[]', 'Expense name', 'required');
            $this->form_validation->set_rules('category_amount[]', 'Category amount', 'required');
        }

        if (isset($data['item'])) {
            $this->form_validation->set_rules('item[]', 'Item', 'required');
            $this->form_validation->set_rules('quantity[]', 'Item quantity', 'required');
            $this->form_validation->set_rules('item_amount[]', 'Item quantity', 'required');
        }

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('payment_date', 'Payment date', 'required');
        }

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['expense_account']) && !isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $payee = explode('-', $data['payee']);

            $expenseData = [
                'company_id' => logged('company_id'),
                'payee_type' => $payee[0],
                'payee_id' => $payee[1],
                'payment_account_id' => $data['expense_payment_account'],
                'payment_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['payment_date'])) : null,
                'payment_method_id' => $data['payment_method'],
                'ref_no' => !isset($data['template_name']) || $data['ref_no'] === '' ? null : $data['ref_no'],
                'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
                'memo' => $data['memo'],
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];

            $expenseId = $this->expenses_model->addExpense($expenseData);

            if ($expenseId) {
                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Expense',
                            'transaction_id' => $expenseId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Expense',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $expenseId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(!isset($data['template_name'])) {
                    // payment account
                    $paymentAcc = $this->chart_of_accounts_model->getById($data['expense_payment_account']);
                    $paymentAccType = $this->account_model->getById($paymentAcc->account_id);

                    if ($paymentAccType->account_name === 'Credit Card') {
                        $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));
                    } else {
                        $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $paymentAccData = [
                        'id' => $paymentAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($paymentAccData);

                    if(!is_null($data['linked_transaction'])) {
                        $linkedTransacsData = [];
                        foreach($data['linked_transaction'] as $linkedTransac) {
                            $explode = explode('-', $linkedTransac);

                            $linkedTransacsData[] = [
                                'linked_to_type' => 'expense',
                                'linked_to_id' => $expenseId,
                                'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                                'linked_transaction_id' => $explode[1]
                            ];
                        }

                        $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
                    }

                    $accTransacData = [
                        'account_id' => $paymentAcc->id,
                        'transaction_type' => 'Expense',
                        'transaction_id' => $expenseId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                        'type' => 'decrease'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                } else {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'expense',
                        'txn_id' => $expenseId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                if (isset($data['expense_account'])) {
                    $categoryDetails = [];
                    foreach ($data['expense_account'] as $index => $value) {
                        $linkedTransacCat = $data['category_linked'][$index] !== '' ? explode('-', $data['category_linked'][$index]) : null;

                        // $categoryDetails[] = [
                        $categoryDetail = [
                            'transaction_type' => 'Expense',
                            'transaction_id' => $expenseId,
                            'expense_account_id' => $value,
                            'category' => $data['category'][$index],
                            'description' => $data['description'][$index],
                            'amount' => $data['category_amount'][$index],
                            'billable' => $data['category_billable'][$index],
                            'markup_percentage' => $data['category_markup'][$index],
                            'tax' => $data['category_tax'][$index],
                            'customer_id' => $data['category_customer'][$index],
                            'linked_transaction_type' => !is_null($linkedTransacCat) ? $linkedTransacCat[0] : null,
                            'linked_transaction_id' => !is_null($linkedTransacCat) ? $linkedTransacCat[1] : null,
                            'linked_transaction_category_id' => !is_null($linkedTransacCat) ? $data['transac_category_id'][$index] : null
                        ];

                        $categoryDetailId = $this->expenses_model->insert_vendor_transaction_category($categoryDetail);

                        if(!isset($data['template_name'])) {
                            $expenseAcc = $this->chart_of_accounts_model->getById($value);
                            $expenseAccType = $this->account_model->getById($expenseAcc->account_id);

                            if ($expenseAccType->account_name === 'Credit Card') {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                            } else {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                            }
                            $newBalance = number_format($newBalance, 2, '.', ',');

                            $expenseAccData = [
                                'id' => $expenseAcc->id,
                                'company_id' => logged('company_id'),
                                'balance' => floatval(str_replace(',', '', $newBalance))
                            ];

                            $this->chart_of_accounts_model->updateBalance($expenseAccData);

                            if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '') {
                                $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($data['transac_category_id'][$index]);

                                $received = floatval($linkedCat->received) + floatval($data['category_amount'][$index]);

                                $categoryDetail = [
                                    'received' => floatval(str_replace(',', '', $received))
                                ];

                                $this->vendors_model->update_transaction_category_details($data['transac_category_id'][$index], $categoryDetail);

                                $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacCat[1], logged('company_id'));
                                $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval($data['category_amount'][$index]);

                                $purchOrderData = [
                                    'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                                    'status' => $remainingBal > 0 ? 1 : 2
                                ];

                                $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                            }

                            $accTransacData = [
                                'account_id' => $expenseAcc->id,
                                'transaction_type' => 'Expense',
                                'transaction_id' => $expenseId,
                                'amount' => floatval($data['category_amount'][$index]),
                                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                'type' => 'increase',
                                'is_category' => 1,
                                'child_id' => $categoryDetailId
                            ];

                            $this->accounting_account_transactions_model->create($accTransacData);
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_categories($categoryDetails);
                }
    
                if (isset($data['item'])) {
                    $itemDetails = [];
                    foreach ($data['item'] as $index => $value) {
                        $item = $this->items_model->getByID($value);
                        $linkedTransacItem = $data['item_linked'][$index] !== '' ? explode('-', $data['item_linked'][$index]) : null;

                        // $itemDetails[] = [
                        $itemDetail = [
                            'transaction_type' => 'Expense',
                            'transaction_id' => $expenseId,
                            'item_id' => $value,
                            'location_id' => $data['location'][$index],
                            'quantity' => $data['quantity'][$index],
                            'rate' => $data['item_amount'][$index],
                            'discount' => $data['discount'][$index],
                            'tax' => $data['item_tax'][$index],
                            'total' => floatval(str_replace(',', '', $data['item_total'][$index])),
                            'linked_transaction_type' => !is_null($linkedTransacItem) ? $linkedTransacItem[0] : null,
                            'linked_transaction_id' => !is_null($linkedTransacItem) ? $linkedTransacItem[1] : null,
                            'linked_transaction_item_id' => !is_null($linkedTransacItem) ? $data['transac_item_id'][$index] : null
                        ];

                        $itemDetailId = $this->expenses_model->insert_vendor_transaction_item($itemDetail);

                        if(!isset($data['template_name'])) {
                            if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                $location = $this->items_model->getItemLocation($data['location'][$index], $value);
    
                                $newQty = intval($location->qty) + intval($data['quantity'][$index]);
            
                                $this->items_model->updateLocationQty($data['location'][$index], $value, $newQty);
                            }

                            $itemAccDetails = $this->items_model->getItemAccountingDetails($value);

                            if ($itemAccDetails) {
                                if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $accType = $this->account_model->getById($account->account_id);
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval($data['item_total'][$index]);
                                    $newBalance = number_format($newBalance, 2, '.', ',');
                                } else {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->expense_account_id);
                                    $accType = $this->account_model->getById($account->account_id);

                                    if ($accType->account_name === 'Credit Card') {
                                        $newBalance = floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $data['item_total'][$index]));
                                    } else {
                                        $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $data['item_total'][$index]));
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');
                                }

                                $accountData = [
                                    'id' => $account->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];

                                $this->chart_of_accounts_model->updateBalance($accountData);

                                $accTransacData = [
                                    'account_id' => $account->id,
                                    'transaction_type' => 'Expense',
                                    'transaction_id' => $expenseId,
                                    'amount' => floatval($data['item_total'][$index]),
                                    'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                    'type' => 'increase',
                                    'is_item_category' => 1,
                                    'child_id' => $itemDetailId
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            }

                            if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '') {
                                $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($data['transac_item_id'][$index]);
    
                                $received = floatval(str_replace(',', '', $linkedItem->received)) + floatval($data['item_total'][$index]);
    
                                $itemDetail = [
                                    'received' => floatval(str_replace(',', '', $received))
                                ];
    
                                $this->vendors_model->update_transaction_item($data['transac_item_id'][$index], $itemDetail);

                                $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacItem[1], logged('company_id'));
                                $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval($data['item_total'][$index]);

                                $purchOrderData = [
                                    'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                                    'status' => $remainingBal > 0 ? 1 : 2
                                ];

                                $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                            }
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_items($itemDetails);
                }
            }
    
            $return['data'] = $expenseId;
            $return['success'] = $expenseId ? true : false;
            $return['message'] = $expenseId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function check($data)
    {
        $this->form_validation->set_rules('bank_account', 'Bank account', 'required');

        if (isset($data['expense_account'])) {
            $this->form_validation->set_rules('expense_account[]', 'Expense name', 'required');
            $this->form_validation->set_rules('category_amount[]', 'Category amount', 'required');
        }

        if (isset($data['item'])) {
            $this->form_validation->set_rules('item[]', 'Item', 'required');
            $this->form_validation->set_rules('quantity[]', 'Item quantity', 'required');
            $this->form_validation->set_rules('item_amount[]', 'Item quantity', 'required');
        }

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('payment_date', 'Payment date', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['expense_account']) && !isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $payee = explode('-', $data['payee']);

            $checkData = [
                'company_id' => logged('company_id'),
                'payee_type' => $payee[0],
                'payee_id' => $payee[1],
                'bank_account_id' => $data['bank_account'],
                'mailing_address' => nl2br($data['mailing_address']),
                'payment_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['payment_date'])) : null,
                'check_no' => isset($data['print_later']) ? null : ($data['check_no'] === '' ? null : $data['check_no']),
                'to_print' => $data['print_later'],
                'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
                'memo' => $data['save_method'] !== 'save-and-void' ? $data['memo'] : 'Voided',
                'total_amount' => $data['save_method'] !== 'save-and-void' ? floatval(str_replace(',', '', $data['total_amount'])) : 0.00,
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => $data['save_method'] !== 'save-and-void' ? 1 : 4
            ];

            $checkId = $this->expenses_model->addCheck($checkData);
    
            if ($checkId) {
                if(!isset($data['template_name'])) {
                    $bankAcc = $this->chart_of_accounts_model->getById($data['bank_account']);
                    $newBalance = floatval(str_replace(',', '', $bankAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $bankAccData = [
                        'id' => $bankAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($bankAccData);

                    if (!isset($data['print_later']) && $data['check_no'] !== '') {
                        $assignCheck = [
                            'check_no' => $checkData['check_no'],
                            'transaction_type' => 'check',
                            'transaction_id' => $checkId,
                            'payment_account_id' => $checkData['bank_account_id']
                        ];
    
                        $this->accounting_assigned_checks_model->assign_check_no($assignCheck);
                    }

                    if(!is_null($data['linked_transaction'])) {
                        $linkedTransacsData = [];
                        foreach($data['linked_transaction'] as $linkedTransac) {
                            $explode = explode('-', $linkedTransac);

                            $linkedTransacsData[] = [
                                'linked_to_type' => 'check',
                                'linked_to_id' => $checkId,
                                'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                                'linked_transaction_id' => $explode[1]
                            ];
                        }

                        $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
                    }

                    $accTransacData = [
                        'account_id' => $bankAcc->id,
                        'transaction_type' => 'Check',
                        'transaction_id' => $checkId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                        'type' => 'decrease',
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                } else {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'check',
                        'txn_id' => $checkId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Check',
                            'transaction_id' => $checkId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Check',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $checkId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if (isset($data['expense_account'])) {
                    $categoryDetails = [];
                    foreach ($data['expense_account'] as $index => $value) {
                        $linkedTransacCat = $data['category_linked'][$index] !== '' ? explode('-', $data['category_linked'][$index]) : null;

                        // $categoryDetails[] = [
                        $categoryDetail = [
                            'transaction_type' => 'Check',
                            'transaction_id' => $checkId,
                            'expense_account_id' => $value,
                            'category' => $data['category'][$index],
                            'description' => $data['description'][$index],
                            'amount' => $data['category_amount'][$index],
                            'billable' => $data['category_billable'][$index],
                            'markup_percentage' => $data['category_markup'][$index],
                            'tax' => $data['category_tax'][$index],
                            'customer_id' => $data['category_customer'][$index],
                            'linked_transaction_type' => !is_null($linkedTransacCat) ? $linkedTransacCat[0] : null,
                            'linked_transaction_id' => !is_null($linkedTransacCat) ? $linkedTransacCat[1] : null,
                            'linked_transaction_category_id' => !is_null($linkedTransacCat) ? $data['transac_category_id'][$index] : null
                        ];

                        $categoryDetailId = $this->expenses_model->insert_vendor_transaction_category($categoryDetail);

                        if(!isset($data['template_name']) && $data['save_method'] !== 'save-and-void') {
                            $expenseAcc = $this->chart_of_accounts_model->getById($value);
                            $expenseAccType = $this->account_model->getById($expenseAcc->account_id);

                            if ($expenseAccType->account_name === 'Credit Card') {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                            } else {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                            }
                            $newBalance = number_format($newBalance, 2, '.', ',');

                            $expenseAccData = [
                                'id' => $expenseAcc->id,
                                'company_id' => logged('company_id'),
                                'balance' => floatval(str_replace(',', '', $newBalance))
                            ];

                            $this->chart_of_accounts_model->updateBalance($expenseAccData);

                            if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '') {
                                $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($data['transac_category_id'][$index]);

                                $received = floatval($linkedCat->received) + floatval($data['category_amount'][$index]);

                                $categoryDetail = [
                                    'received' => floatval(str_replace(',', '', $received))
                                ];

                                $this->vendors_model->update_transaction_category_details($data['transac_category_id'][$index], $categoryDetail);

                                $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacCat[1], logged('company_id'));
                                $remainingBal = floatvafloatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval($data['category_amount'][$index]);

                                $purchOrderData = [
                                    'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                                    'status' => $remainingBal > 0 ? 1 : 2
                                ];

                                $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                            }

                            $accTransacData = [
                                'account_id' => $expenseAcc->id,
                                'transaction_type' => 'Check',
                                'transaction_id' => $checkId,
                                'amount' => floatval($data['category_amount'][$index]),
                                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                'type' => 'increase',
                                'is_category' => 1,
                                'child_id' => $categoryDetailId
                            ];

                            $this->accounting_account_transactions_model->create($accTransacData);
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_categories($categoryDetails);
                }
    
                if (isset($data['item'])) {
                    $itemDetails = [];
                    foreach ($data['item'] as $index => $value) {
                        $item = $this->items_model->getByID($value);
                        $linkedTransacItem = $data['item_linked'][$index] !== '' ? explode('-', $data['item_linked'][$index]) : null;

                        // $itemDetails[] = [
                        $itemDetail = [
                            'transaction_type' => 'Check',
                            'transaction_id' => $checkId,
                            'item_id' => $value,
                            'location_id' => $data['location'][$index],
                            'quantity' => $data['quantity'][$index],
                            'rate' => $data['item_amount'][$index],
                            'discount' => $data['discount'][$index],
                            'tax' => $data['item_tax'][$index],
                            'total' => floatval(str_replace(',', '', $data['item_total'][$index])),
                            'linked_transaction_type' => !is_null($linkedTransacItem) ? $linkedTransacItem[0] : null,
                            'linked_transaction_id' => !is_null($linkedTransacItem) ? $linkedTransacItem[1] : null,
                            'linked_transaction_item_id' => !is_null($linkedTransacItem) ? $data['transac_item_id'][$index] : null
                        ];

                        $itemDetailId = $this->expenses_model->insert_vendor_transaction_item($itemDetail);

                        if(!isset($data['template_name'])) {
                            if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                $location = $this->items_model->getItemLocation($data['location'][$index], $value);

                                $newQty = intval($location->qty) + intval($data['quantity'][$index]);

                                $this->items_model->updateLocationQty($data['location'][$index], $value, $newQty);
                            }

                            $itemAccDetails = $this->items_model->getItemAccountingDetails($value);

                            if ($itemAccDetails) {
                                if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $accType = $this->account_model->getById($account->account_id);
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval($data['item_total'][$index]);
                                    $newBalance = number_format($newBalance, 2, '.', ',');
                                } else {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->expense_account_id);
                                    $accType = $this->account_model->getById($account->account_id);

                                    if ($accType->account_name === 'Credit Card') {
                                        $newBalance = floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $data['item_total'][$index]));
                                    } else {
                                        $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $data['item_total'][$index]));
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');
                                }

                                $accountData = [
                                    'id' => $account->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];

                                $this->chart_of_accounts_model->updateBalance($accountData);

                                $accTransacData = [
                                    'account_id' => $account->id,
                                    'transaction_type' => 'Check',
                                    'transaction_id' => $checkId,
                                    'amount' => floatval(str_replace(',', '', $data['item_total'][$index])),
                                    'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                    'type' => 'increase',
                                    'is_item_category' => 1,
                                    'child_id' => $itemDetailId
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            }

                            if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '') {
                                $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($data['transac_item_id'][$index]);
    
                                $received = floatval(str_replace(',', '', $linkedItem->received)) + floatval($data['item_total'][$index]);
    
                                $itemDetail = [
                                    'received' => floatval(str_replace(',', '', $received))
                                ];
    
                                $this->vendors_model->update_transaction_item($data['transac_item_id'][$index], $itemDetail);

                                $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacItem[1], logged('company_id'));
                                $remainingBal = floatval($purchOrder->remaining_balance) - floatval($data['item_total'][$index]);

                                $purchOrderData = [
                                    'remaining_balance' => $remainingBal,
                                    'status' => $remainingBal > 0 ? 1 : 2
                                ];

                                $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                            }
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_items($itemDetails);
                }
            }

            $return['data'] = $checkId;
            $return['success'] = $checkId ? true : false;
            $return['message'] = $checkId ? 'Entry Successful!' : 'An unexpected error occured!';
        }


        return $return;
    }

    private function bill($data)
    {
        $this->form_validation->set_rules('vendor', 'Vendor', 'required');

        if (isset($data['expense_account'])) {
            $this->form_validation->set_rules('expense_account[]', 'Expense name', 'required');
            $this->form_validation->set_rules('category_amount[]', 'Category amount', 'required');
        }

        if (isset($data['item'])) {
            $this->form_validation->set_rules('item[]', 'Item', 'required');
            $this->form_validation->set_rules('quantity[]', 'Item quantity', 'required');
            $this->form_validation->set_rules('item_amount[]', 'Item quantity', 'required');
        }

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('bill_date', 'Bill date', 'required');
            $this->form_validation->set_rules('due_date', 'Due date', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['expense_account']) && !isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $billData = [
                'company_id' => logged('company_id'),
                'vendor_id' => $data['vendor'],
                'mailing_address' => nl2br($data['mailing_address']),
                'term_id' => $data['term'],
                'bill_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['bill_date'])) : null,
                'due_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['due_date'])) : null,
                'bill_no' => !isset($data['template_name']) && $data['bill_no'] !== "" ? $data['bill_no'] : null,
                'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
                'memo' => $data['memo'],
                'remaining_balance' => floatval($data['total_amount']) < 0 ? 0.00 : $data['total_amount'],
                'added_credits' => floatval($data['total_amount']) < 0 ? floatval(str_replace('-', '', $data['total_amount'])) : 0.00,
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];
    
            $billId = $this->expenses_model->addBill($billData);

            if ($billId) {
                if(!isset($data['template_name'])) {
                    // if(floatval($data['total_amount']) < 0) {
                    //     $vendor = $this->vendors_model->get_vendor_by_id($data['vendor']);
        
                    //     $vendorCredits = floatval(str_replace(',', '', $vendor->vendor_credits)) - floatval(str_replace(',', '', $data['total_amount']));
                    //     $vendorData = [
                    //         'vendor_credits' => floatval(str_replace(',', '', $vendorCredits))
                    //     ];
        
                    //     $this->vendors_model->updateVendor($data['vendor'], $vendorData);
                    // }

                    if(!is_null($data['linked_transaction'])) {
                        $linkedTransacsData = [];
                        foreach($data['linked_transaction'] as $linkedTransac) {
                            $explode = explode('-', $linkedTransac);

                            $linkedTransacsData[] = [
                                'linked_to_type' => 'bill',
                                'linked_to_id' => $billId,
                                'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                                'linked_transaction_id' => $explode[1]
                            ];
                        }

                        $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
                    }

                    $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
                    $newBalance = floatval(str_replace(',', '', $apAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));

                    $apAccData = [
                        'id' => $apAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($apAccData);

                    $accTransacData = [
                        'account_id' => $apAcc->id,
                        'transaction_type' => 'Bill',
                        'transaction_id' => $billId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['bill_date'])),
                        'type' => 'increase'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                } else {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'bill',
                        'txn_id' => $billId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Bill',
                            'transaction_id' => $billId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Bill',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $billId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if (isset($data['expense_account'])) {
                    $categoryDetails = [];
                    foreach ($data['expense_account'] as $index => $value) {
                        $linkedTransacCat = $data['category_linked'][$index] !== '' ? explode('-', $data['category_linked'][$index]) : null;

                        // $categoryDetails[] = [
                        $categoryDetail = [
                            'transaction_type' => 'Bill',
                            'transaction_id' => $billId,
                            'expense_account_id' => $value,
                            'category' => $data['category'][$index],
                            'description' => $data['description'][$index],
                            'amount' => $data['category_amount'][$index],
                            'billable' => $data['category_billable'][$index],
                            'markup_percentage' => $data['category_markup'][$index],
                            'tax' => $data['category_tax'][$index],
                            'customer_id' => $data['category_customer'][$index],
                            'linked_transaction_type' => !is_null($linkedTransacCat) ? $linkedTransacCat[0] : null,
                            'linked_transaction_id' => !is_null($linkedTransacCat) ? $linkedTransacCat[1] : null,
                            'linked_transaction_category_id' => !is_null($linkedTransacCat) ? $data['transac_category_id'][$index] : null
                        ];

                        $categoryDetailId = $this->expenses_model->insert_vendor_transaction_category($categoryDetail);

                        if(!isset($data['template_name'])) {
                            $expenseAcc = $this->chart_of_accounts_model->getById($value);
                            $expenseAccType = $this->account_model->getById($expenseAcc->account_id);

                            if ($expenseAccType->account_name === 'Credit Card') {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                            } else {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                            }
                            $newBalance = number_format($newBalance, 2, '.', ',');

                            $expenseAccData = [
                                'id' => $expenseAcc->id,
                                'company_id' => logged('company_id'),
                                'balance' => floatval(str_replace(',', '', $newBalance))
                            ];

                            $this->chart_of_accounts_model->updateBalance($expenseAccData);

                            if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '') {
                                $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($data['transac_category_id'][$index]);

                                $received = floatval(str_replace(',', '', $linkedCat->received)) + floatval($data['category_amount'][$index]);

                                $categoryDetail = [
                                    'received' => floatval(str_replace(',', '', $received))
                                ];

                                $this->vendors_model->update_transaction_category_details($data['transac_category_id'][$index], $categoryDetail);

                                $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacCat[1], logged('company_id'));
                                $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval($data['category_amount'][$index]);

                                $purchOrderData = [
                                    'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                                    'status' => $remainingBal > 0 ? 1 : 2
                                ];

                                $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                            }

                            $accTransacData = [
                                'account_id' => $expenseAcc->id,
                                'transaction_type' => 'Bill',
                                'transaction_id' => $billId,
                                'amount' => floatval($data['category_amount'][$index]),
                                'transaction_date' => date("Y-m-d", strtotime($data['bill_date'])),
                                'type' => 'increase',
                                'is_category' => 1,
                                'child_id' => $categoryDetailId
                            ];

                            $this->accounting_account_transactions_model->create($accTransacData);
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_categories($categoryDetails);
                }
    
                if (isset($data['item'])) {
                    $itemDetails = [];
                    foreach ($data['item'] as $index => $value) {
                        $item = $this->items_model->getByID($value);
                        $linkedTransacItem = $data['item_linked'][$index] !== '' ? explode('-', $data['item_linked'][$index]) : null;

                        // $itemDetails[] = [
                        $itemDetail = [
                            'transaction_type' => 'Bill',
                            'transaction_id' => $billId,
                            'item_id' => $value,
                            'location_id' => $data['location'][$index],
                            'quantity' => $data['quantity'][$index],
                            'rate' => $data['item_amount'][$index],
                            'discount' => $data['discount'][$index],
                            'tax' => $data['item_tax'][$index],
                            'total' => floatval(str_replace(',', '', $data['item_total'][$index])),
                            'linked_transaction_type' => !is_null($linkedTransacItem) ? $linkedTransacItem[0] : null,
                            'linked_transaction_id' => !is_null($linkedTransacItem) ? $linkedTransacItem[1] : null,
                            'linked_transaction_item_id' => !is_null($linkedTransacItem) ? $data['transac_item_id'][$index] : null
                        ];

                        $itemDetailId = $this->expenses_model->insert_vendor_transaction_item($itemDetail);

                        if(!isset($data['template_name'])) {
                            if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                $location = $this->items_model->getItemLocation($data['location'][$index], $value);

                                $newQty = intval($location->qty) + intval($data['quantity'][$index]);
    
                                $this->items_model->updateLocationQty($data['location'][$index], $value, $newQty);
                            }

                            $itemAccDetails = $this->items_model->getItemAccountingDetails($value);

                            if ($itemAccDetails) {
                                if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $accType = $this->account_model->getById($account->account_id);
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $data['item_total'][$index]));
                                    $newBalance = number_format($newBalance, 2, '.', ',');
                                } else {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->expense_account_id);
                                    $accType = $this->account_model->getById($account->account_id);

                                    if ($accType->account_name === 'Credit Card') {
                                        $newBalance = floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $data['item_total'][$index]));
                                    } else {
                                        $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $data['item_total'][$index]));
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');
                                }

                                $accountData = [
                                    'id' => $account->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];

                                $this->chart_of_accounts_model->updateBalance($accountData);

                                $accTransacData = [
                                    'account_id' => $account->id,
                                    'transaction_type' => 'Bill',
                                    'transaction_id' => $billId,
                                    'amount' => floatval(str_replace(',', '', $data['item_total'][$index])),
                                    'transaction_date' => date("Y-m-d", strtotime($data['bill_date'])),
                                    'type' => 'increase',
                                    'is_item_category' => 1,
                                    'child_id' => $itemDetailId
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            }

                            if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '') {
                                $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($data['transac_item_id'][$index]);
    
                                $received = floatval(str_replace(',', '', $linkedItem->received)) + floatval(str_replace(',', '', $data['item_total'][$index]));
    
                                $itemDetail = [
                                    'received' => floatval(str_replace(',', '', $received))
                                ];
    
                                $this->vendors_model->update_transaction_item($data['transac_item_id'][$index], $itemDetail);

                                $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacItem[1], logged('company_id'));
                                $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval(str_replace(',', '', $data['item_total'][$index]));

                                $purchOrderData = [
                                    'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                                    'status' => $remainingBal > 0 ? 1 : 2
                                ];

                                $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                            }
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_items($itemDetails);
                }
            }

            $return['data'] = $billId;
            $return['success'] = $billId ? true : false;
            $return['message'] = $billId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    public function get_payable_bills()
    {
        $post = $this->input->post();

        $filters = [];

        if ($post['vendor'] !== 'all') {
            $filters['vendor_id'] = $post['vendor'];
        }

        if ($post['from'] !== '') {
            $filters['start_date'] = date("Y-m-d", strtotime($post['from']));
        }

        if ($post['to'] !== '') {
            $filters['end_date'] = date("Y-m-d", strtotime($post['to']));
        }

        if($post['due_date'] === 'last-365-days') {
            $filters['start_date'] = date("Y-m-d", strtotime(date("m/d/Y")." -365 days"));
        }

        $bills = $this->expenses_model->get_open_bills($filters);

        $data = [];
        foreach ($bills as $bill) {
            $vendor = $this->vendors_model->get_vendor_by_id($bill->vendor_id);

            $data[] = [
                'id' => $bill->id,
                'payee_id' => $bill->vendor_id,
                'payee' => $vendor->display_name,
                'ref_no' => $bill->bill_no !== null && $bill->bill_no !== "" ? $bill->bill_no : "",
                'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                'open_balance' => number_format($bill->remaining_balance, 2, '.', ','),
                'vendor_credits' => number_format(floatval(str_replace(',', '', $vendor->vendor_credits)), 2, '.', ',')
            ];
        }

        if ($post['overdue'] === 'true') {
            $data = array_filter($data, function ($v, $k) {
                return strtotime(date("Y-m-d")) > strtotime($v['due_date']);
            }, ARRAY_FILTER_USE_BOTH);
        }

        usort($data, function ($a, $b) use ($order, $columnName) {
            return strtotime($a[$columnName]) > strtotime($b[$columnname]);
        });

        echo json_encode($data);
    }

    private function pay_bills($data)
    {
        $this->form_validation->set_rules('payment_account', 'Payment account', 'required');
        $this->form_validation->set_rules('payment_date', 'Payment date', 'required');
        $this->form_validation->set_rules('bills[]', 'Bill', 'required');

        if (isset($data['bills'])) {
            $this->form_validation->set_rules('payment_amount[]', 'Payment amount', 'required');
        }

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['bills']) && is_null($data['bills'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please select at least one bill to pay.';
        } else {
            $payees = array_unique($data['payee']);

            $startingCheckNo = $data['starting_check_no'] === "" ? null : intval($data['starting_check_no']);
            foreach ($payees as $payee) {
                $paymentTotal = 0.00;
                $itemKeys = array_keys($data['payee'], $payee);
                $vendor = $this->vendors_model->get_vendor_by_id($payee);
                $openVCredits = $this->expenses_model->get_vendor_unapplied_vendor_credits($payee);
                $paymentCredits = $this->expenses_model->get_payment_with_credits_by_vendor($vendor->id);
                $appliedCredits = [];
                $linkedTransacsData = [];

                $newVCredit = floatval($vendor->vendor_credits);

                $paymentCredit = 0.00;
                foreach ($itemKeys as $key) {
                    $bill = $this->vendors_model->get_bill_by_id($data['bills'][$key], logged('company_id'));
                    $paymentTotal += floatval(str_replace(',', '', $data['payment_amount'][$key]));

                    if (!is_null($vendor->vendor_credits) && floatval($vendor->vendor_credits) > 0) {
                        if(floatval(str_replace(',', '', $data['credit_applied'][$key])) > 0) {
                            $creditPercentage = number_format(floatval(str_replace(',', '', $data['credit_applied'][$key])) / floatval(str_replace(',', '', $vendor->vendor_credits)) * 100, 2, '.', ',');

                            $rounding = PHP_ROUND_HALF_DOWN;
                            foreach ($openVCredits as $vCredit) {
                                $balance = floatval(str_replace(',', '', $vCredit->remaining_balance));
                                $expression = floatval(str_replace(',', '', $balance)) / 100 * $creditPercentage;
                                $subtracted = round($expression, 2, $rounding);
                                $subtracted = number_format($expression, 2, '.', ',');
    
                                if($rounding === PHP_ROUND_HALF_DOWN) {
                                    $rounding = PHP_ROUND_HALF_UP;
                                } else {
                                    $rounding = PHP_ROUND_HALF_DOWN;
                                }
    
                                $appliedVCredits = array_filter($appliedCredits, function($value, $key) use($vCredit) {
                                    return $value['credit-type'] === 'vendor-credit' && $value['id'] === $vCredit->id;
                                }, ARRAY_FILTER_USE_BOTH);

                                if(count($appliedVCredits) > 0) {
                                    $indexKey = array_key_first($appliedVCredits);

                                    $appliedCredits[$indexKey]['amount'] += $subtracted;
                                } else {
                                    $appliedCredits[] = [
                                        'credit-type' => 'vendor-credit',
                                        'id' => $vCredit->id,
                                        'amount' => $subtracted
                                    ];
                                }

                                $credits = array_filter($linkedTransacsData, function($value, $key) use($vCredit) {
                                    return $value['linked_transaction_type'] === 'vendor-credit' && $value['linked_transaction_id'] === $vCredit->id;
                                }, ARRAY_FILTER_USE_BOTH);

                                if(count($credits) < 1) {
                                    $linkedTransacsData[] = [
                                        'linked_transaction_type' => 'vendor-credit',
                                        'linked_transaction_id' => $vCredit->id
                                    ];
                                }
                            }
    
                            foreach($paymentCredits as $paymentCredit) {
                                $balance = floatval(str_replace(',', '', $paymentCredit->available_credits_amount));
                                $expression = floatval(str_replace(',', '', $balance)) / 100 * $creditPercentage;
                                $subtracted = round($expression, 2, $rounding);
                                $subtracted = number_format($expression, 2, '.', ',');
    
                                if($rounding === PHP_ROUND_HALF_DOWN) {
                                    $rounding = PHP_ROUND_HALF_UP;
                                } else {
                                    $rounding = PHP_ROUND_HALF_DOWN;
                                }
                                
                                $appliedPaymentCredits = array_filter($appliedCredits, function($value, $key) use($paymentCredit) {
                                    return $value['credit-type'] === 'bill-payment' && $value['id'] === $paymentCredit->id;
                                }, ARRAY_FILTER_USE_BOTH);

                                if(count($appliedPaymentCredits) > 0) {
                                    $indexKey = array_key_first($appliedPaymentCredits);

                                    $appliedCredits[$indexKey]['amount'] += $subtracted;
                                } else {
                                    $appliedCredits[] = [
                                        'credit-type' => 'bill-payment',
                                        'id' => $paymentCredit->id,
                                        'amount' => $subtracted
                                    ];
                                }

                                $credits = array_filter($linkedTransacsData, function($value, $key) use($paymentCredit) {
                                    return $value['linked_transaction_type'] === 'bill-payment' && $value['linked_transaction_id'] === $paymentCredit->id;
                                }, ARRAY_FILTER_USE_BOTH);

                                if(count($credits) < 1) {
                                    $linkedTransacsData[] = [
                                        'linked_transaction_type' => 'bill-payment',
                                        'linked_transaction_id' => $paymentCredit->id
                                    ];
                                }
                            }

                            $paymentCredit += floatval(str_replace(',', '', $data['total_amount'][$key])) - floatval($bill->remaining_balance);

                            $newVCredit -= floatval(str_replace(',', '', $data['credit_applied'][$key]));
                        }
                    }
                }

                $mailingAddress = $vendor->title !== "" ? $vendor->title." " : "";
                $mailingAddress .= $vendor->f_name !== "" ? $vendor->f_name." " : "";
                $mailingAddress .= $vendor->m_name !== "" ? $vendor->m_name." " : "";
                $mailingAddress .= $vendor->l_name !== "" ? $vendor->l_name." " : "";
                $mailingAddress .= $vendor->suffix !== "" ? $vendor->suffix : "";
                $mailingAddress .= $vendor->street !== "" ? "<br />\n".$vendor->street : "";
                $mailingAddress .= $vendor->city !== "" ? "<br />\n".$vendor->city : "";
                $mailingAddress .= $vendor->state !== "" ? ", ".$vendor->state : "";
                $mailingAddress .= $vendor->zip !== "" ? " ".$vendor->zip : "";

                $billPayment = [
                    'company_id' => logged('company_id'),
                    'payee_id' => $payee,
                    'payment_account_id' => $data['payment_account'],
                    'mailing_address' => $mailingAddress,
                    'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
                    'check_no' => isset($data['print_later']) ? null : $startingCheckNo,
                    'to_print_check_no' => $data['print_later'],
                    'total_amount' => $paymentTotal,
                    'vendor_credits_applied' => count($appliedCredits) > 0 ? json_encode($appliedCredits) : null,
                    'total_credits_amount' => $paymentCredit,
                    'available_credits_amount' => $paymentCredit,
                    'status' => 1
                ];

                $billPaymentId = $this->expenses_model->insert_bill_payment($billPayment);

                if ($billPaymentId) {
                    if($paymentCredit > 0) {
                        $newVCredit += $paymentCredit;
                    }

                    $vendorData = [
                        'vendor_credits' => $newVCredit
                    ];

                    $this->vendors_model->updateVendor($vendor->id, $vendorData);

                    foreach($linkedTransacsData as $index => $linkedVCredit) {
                        $linkedTransacsData[$index]['linked_to_type'] = 'bill-payment';
                        $linkedTransacsData[$index]['linked_to_id'] = $billPaymentId;
                    }

                    if (is_null($billPayment['to_print_check_no']) && !is_null($billPayment['check_no'])) {
                        $assignCheck = [
                            'check_no' => $billPayment['check_no'],
                            'transaction_type' => 'bill-payment',
                            'transaction_id' => $billPaymentId,
                            'payment_account_id' => $billPayment['payment_account_id']
                        ];
    
                        $this->accounting_assigned_checks_model->assign_check_no($assignCheck);
                    }

                    $paymentAcc = $this->chart_of_accounts_model->getById($data['payment_account']);
                    $paymentAccType = $this->account_model->getById($paymentAcc->account_id);

                    if ($paymentAccType->account_name === 'Credit Card') {
                        $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) + floatval($paymentTotal);
                    } else {
                        $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) - floatval($paymentTotal);
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $paymentAccData = [
                        'id' => $paymentAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($paymentAccData);

                    $accTransacData = [
                        'account_id' => $paymentAcc->id,
                        'transaction_type' => 'Bill Payment',
                        'transaction_id' => $billPaymentId,
                        'amount' => floatval($paymentTotal),
                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                        'type' => 'decrease'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);

                    $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
                    $newBalance = floatval(str_replace(',', '', $apAcc->balance)) - floatval($paymentTotal);

                    $apAccData = [
                        'id' => $apAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($apAccData);

                    $accTransacData = [
                        'account_id' => $apAcc->id,
                        'transaction_type' => 'Bill Payment',
                        'transaction_id' => $billPaymentId,
                        'amount' => floatval($paymentTotal),
                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                        'type' => 'decrease'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);

                    foreach($appliedCredits as $appliedCredit) {
                        if($appliedCredit['credit-type'] === 'vendor-credit') {
                            $vcredit = $this->vendors_model->get_vendor_credit_by_id($appliedCredit['id']);

                            $remainingBal = floatval(str_replace(',', '', $vcredit->remaining_balance)) - floatval(str_replace(',', '', $appliedCredit['amount']));

                            $vCreditData = [
                                'status' => $remainingBal < 1 ? 2 : 1,
                                'remaining_balance' => floatval(str_replace(',', '', $remainingBal))
                            ];
    
                            $this->vendors_model->update_vendor_credit($appliedCredit['id'], $vCreditData);
                        } else {
                            $payment = $this->vendors_model->get_bill_payment_by_id($appliedCredit['id']);

                            $remainingBal = floatval(str_replace(',', '', $payment->available_credits_amount)) - floatval(str_replace(',', '', $appliedCredit['amount']));

                            $paymentData = [
                                'available_credits_amount' => floatval(str_replace(',', '', $remainingBal))
                            ];

                            $this->vendors_model->update_bill_payment($appliedCredit['id'], $paymentData);
                        }
                    }

                    $paymentItems = [];
                    $startingTime = date("m/d/Y H:i:s");
                    foreach ($itemKeys as $key) {
                        $bill = $this->vendors_model->get_bill_by_id($data['bills'][$key], logged('company_id'));

                        $linkedTransacsData[] = [
                            'linked_to_type' => 'bill-payment',
                            'linked_to_id' => $billPaymentId,
                            'linked_transaction_id' => $data['bills'][$key],
                            'linked_transaction_type' => 'bill'
                        ];

                        $paymentItems[] = [
                            'bill_payment_id' => $billPaymentId,
                            'bill_id' => $data['bills'][$key],
                            'credit_applied_amount' => floatval(str_replace(',', '', $data['credit_applied'][$key])),
                            'payment_amount' => floatval(str_replace(',', '', $data['payment_amount'][$key])),
                            'total_amount' => floatval(str_replace(',', '', $data['total_amount'][$key])) > floatval($bill->remaining_balance) ? floatval($bill->remaining_balance) : floatval(str_replace(',', '', $data['total_amount'][$key]))
                        ];

                        $bill = $this->expenses_model->get_bill_data($data['bills'][$key]);
                        $remainingBal = floatval(str_replace(',', '', $bill->remaining_balance)) - floatval(str_replace(',', '', $data['total_amount'][$key]));

                        $billData = [
                            'remaining_balance' => floatval(str_replace(',', '', $remainingBal)) <= 0.00 ? 0.00 : floatval(str_replace(',', '', $remainingBal)),
                            'status' => $remainingBal <= 0.00 ? 2 : 1
                        ];
    
                        $this->expenses_model->update_bill_data($bill->id, $billData);

                        $startingTime = date("m/d/Y H:i:s", strtotime($startingTime.' + 1 second'));
                    }

                    $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);

                    $this->expenses_model->insert_bill_payment_items($paymentItems);
                }

                if ($data['starting_check_no'] !== "") {
                    $startingCheckNo++;
                }
            }
    
            $return = [];
            $return['data'] = $billPaymentId;
            $return['success'] = $billPaymentId ? true : false;
            $return['message'] = $billPaymentId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function vendor_credit($data)
    {
        $this->form_validation->set_rules('vendor_id', 'Vendor', 'required');

        if (isset($data['expense_account'])) {
            $this->form_validation->set_rules('expense_account[]', 'Expense name', 'required');
            $this->form_validation->set_rules('category_amount[]', 'Category amount', 'required');
        }

        if (isset($data['item'])) {
            $this->form_validation->set_rules('item[]', 'Item', 'required');
            $this->form_validation->set_rules('quantity[]', 'Item quantity', 'required');
            $this->form_validation->set_rules('item_amount[]', 'Item quantity', 'required');
        }

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('payment_date', 'Payment date', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['expense_account']) && !isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $vendorCredit = [
                'company_id' => logged('company_id'),
                'vendor_id' => $data['vendor_id'],
                'mailing_address' => nl2br($data['mailing_address']),
                'payment_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['payment_date'])) : null,
                'ref_no' => $data['ref_no'] === '' ? null : $data['ref_no'],
                'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
                'memo' => $data['memo'],
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'remaining_balance' => floatval(str_replace(',', '', $data['total_amount'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];
    
            $vendorCreditId = $this->expenses_model->add_vendor_credit($vendorCredit);
    
            if ($vendorCreditId) {
                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Vendor Credit',
                            'transaction_id' => $vendorCreditId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Vendor Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $vendorCreditId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(!isset($data['template_name'])) {
                    $vendor = $this->vendors_model->get_vendor_by_id($data['vendor_id']);

                    if ($vendor->vendor_credits === null & $vendor->vendor_credits === "") {
                        $vendorCredits = floatval(str_replace(',', '', $data['total_amount']));
                    } else {
                        $vendorCredits = floatval(str_replace(',', '', $data['total_amount'])) + floatval(str_replace(',', '', $vendor->vendor_credits));
                    }

                    $vendorData = [
                        'vendor_credits' => floatval(str_replace(',', '', $vendorCredits))
                    ];

                    $this->vendors_model->updateVendor($vendor->id, $vendorData);

                    $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
                    $balance = floatval(str_replace(',', '', $apAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));

                    $apAccData = [
                        'id' => $apAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $balance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($apAccData);

                    $accTransacData = [
                        'account_id' => $apAcc->id,
                        'transaction_type' => 'Vendor Credit',
                        'transaction_id' => $vendorCreditId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                        'type' => 'decrease'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                } else {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'vendor credit',
                        'txn_id' => $vendorCreditId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                if (isset($data['expense_account'])) {
                    $categoryDetails = [];
                    foreach ($data['expense_account'] as $index => $value) {
                        // $categoryDetails[] = [
                        $categoryDetail = [
                            'transaction_type' => 'Vendor Credit',
                            'transaction_id' => $vendorCreditId,
                            'expense_account_id' => $value,
                            'category' => $data['category'][$index],
                            'description' => $data['description'][$index],
                            'amount' => $data['category_amount'][$index],
                            'billable' => $data['category_billable'][$index],
                            'markup_percentage' => $data['category_markup'][$index],
                            'tax' => $data['category_tax'][$index],
                            'customer_id' => $data['category_customer'][$index]
                        ];

                        $categoryDetailId = $this->expenses_model->insert_vendor_transaction_category($categoryDetail);

                        if(!isset($data['template_name'])) {
                            $expenseAcc = $this->chart_of_accounts_model->getById($value);
                            $expenseAccType = $this->account_model->getById($expenseAcc->account_id);

                            if ($expenseAccType->account_name === 'Credit Card') {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                            } else {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                            }
                            $newBalance = number_format($newBalance, 2, '.', ',');

                            $expenseAccData = [
                                'id' => $expenseAcc->id,
                                'company_id' => logged('company_id'),
                                'balance' => floatval(str_replace(',', '', $newBalance))
                            ];

                            $this->chart_of_accounts_model->updateBalance($expenseAccData);

                            $accTransacData = [
                                'account_id' => $expenseAcc->id,
                                'transaction_type' => 'Vendor Credit',
                                'transaction_id' => $vendorCreditId,
                                'amount' => floatval($data['category_amount'][$index]),
                                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                'type' => 'decrease',
                                'is_category' => 1,
                                'child_id' => $categoryDetailId
                            ];

                            $this->accounting_account_transactions_model->create($accTransacData);
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_categories($categoryDetails);
                }
    
                if (isset($data['item'])) {
                    $itemDetails = [];
                    foreach ($data['item'] as $index => $value) {
                        $item = $this->items_model->getByID($value);

                        // $itemDetails[] = [
                        $itemDetail = [
                            'transaction_type' => 'Vendor Credit',
                            'transaction_id' => $vendorCreditId,
                            'item_id' => $value,
                            'location_id' => $data['location'][$index],
                            'quantity' => $data['quantity'][$index],
                            'rate' => $data['item_amount'][$index],
                            'discount' => $data['discount'][$index],
                            'tax' => $data['item_tax'][$index],
                            'total' => floatval(str_replace(',', '', $data['item_total'][$index]))
                        ];

                        $itemDetailId = $this->expenses_model->insert_vendor_transaction_item($itemDetail);

                        if(!isset($data['template_name'])) {
                            if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                $location = $this->items_model->getItemLocation($data['location'][$index], $value);

                                $newQty = intval($location->qty) - intval($data['quantity'][$index]);

                                $this->items_model->updateLocationQty($data['location'][$index], $value, $newQty);
                            }

                            $itemAccDetails = $this->items_model->getItemAccountingDetails($value);

                            if ($itemAccDetails) {
                                if(in_array($item->type, ['Product', 'product', 'Inventory', 'inventory'])) {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);

                                    if(floatval($item->cost) !== floatval($data['item_amount'][$index])) {
                                        $totalCost = floatval($item->cost) * floatval($data['quantity'][$index]);
                                        $cost = floatval(str_replace(',', '', $data['item_total'][$index])) - $totalCost;
    
                                        $newBalance = floatval(str_replace(',', '', $account->balance)) + $cost;
    
                                        $accountData = [
                                            'id' => $account->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];
    
                                        $this->chart_of_accounts_model->updateBalance($accountData);
    
                                        $accTransacData = [
                                            'account_id' => $account->id,
                                            'transaction_type' => 'Vendor Credit',
                                            'transaction_id' => $vendorCreditId,
                                            'amount' => $cost,
                                            'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                            'type' => 'increase',
                                            'is_item_category' => 1,
                                            'child_id' => $itemDetailId
                                        ];
    
                                        $this->accounting_account_transactions_model->create($accTransacData);

                                        $account->balance = $newBalance;
                                    }
                                } else {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->expense_account_id);
                                }

                                $accType = $this->account_model->getById($account->account_id);
                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $data['item_total'][$index]));
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $data['item_total'][$index]));
                                }
                                $newBalance = number_format($newBalance, 2, '.', ',');

                                $accountData = [
                                    'id' => $account->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];

                                $this->chart_of_accounts_model->updateBalance($accountData);

                                $accTransacData = [
                                    'account_id' => $account->id,
                                    'transaction_type' => 'Vendor Credit',
                                    'transaction_id' => $vendorCreditId,
                                    'amount' => floatval(str_replace(',', '', $data['item_total'][$index])),
                                    'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                    'type' => 'decrease',
                                    'is_item_category' => 1,
                                    'child_id' => $itemDetailId
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            }
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_items($itemDetails);
                }
            }

            $return['data'] = $vendorCreditId;
            $return['success'] = $vendorCreditId ? true : false;
            $return['message'] = $vendorCreditId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    public function products_list_modal()
    {
        $items = $this->items_model->getItemsWithFilter(['type' => ['inventory', 'product', 'Inventory', 'Product', 'service', 'Service', 'non-inventory', 'Non-inventory'], 'status' => [1]]);

        $items = array_filter($items, function ($item, $k) {
            $accDetails = $this->items_model->getItemAccountingDetails($item->id);
            return $accDetails !== null;
        }, ARRAY_FILTER_USE_BOTH);

        $this->page_data['items'] = $items;
        $this->load->view("v2/includes/accounting/modal_forms/products_list_modal", $this->page_data);
        // $this->load->view('accounting/modals/products_list_modal', $this->page_data);
    }

    public function items_list_modal()
    {
        $filter = [
            'status' => [
                1
            ]
        ];
        $items = $this->items_model->getItemsWithFilter($filter);

        $this->page_data['items'] = $items;
        $this->load->view('v2/includes/accounting/modal_forms/items_list_modal', $this->page_data);
    }

    public function get_items_categories_list_modal()
    {
        $categories = $this->items_model->getItemCategories();

        $this->page_data['categories'] = $categories;
        $this->load->view('v2/includes/accounting/modal_forms/item_category_list_modal', $this->page_data);
    }

    public function get_category_items($categoryId)
    {
        $items = $this->items_model->get_items_by_category($categoryId);

        foreach($items as $key => $item) {
            $locations = $this->items_model->getLocationByItemId($item->id);

            $items[$key]->locations = $locations;
        }

        echo json_encode($items);
    }

    public function get_package_details($packageId)
    {
        $package = $this->items_model->get_package_by_id($packageId);
        $packageItems = $this->items_model->get_package_items($packageId);

        foreach($packageItems as $key => $packageItem) {
            $item = $this->items_model->getItemById($packageItem->item_id)[0];

            $packageItems[$key]->details = $item;
        }

        echo json_encode(['package' => $package, 'items' => $packageItems]);
    }

    public function get_package_list_modal()
    {
        $packages = $this->workorder_model->getPackageDetailsByCompany(logged('company_id'));

        foreach($packages as $key => $package) {
            $items = $this->items_model->get_package_items($package->id);

            foreach($items as $index => $item) {
                $items[$index]->item = $this->items_model->getItemById($item->item_id)[0];
            }

            $packages[$key]->items = $items;
        }

        $this->page_data['itemPackages'] = $packages;
        $this->load->view('v2/includes/accounting/modal_forms/package_list_modal', $this->page_data);
    }

    public function get_term_details($termId)
    {
        $term = $this->accounting_terms_model->get_by_id($termId, logged('company_id'));

        echo json_encode($term);
    }

    private function purchase_order($data)
    {
        $this->form_validation->set_rules('vendor_id', 'Vendor', 'required');
        $this->form_validation->set_rules('email', 'Email', 'required');

        if (isset($data['expense_account'])) {
            $this->form_validation->set_rules('expense_account[]', 'Expense name', 'required');
            $this->form_validation->set_rules('category_amount[]', 'Category amount', 'required');
        }

        if (isset($data['item'])) {
            $this->form_validation->set_rules('item[]', 'Item', 'required');
            $this->form_validation->set_rules('quantity[]', 'Item quantity', 'required');
            $this->form_validation->set_rules('item_amount[]', 'Item quantity', 'required');
        }

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('purchase_order_date', 'Purchase order date', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['expense_account']) && !isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $lastPO = $this->expenses_model->get_last_purchase_order(logged('company_id'));

            $purchaseOrderData = [
                'company_id' => logged('company_id'),
                'vendor_id' => $data['vendor_id'],
                'purchase_order_no' => $lastPO === null ? 1 : intval($lastPO->purchase_order_no)+1,
                'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
                'email' => $data['email'],
                'mailing_address' => nl2br($data['mailing_address']),
                'customer_id' => $data['customer'],
                'shipping_address' => nl2br($data['shipping_address']),
                'purchase_order_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['purchase_order_date'])) : null,
                'ship_via' => $data['ship_via'],
                'message_to_vendor' => $data['message_to_vendor'],
                'memo' => $data['memo'],
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'remaining_balance' => $data['status'] === "open" ? floatval(str_replace(',', '', $data['total_amount'])) : 0.00,
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => !isset($data['template_name']) || $data['status'] === "open" ? 1 : 2
            ];
    
            $purchaseOrderId = $this->expenses_model->add_purchase_order($purchaseOrderData);
    
            if ($purchaseOrderId) {
                if(isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'purchase order',
                        'txn_id' => $purchaseOrderId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Purchase Order',
                            'transaction_id' => $purchaseOrderId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Purchase Order',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $purchaseOrderId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if (isset($data['expense_account'])) {
                    $categoryDetails = [];
                    foreach ($data['expense_account'] as $index => $value) {
                        $categoryDetails[] = [
                            'transaction_type' => 'Purchase Order',
                            'transaction_id' => $purchaseOrderId,
                            'expense_account_id' => $value,
                            'category' => $data['category'][$index],
                            'description' => $data['description'][$index],
                            'amount' => $data['category_amount'][$index],
                            'billable' => $data['category_billable'][$index],
                            'markup_percentage' => $data['category_markup'][$index],
                            'tax' => $data['category_tax'][$index],
                            'customer_id' => $data['category_customer'][$index]
                        ];
                    }
    
                    $this->expenses_model->insert_vendor_transaction_categories($categoryDetails);
                }
    
                if (isset($data['item'])) {
                    $itemDetails = [];
                    foreach ($data['item'] as $index => $value) {
                        $itemDetails[] = [
                            'transaction_type' => 'Purchase Order',
                            'transaction_id' => $purchaseOrderId,
                            'item_id' => $value,
                            'location_id' => $data['location'][$index],
                            'quantity' => $data['quantity'][$index],
                            'rate' => $data['item_amount'][$index],
                            'discount' => $data['discount'][$index],
                            'tax' => $data['item_tax'][$index],
                            'total' => floatval(str_replace(',', '', $data['item_total'][$index]))
                        ];

                        if(!isset($data['template_name'])) {
                            $itemAccDetails = $this->items_model->getItemAccountingDetails($value);

                            $newQtyPO = intval($itemAccDetails->qty_po) + intval($data['quantity'][$index]);

                            $this->items_model->updateItemAccountingDetails(['qty_po' => $newQtyPO], $value);
                        }
                    }
    
                    $this->expenses_model->insert_vendor_transaction_items($itemDetails);
                }
            }

            $return['data'] = $purchaseOrderId;
            $return['success'] = $purchaseOrderId ? true : false;
            $return['message'] = $purchaseOrderId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    public function get_vendor_details($vendorId)
    {
        $vendor = $this->vendors_model->get_vendor_by_id($vendorId);

        echo json_encode($vendor);
    }

    public function get_customer_details($customerId)
    {
        $customer = $this->accounting_customers_model->getCustomerDetails($customerId);

        echo json_encode($customer[0]);
    }

    public function get_employee_details($employeeId)
    {
        $employee = $this->users_model->getUserByID($employeeId);

        echo json_encode($employee);
    }

    private function credit_card_credit($data)
    {
        $this->form_validation->set_rules('bank_credit_account', 'Bank/Credit account', 'required');

        if (isset($data['expense_account'])) {
            $this->form_validation->set_rules('expense_account[]', 'Expense name', 'required');
            $this->form_validation->set_rules('category_amount[]', 'Category amount', 'required');
        }

        if (isset($data['item'])) {
            $this->form_validation->set_rules('item[]', 'Item', 'required');
            $this->form_validation->set_rules('quantity[]', 'Item quantity', 'required');
            $this->form_validation->set_rules('item_amount[]', 'Item quantity', 'required');
        }

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('payment_date', 'Payment date', 'required');
        }

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['expense_account']) && !isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $payee = explode('-', $data['payee']);

            $creditData = [
                'company_id' => logged('company_id'),
                'payee_type' => $payee[0],
                'payee_id' => $payee[1],
                'bank_credit_account_id' => $data['bank_credit_account'],
                'payment_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['payment_date'])) : null,
                'ref_no' => $data['ref_no'] === "" ? null : $data['ref_no'],
                'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
                'memo' => $data['memo'],
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];

            $creditId = $this->expenses_model->add_credit_card_credit($creditData);
    
            if ($creditId) {
                if(!isset($data['template_name'])) {
                    $creditAcc = $this->chart_of_accounts_model->getById($data['bank_credit_account']);

                    $newBalance = floatval(str_replace(',', '', $creditAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
                    $newBalance = number_format($newBalance, 2, '.', ',');
        
                    $this->chart_of_accounts_model->updateBalance(['id' => $creditAcc->id, 'company_id' => logged('company_id'), 'balance' => floatval(str_replace(',', '', $newBalance))]);

                    $accTransacData = [
                        'account_id' => $creditAcc->id,
                        'transaction_type' => 'CC Credit',
                        'transaction_id' => $creditId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                        'type' => 'increase'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                } else {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'credit card credit',
                        'txn_id' => $creditId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'CC Credit',
                            'transaction_id' => $creditId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'CC Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $creditId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if (isset($data['expense_account'])) {
                    $categoryDetails = [];
                    foreach ($data['expense_account'] as $index => $value) {
                        // $categoryDetails[] = [
                        $categoryDetail = [
                            'transaction_type' => 'Credit Card Credit',
                            'transaction_id' => $creditId,
                            'expense_account_id' => $value,
                            'category' => $data['category'][$index],
                            'description' => $data['description'][$index],
                            'amount' => $data['category_amount'][$index],
                            'billable' => $data['category_billable'][$index],
                            'markup_percentage' => $data['category_markup'][$index],
                            'tax' => $data['category_tax'][$index],
                            'customer_id' => $data['category_customer'][$index]
                        ];

                        $categoryDetailId = $this->expenses_model->insert_vendor_transaction_category($categoryDetail);

                        if(!isset($data['template_name'])) {
                            $expenseAcc = $this->chart_of_accounts_model->getById($value);
                            $expenseAccType = $this->account_model->getById($expenseAcc->account_id);

                            if ($expenseAccType->account_name === 'Credit Card') {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                            } else {
                                $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                            }
                            $newBalance = number_format($newBalance, 2, '.', ',');

                            $expenseAccData = [
                                'id' => $expenseAcc->id,
                                'company_id' => logged('company_id'),
                                'balance' => floatval(str_replace(',', '', $newBalance))
                            ];

                            $this->chart_of_accounts_model->updateBalance($expenseAccData);

                            $accTransacData = [
                                'account_id' => $expenseAcc->id,
                                'transaction_type' => 'CC Credit',
                                'transaction_id' => $creditId,
                                'amount' => floatval($data['category_amount'][$index]),
                                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                'type' => 'decrease',
                                'is_category' => 1,
                                'child_id' => $categoryDetailId
                            ];

                            $this->accounting_account_transactions_model->create($accTransacData);
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_categories($categoryDetails);
                }
    
                if (isset($data['item'])) {
                    $itemDetails = [];
                    foreach ($data['item'] as $index => $value) {
                        $item = $this->items_model->getByID($value);

                        // $itemDetails[] = [
                        $itemDetail = [
                            'transaction_type' => 'Credit Card Credit',
                            'transaction_id' => $creditId,
                            'item_id' => $value,
                            'location_id' => $data['location'][$index],
                            'quantity' => $data['quantity'][$index],
                            'rate' => $data['item_amount'][$index],
                            'discount' => $data['discount'][$index],
                            'tax' => $data['item_tax'][$index],
                            'total' => floatval(str_replace(',', '', $data['item_total'][$index]))
                        ];

                        $itemDetailId = $this->expenses_model->insert_vendor_transaction_item($itemDetail);

                        if(!isset($data['template_name'])) {
                            if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                                $location = $this->items_model->getItemLocation($data['location'][$index], $value);

                                $newQty = intval($location->qty) - intval($data['quantity'][$index]);

                                $this->items_model->updateLocationQty($data['location'][$index], $value, $newQty);
                            }

                            $itemAccDetails = $this->items_model->getItemAccountingDetails($value);

                            if ($itemAccDetails) {
                                if(in_array($item->type, ['Product', 'product', 'Inventory', 'inventory'])) {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);

                                    if(floatval($item->cost) !== floatval($data['item_amount'][$index])) {
                                        $totalCost = floatval($item->cost) * floatval($data['quantity'][$index]);
                                        $cost = floatval(str_replace(',', '', $data['item_total'][$index])) - $totalCost;
    
                                        $newBalance = floatval(str_replace(',', '', $newBalance)) + $cost;
    
                                        $accountData = [
                                            'id' => $account->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];
    
                                        $this->chart_of_accounts_model->updateBalance($accountData);
    
                                        $accTransacData = [
                                            'account_id' => $account->id,
                                            'transaction_type' => 'CC Credit',
                                            'transaction_id' => $creditId,
                                            'amount' => $cost,
                                            'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                            'type' => 'increase',
                                            'is_item_category' => 1,
                                            'child_id' => $itemDetailId
                                        ];
    
                                        $this->accounting_account_transactions_model->create($accTransacData);

                                        $account->balance = $newBalance;
                                    }
                                } else {
                                    $account = $this->chart_of_accounts_model->getById($itemAccDetails->expense_account_id);
                                }

                                $accType = $this->account_model->getById($account->account_id);
                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $data['item_total'][$index]));
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $data['item_total'][$index]));
                                }
                                $newBalance = number_format($newBalance, 2, '.', ',');

                                $accountData = [
                                    'id' => $account->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];

                                $this->chart_of_accounts_model->updateBalance($accountData);

                                $accTransacData = [
                                    'account_id' => $account->id,
                                    'transaction_type' => 'CC Credit',
                                    'transaction_id' => $creditId,
                                    'amount' => floatval(str_replace(',', '', $data['item_total'][$index])),
                                    'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                    'type' => 'decrease',
                                    'is_item_category' => 1,
                                    'child_id' => $itemDetailId
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            }
                        }
                    }
    
                    // $this->expenses_model->insert_vendor_transaction_items($itemDetails);
                }
            }
    
            $return['data'] = $creditId;
            $return['success'] = $creditId ? true : false;
            $return['message'] = $creditId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function bill_payment($data)
    {
        $this->form_validation->set_rules('vendor', 'Vendor', 'required');
        $this->form_validation->set_rules('payment_account', 'Payment account', 'required');
        $this->form_validation->set_rules('payment_date', 'Payment date', 'required');
        $this->form_validation->set_rules('bills[]', 'Bill', 'required');
        $this->form_validation->set_rules('payment_amount', 'Payment amount', 'required');

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $paymentTotal = floatval(str_replace(',', '', $data['payment_amount']));
            $vendor = $this->vendors_model->get_vendor_by_id($data['vendor']);
            $newVCredit = floatval($vendor->vendor_credits);

            $appliedCredits = [];
            $linkedTransacsData = [];
            if(isset($data['credits']) && count($data['credits']) > 0) {
                foreach ($data['credits'] as $index => $credit) {
                    if($data['credit_type'][$index] === 'vendor-credit') {
                        $vCredit = $this->vendors_model->get_vendor_credit_by_id($credit, logged('company_id'));
                        $balance = floatval(str_replace(',', '', $vCredit->remaining_balance));
                        $subtracted = floatval(str_replace(',', '', $data['credit_payment'][$index]));
                        $remainingBal = $balance - $subtracted;
        
                        $vCreditData = [
                            'status' => $remainingBal === 0.00 ? 2 : 1,
                            'remaining_balance' => floatval(str_replace(',', '', $remainingBal))
                        ];
        
                        $this->vendors_model->update_vendor_credit($vCredit->id, $vCreditData);

                        $appliedCredits[] = [
                            'credit-type' => 'vendor-credit',
                            'id' => $credit,
                            'amount' => $subtracted
                        ];

                        $linkedTransacsData[] = [
                            'linked_transaction_type' => 'vendor-credit',
                            'linked_transaction_id' => $vCredit->id
                        ];
                    } else {
                        $payment = $this->vendors_model->get_bill_payment_by_id($credit, logged('company_id'));
                        $balance = floatval(str_replace(',', '', $payment->available_credits_amount));
                        $subtracted = floatval(str_replace(',', '', $data['credit_payment'][$index]));
                        $remainingBal = $balance - $subtracted;
        
                        $creditData = [
                            'available_credits_amount' => floatval(str_replace(',', '', $remainingBal))
                        ];

                        $this->vendors_model->update_bill_payment($payment->id, $creditData);

                        $appliedCredits[] = [
                            'credit-type' => 'bill-payment',
                            'id' => $credit,
                            'amount' => $subtracted
                        ];

                        $linkedTransacsData[] = [
                            'linked_transaction_type' => 'bill-payment',
                            'linked_transaction_id' => $payment->id
                        ];
                    }

                    $newVCredit -= floatval(str_replace(',', '', $data['credit_payment'][$index]));
                }
            }

            $billPayment = [
                'company_id' => logged('company_id'),
                'payee_id' => $data['vendor'],
                'payment_account_id' => $data['payment_account'],
                'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'check_no' => is_null($data['print_later']) && $data['ref_no'] !== '' ? $data['ref_no'] : null,
                'to_print_check_no' => $data['print_later'],
                'total_amount' => floatval(str_replace(',', '', $paymentTotal)),
                'fixed_total' => $data['fixed_total'],
                'vendor_credits_applied' => count($appliedCredits) > 0 ? json_encode($appliedCredits) : null,
                'amount_to_apply' => $data['amount_to_apply'],
                'total_credits_amount' => $data['amount_to_credit'],
                'available_credits_amount' => $data['amount_to_credit'],
                'status' => 1
            ];

            $billPaymentId = $this->expenses_model->insert_bill_payment($billPayment);

            if ($billPaymentId) {
                if(floatval($data['amount_to_credit']) > 0) {
                    $newVCredit += floatval($data['amount_to_credit']);
                }

                $vendorData = [
                    'vendor_credits' => $newVCredit
                ];

                $this->vendors_model->updateVendor($vendor->id, $vendorData);

                $paymentAcc = $this->chart_of_accounts_model->getById($data['payment_account']);
                $paymentAccType = $this->account_model->getById($paymentAcc->account_id);

                if ($paymentAccType->account_name === 'Credit Card') {
                    $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) + floatval(str_replace(',', '', $paymentTotal));
                } else {
                    $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) - floatval(str_replace(',', '', $paymentTotal));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $paymentAccData = [
                    'id' => $paymentAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($paymentAccData);

                $accTransacData = [
                    'account_id' => $paymentAcc->id,
                    'transaction_type' => 'Bill Payment',
                    'transaction_id' => $billPaymentId,
                    'amount' => floatval(str_replace(',', '', $paymentTotal)),
                    'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
                $newBalance = floatval(str_replace(',', '', $apAcc->balance)) - floatval(str_replace(',', '', $paymentTotal));

                $apAccData = [
                    'id' => $apAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($apAccData);

                $accTransacData = [
                    'account_id' => $apAcc->id,
                    'transaction_type' => 'Bill Payment',
                    'transaction_id' => $billPaymentId,
                    'amount' => floatval(str_replace(',', '', $paymentTotal)),
                    'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                foreach($linkedTransacsData as $index => $linkedData) {
                    $linkedTransacsData[$index]['linked_to_type'] = 'bill-payment';
                    $linkedTransacsData[$index]['linked_to_id'] = $billPaymentId;
                }

                $paymentItems = [];
                foreach ($data['bills'] as $index => $bill) {
                    $paymentItems[] = [
                        'bill_payment_id' => $billPaymentId,
                        'bill_id' => $bill,
                        'credit_applied_amount' => null,
                        'payment_amount' => floatval(str_replace(',', '', $data['bill_payment'][$index])),
                        'total_amount' => floatval(str_replace(',', '', $data['bill_payment'][$index])),
                    ];

                    $bill = $this->expenses_model->get_bill_data($bill);

                    if (floatval($data['bill_payment'][$index]) === floatval($bill->remaining_balance)) {
                        $billData = [
                            'remaining_balance' => 0.00,
                            'status' => 2
                        ];
                    } else {
                        $remainingBal = floatval(str_replace(',', '', $bill->remaining_balance)) - floatval(str_replace(',', '', $data['bill_payment'][$index]));
                        $billData = [
                            'remaining_balance' => floatval(str_replace(',', '', $remainingBal))
                        ];
                    }

                    $this->expenses_model->update_bill_data($bill->id, $billData);

                    $linkedTransacsData[] = [
                        'linked_to_type' => 'bill-payment',
                        'linked_to_id' => $billPaymentId,
                        'linked_transaction_id' => $bill->id,
                        'linked_transaction_type' => 'bill'
                    ];
                }

                $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
                $this->expenses_model->insert_bill_payment_items($paymentItems);
            }

            $return = [];
            $return['data'] = $billPaymentId;
            $return['success'] = $billPaymentId ? true : false;
            $return['message'] = $billPaymentId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function invoice($data)
    {
        $this->form_validation->set_rules('customer', 'Customer', 'required');
        $this->form_validation->set_rules('item[]', 'Item', 'required');
        $this->form_validation->set_rules('quantity[]', 'Item total', 'required');
        $this->form_validation->set_rules('item_amount[]', 'Item total', 'required');
        $this->form_validation->set_rules('item_total[]', 'Item total', 'required');

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('date_issued', 'Date issued', 'required');
            $this->form_validation->set_rules('due_date', 'Due date', 'required');
            $this->form_validation->set_rules('status', 'Status', 'required');
            $this->form_validation->set_rules('invoice_no', 'Invoice #', 'required');
        }

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            if ($data['credit_card_payments'] == 1) {
                $credit_card = 'Credit Card';
            } else {
                $credit_card = '0';
            }
    
            if ($data['bank_transfer'] == 1) {
                $bank_transfer = 'Bank Transfer';
            } else {
                $bank_transfer = '0';
            }
    
            if ($data['instapay'] == 1) {
                $instapay = 'Instapay';
            } else {
                $instapay = '0';
            }
    
            if ($data['check'] == 1) {
                $check = 'Check';
            } else {
                $check = '0';
            }
    
            if ($data['cash'] == 1) {
                $cash = 'Cash';
            } else {
                $cash = '0';
            }
    
            if ($data['deposit'] == 1) {
                $deposit = 'Deposit';
            } else {
                $deposit = '0';
            }

            $invoiceData = [
                'customer_id' => $data['customer'],
                'job_location' => $data['job_location'],
                'job_name' => $data['job_name'],
                'work_order_number' => $data['job_no'],
                'purchase_order' => $data['purchase_order_no'],
                'invoice_number' => !isset($data['template_name']) ? $data['invoice_no'] : '',
                'date_issued' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['date_issued'])) : null,
                'due_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['due_date'])) : null,
                'status' => !isset($data['template_name']) ? $data['status'] : 'Schedule',
                'customer_email' => $data['customer_email'],
                'billing_address' => nl2br($data['billing_address']),
                'shipping_to_address' => nl2br($data['shipping_to']),
                'ship_via' => $data['ship_via'],
                'shipping_date' => !isset($data['template_name']) && !empty($data['shipping_date']) ? date("Y-m-d", strtotime($data['shipping_date'])) : null,
                'tracking_number' => $data['tracking_no'],
                'terms' => $data['terms'],
                'location_scale' => $data['location_of_sale'],
                'attachments' => json_encode($data['attachments']),
                'tags' => json_encode($data['tags']),
                'total_due' => floatval(str_replace(',', '', $data['total_amount'])),
                'balance' => floatval(str_replace(',', '', $data['total_amount'])),
                'deposit_request' => $data['deposit_amount'],
                'deposit_request_type' => $data['deposit_request_type'],
                'payment_methods' => $credit_card.','.$bank_transfer.','.$instapay.','.$check.','.$cash.','.$deposit,
                'message_to_customer' => $data['message_to_customer'],
                'terms_and_conditions' => $data['terms_and_conditions'],
                'company_id' => logged('company_id'),
                'is_recurring' => isset($data['template_name']) ? 1 : 0,
                'user_id' => logged('id'),
                'sub_total' => floatval(str_replace(',', '', $data['subtotal'])),
                'taxes' => floatval(str_replace(',', '', $data['tax_total'])),
                'adjustment_name' => $data['adjustment_name'],
                'adjustment_value' => $data['adjustment_value'],
                'grand_total' => floatval(str_replace(',', '', $data['total_amount'])),
            ];

            $invoiceId = $this->invoice_model->createInvoice($invoiceData);

            if($invoiceId) {
                if(isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'invoice',
                        'txn_id' => $invoiceId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                } else {
                    $new_status_data = array(
                        "invoice_id" => $invoiceId,
                        "status" => $data['status'],
                        "note" => "First status"
                    );
                    $this->invoice_model->new_invoice_status($new_status_data);

                    if(!is_null($data['linked_transaction'])) {
                        $linkedTransacsData = [];
                        foreach($data['linked_transaction'] as $linkedTransac) {
                            $explode = explode('-', $linkedTransac);
        
                            if($explode[0] === 'delayed_credit') {
                                $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($explode[1]);
        
                                $creditData = [
                                    'status' => 2
                                ];
        
                                $creditUpdate = $this->accounting_delayed_credit_model->updateDelayedCredit($delayedCredit->id, $creditData);
                            } else {
                                $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($explode[1]);
        
                                $chargeData = [
                                    'status' => 2
                                ];
        
                                $chargeUpdate = $this->accounting_delayed_charge_model->updateDelayedCharge($delayedCharge->id, $chargeData);
                            }

                            $linkedTransacsData[] = [
                                'linked_to_type' => 'invoice',
                                'linked_to_id' => $invoiceId,
                                'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                                'linked_transaction_id' => $explode[1]
                            ];
                        }

                        $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
                    }

                    $arAcc = $this->chart_of_accounts_model->get_accounts_receivable_account(logged('company_id'));
                    $newBalance = floatval(str_replace(',', '', $arAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));

                    $arAccData = [
                        'id' => $arAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($arAccData);

                    $accTransacData = [
                        'account_id' => $arAcc->id,
                        'transaction_type' => 'Invoice',
                        'transaction_id' => $invoiceId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                        'type' => 'increase'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                }

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Invoice',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $invoiceId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Invoice',
                            'transaction_id' => $invoiceId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                foreach($data['item'] as $key => $input) {
                    $linkedTransaction = $data['item_linked'][$key] !== '' ? explode('-', $data['item_linked'][$key]) : null;

                    $explode = explode('-', $input);

                    if($explode[0] === 'package') {
                        $package = $this->items_model->get_package_by_id($explode[1]);
                        $packageItems = $this->items_model->get_package_items($explode[1]);

                        $pItemDetails = [];
                        foreach($packageItems as $i => $packageItem) {
                            $pItem = $this->items_model->getItemById($packageItem->item_id)[0];
                            $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);

                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $packageItems[$i]->balance_change = floatval(str_replace(',', '', $pItem->cost)) * floatval($totalQty);
                            } else {
                                $packageItems[$i]->balance_change = floatval(str_replace(',', '', $item->price)) * floatval($totalQty);
                            }
                        }

                        $balanceChange = null;
                    } else {
                        $item = $this->items_model->getItemById($explode[1])[0];

                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $balanceChange = floatval(str_replace(',', '', $item->cost));
                        } else {
                            $balanceChange = floatval(str_replace(',', '', $data['item_total'][$key]));
                        }
                    }

                    $invoiceItem = [
                        'invoice_id' => $invoiceId,
                        'items_id' => $explode[0] === 'item' ? $explode[1] : '',
                        'location_id' => $data['location'][$key],
                        'qty' => $data['quantity'][$key],
                        'package_id' => $explode[0] === 'package' ? $explode[1] : '',
                        'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                        'cost' => $data['item_amount'][$key],
                        'tax' => $data['item_tax'][$key],
                        'discount' => $data['discount'][$key],
                        'total' => floatval(str_replace(',', '', $data['item_total'][$key])),
                        'tax_rate_used' => $data['item_tax'][$key],
                        'linked_transaction_type' => !is_null($linkedTransaction) ? $linkedTransaction[0] : null,
                        'linked_transaction_id' => !is_null($linkedTransaction) ? $linkedTransaction[1] : null,
                        'linked_transaction_item_id' => !is_null($linkedTransaction) ? $data['transac_item_id'][$key] : null,
                        'amount_balance_change' => $balanceChange
                    ];

                    $addInvoiceItem = $this->invoice_model->add_invoice_items($invoiceItem);

                    if(!is_null($linkedTransaction)) {
                        if($linkedTransaction[0] === 'delayed_credit') {
                            $transactionItem = $this->accounting_credit_memo_model->get_transaction_item_by_id($data['transac_item_id'][$key]);
                            $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($linkedTransaction[1]);

                            if(floatval(str_replace('-', '', $data['item_total'][$key])) > floatval($transactionItem->total)) {
                                $amount = floatval($transactionItem->total);
                            } else {
                                $amount = floatval(str_replace('-', '', $data['item_total'][$key]));
                            }

                            $creditData = [
                                'remaining_balance' => floatval($delayedCredit->remaining_balance) - $amount
                            ];

                            $balUpdate = $this->accounting_delayed_credit_model->updateDelayedCredit($delayedCredit->id, $creditData);
                        } else {
                            $transactionItem = $this->accounting_credit_memo_model->get_transaction_item_by_id($data['transac_item_id'][$key]);
                            $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($linkedTransaction[1]);

                            if(floatval($data['item_total'][$key]) > floatval($transactionItem->total)) {
                                $amount = floatval($transactionItem->total);
                            } else {
                                $amount = floatval($data['item_total'][$key]);
                            }

                            $chargeData = [
                                'remaining_balance' => floatval($delayedCharge->remaining_balance) - $amount
                            ];

                            $balUpdate = $this->accounting_delayed_charge_model->updateDelayedCharge($delayedCharge->id, $chargeData);
                        }
                    }

                    if(!isset($data['template_name'])) {
                        if($explode[0] === 'item') {
                            $itemAccDetails = $this->items_model->getItemAccountingDetails($explode[1]);

                            if ($itemAccDetails) {
                                if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                    $location = $this->items_model->getItemLocation($data['location'][$key], $explode[1]);
                                    $newQty = intval($location->qty) - intval($data['quantity'][$key]);
                                    $this->items_model->updateLocationQty($data['location'][$key], $explode[1], $newQty);

                                    $amount = floatval(str_replace(',', '', $item->cost)) * floatval($data['quantity'][$key]);

                                    $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - $amount;
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $invAssetAccData = [
                                        'id' => $invAssetAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                    $accTransacData = [
                                        'account_id' => $invAssetAcc->id,
                                        'transaction_type' => 'Invoice',
                                        'transaction_id' => $invoiceId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                        'type' => 'decrease',
                                        'is_item_category' => 1,
                                        'child_id' => $addInvoiceItem
                                    ];
        
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                } else {
                                    $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                    $incomeAccType = $this->account_model->getById($incomeAcc->account_id);

                                    $amount = floatval($data['item_amount'][$key]) * floatval($data['quantity'][$key]);

                                    if ($incomeAccType->account_name === 'Credit Card') {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                                    } else {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $incomeAccData = [
                                        'id' => $incomeAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                    $accTransacData = [
                                        'account_id' => $incomeAcc->id,
                                        'transaction_type' => 'Invoice',
                                        'transaction_id' => $invoiceId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                        'type' => 'decrease',
                                        'is_item_category' => 1,
                                        'child_id' => $addInvoiceItem
                                    ];
        
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                }
                            }
                        } else {
                            foreach($packageItems as $packageItem) {
                                $item = $this->items_model->getItemById($packageItem->item_id)[0];
                                $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                                $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);

                                if ($itemAccDetails) {
                                    if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                        $location = $this->items_model->get_first_location($packageItem->item_id);
                                        $newQty = intval($location->qty) - intval($totalQty);
                                        $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);

                                        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->cost)) * floatval($totalQty);
                                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - floatval(str_replace(',', '', $totalAmount));
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $invAssetAccData = [
                                            'id' => $invAssetAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                        $accTransacData = [
                                            'account_id' => $invAssetAcc->id,
                                            'transaction_type' => 'Invoice',
                                            'transaction_id' => $invoiceId,
                                            'amount' => floatval(str_replace(',', '', $totalAmount)),
                                            'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                            'type' => 'decrease',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $addInvoiceItem
                                        ];
            
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    } else {
                                        $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                        $incomeAccType = $this->account_model->getById($incomeAcc->account_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->price)) * floatval($totalQty);

                                        if ($incomeAccType->account_name === 'Credit Card') {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval($totalAmount);
                                        } else {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval($totalAmount);
                                        }
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $incomeAccData = [
                                            'id' => $incomeAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                        $accTransacData = [
                                            'account_id' => $incomeAcc->id,
                                            'transaction_type' => 'Invoice',
                                            'transaction_id' => $invoiceId,
                                            'amount' => floatval(str_replace(',', '', $totalAmount)),
                                            'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                            'type' => 'decrease',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $addInvoiceItem
                                        ];
            
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            $return = [];
            $return['data'] = $invoiceId;
            $return['success'] = $invoiceId ? true : false;
            $return['message'] = $invoiceId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function receive_payment($data)
    {
        $this->form_validation->set_rules('customer', 'Customer', 'required');
        $this->form_validation->set_rules('deposit_to_account', 'Deposit to', 'required');

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $paymentData = [
                'company_id' => logged('company_id'),
                'customer_id' => $data['customer'],
                'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'payment_method' => $data['payment_method'],
                'ref_no' => $data['ref_no'],
                'deposit_to' => $data['deposit_to_account'],
                'amount_received' => floatval(str_replace(',', '', $data['received_amount'])),
                'amount_to_credit' => floatval(str_replace(',', '', $data['amount_to_credit'])),
                'amount_to_apply' => floatval(str_replace(',', '', $data['amount_to_apply'])),
                'credit_balance' => floatval(str_replace(',', '', $data['amount_to_credit'])),
                'memo' => $data['memo'],
                'status' => 1
            ];

            $paymentId = $this->accounting_receive_payment_model->createReceivePayment($paymentData);

            if($paymentId) {
                $depositToAcc = $this->chart_of_accounts_model->getById($data['deposit_to_account']);
                $depositToAccType = $this->account_model->getById($depositToAcc->account_id);

                if ($depositToAccType->account_name === 'Credit Card') {
                    $newBalance = floatval(str_replace(',', '', $depositToAcc->balance)) - floatval(str_replace(',', '', $data['received_amount']));
                } else {
                    $newBalance = floatval(str_replace(',', '', $depositToAcc->balance)) + floatval(str_replace(',', '', $data['received_amount']));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $depositToAccData = [
                    'id' => $depositToAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($depositToAccData);

                $arAcc = $this->chart_of_accounts_model->get_accounts_receivable_account(logged('company_id'));
                $newBalance = floatval(str_replace(',', '', $arAcc->balance)) - floatval(str_replace(',', '', $data['received_amount']));

                $arAccData = [
                    'id' => $arAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($arAccData);

                $accTransacData = [
                    'account_id' => $arAcc->id,
                    'transaction_type' => 'Payment',
                    'transaction_id' => $paymentId,
                    'amount' => floatval(str_replace(',', '', $data['received_amount'])),
                    'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Payment',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $paymentId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                $paymentCredits = [];
                $paymentInvoices = [];
                if(isset($data['credits'])) {
                    foreach($data['credits'] as $key => $transaction) {
                        $transaction = explode('_', $transaction);
    
                        switch($transaction[0]) {
                            case 'credit-memo' :
                                $paymentCredits[] = [
                                    'receive_payment_id' => $paymentId,
                                    'credit_memo_id' => $transaction[1],
                                    'payment_amount' => floatval(str_replace(',', '', $data['credit_payment'][$key]))
                                ];
    
                                $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($transaction[1]);
                                $balance = floatval(str_replace(',', '', $creditMemo->balance)) - floatval(str_replace(',', '', $data['credit_payment'][$key]));
    
                                $creditMemoData = [
                                    'balance' => floatval(str_replace(',', '', $balance))
                                ];
                                $this->accounting_credit_memo_model->updateCreditMemo($creditMemo->id, $creditMemoData);
                            break;
                            case 'unapplied-payment' :
                                $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($transaction[1]);
                                $balance = floatval(str_replace(',', '', $payment->credit_balance)) - floatval(str_replace(',', '', $data['credit_payment'][$key]));
    
                                $paymentData = [
                                    'credit_balance' => floatval(str_replace(',', '', $balance))
                                ];
    
                                $this->accounting_receive_payment_model->update_receive_payment_details($payment->id, $paymentData);
    
                                $creditPayment = floatval(str_replace(',', '', $data['credit_payment'][$key]));
                                for($i = count($data['invoice']) - 1; $creditPayment > 0; $i--) {
                                    $invoiceId = $data['invoice'][$i];
                                    $invoicePayment = $data['payment'][$i];
    
                                    if(floatval($invoicePayment) > $creditPayment) {
                                        $paymentAmount = floatval(str_replace(',', '', $creditPayment));
                                        $data['payment'][$i] = floatval(str_replace(',', '', $invoicePayment)) - $creditPayment;
                                        $creditPayment = 0.00;
                                    } else {
                                        $paymentAmount = floatval(str_replace(',', '', $invoicePayment));
                                        $data['payment'][$i] = 0.00;
                                        $creditPayment -= floatval(str_replace(',', '', $invoicePayment));
                                    }
    
                                    $paymentInvoices[] = [
                                        'receive_payment_id' => $payment->id,
                                        'invoice_id' => $invoiceId,
                                        'payment_amount' => floatval(str_replace(',', '', $paymentAmount))
                                    ];
    
                                    $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($invoiceId);
                                    $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);
    
                                    $paymentAmounts = array_column($paymentRecords, 'invoice_amount');
                                    $totalPayment = array_sum($paymentAmounts);
    
                                    $balance = floatval(str_replace(',', '', $invoice->grand_total)) - floatval(str_replace(',', '', $totalPayment));
                                    $balance -= floatval(str_replace(',', '', $data['payment'][$i]));
    
                                    if($balance === 0.00) {
                                        $status = 'Paid';
                                    } else {
                                        if(floatval(str_replace(',', '', $invoice->grand_total)) > $balance) {
                                            $status = 'Partially Paid';
                                        }
                                    }
    
                                    $invoiceData = [
                                        'balance' => floatval(str_replace(',', '', $balance)),
                                        'status' => isset($status) ? $status : $invoice->status
                                    ];
                                    $this->accounting_invoices_model->updateInvoices($invoiceId, $invoiceData);
    
                                    $this->payment_records_model->create([
                                        'user_id' => logged('id'),
                                        'company_id' => logged('company_id'),
                                        'customer_id' => $data['customer'],
                                        'invoice_amount' => floatval(str_replace(',', '', $paymentAmount)),
                                        'invoice_tip' => 0.00,
                                        'payment_date' => date("Y-m-d", strtotime($payment->payment_date)),
                                        'payment_method' => !is_null($payment->payment_method) ? $payment->payment_method : 'cash',
                                        'invoice_number' => $invoice->invoice_number,
                                        'reference_number' => '',
                                        'notes' => ''
                                    ]);
    
                                    if(floatval($data['payment'][$i]) === 0) {
                                        unset($data['invoice'][$i]);
                                        unset($data['payment'][$i]);
                                    }
                                }
                            break;
                        }
                    }
                }

                if(count($paymentCredits) > 0) {
                    $this->accounting_receive_payment_model->add_payment_credits($paymentCredits);
                }

                if(isset($data['invoice'])) {
                    foreach($data['invoice'] as $key => $invoiceId) {
                        $paymentInvoices[] = [
                            'receive_payment_id' => $paymentId,
                            'invoice_id' => $invoiceId,
                            'payment_amount' => floatval(str_replace(',', '', $data['payment'][$key]))
                        ];
    
                        $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($invoiceId);
                        $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);
    
                        $paymentAmounts = array_column($paymentRecords, 'invoice_amount');
                        $totalPayment = array_sum($paymentAmounts);
    
                        $balance = floatval(str_replace(',', '', $invoice->grand_total)) - floatval(str_replace(',', '', $totalPayment));
                        $balance -= floatval(str_replace(',', '', $data['payment'][$key]));
    
                        if($balance === 0.00) {
                            $status = 'Paid';
                        } else {
                            if(floatval($invoice->grand_total) > $balance) {
                                $status = 'Partially Paid';
                            }
                        }
    
                        $invoiceData = [
                            'balance' => floatval(str_replace(',', '', $balance)),
                            'status' => isset($status) ? $status : $invoice->status
                        ];
                        $this->accounting_invoices_model->updateInvoices($invoiceId, $invoiceData);
    
                        $this->payment_records_model->create([
                            'user_id' => logged('id'),
                            'company_id' => logged('company_id'),
                            'customer_id' => $data['customer'],
                            'invoice_amount' => floatval(str_replace(',', '', $data['payment'][$key])),
                            'invoice_tip' => 0.00,
                            'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
                            'payment_method' => !is_null($data['payment_method']) ? $data['payment_method'] : 'cash',
                            'invoice_number' => $invoice->invoice_number,
                            'reference_number' => '',
                            'notes' => ''
                        ]);
                    }
                }

                if(count($paymentInvoices) > 0) {
                    $this->accounting_receive_payment_model->add_payment_invoices($paymentInvoices);
                }
            }

            $return = [];
            $return['data'] = $paymentId;
            $return['success'] = $paymentId ? true : false;
            $return['message'] = $paymentId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function credit_memo($data)
    {
        $this->form_validation->set_rules('item[]', 'Item', 'required');

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('credit_memo_date', 'Credit memo date', 'required');
        }

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $creditMemoData = [
                'company_id' => logged('company_id'),
                'customer_id' => $data['customer'],
                'email' => $data['email'],
                'send_later' => !isset($data['template_name']) ? $data['send_later'] : null,
                'credit_memo_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['credit_memo_date'])) : null,
                'billing_address' => nl2br($data['billing_address']),
                'location_of_sale' => $data['location_of_sale'],
                'po_number' => $data['purchase_order_no'],
                'sales_rep' => $data['sales_rep'],
                'message_credit_memo' => $data['message_credit_memo'],
                'message_on_statement' => $data['message_on_statement'],
                'adjustment_name' => $data['adjustment_name'],
                'adjustment_value' => $data['adjustment_value'],
                'balance' => floatval(str_replace(',', '', $data['total_amount'])),
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
                'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
                'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];

            $creditMemoId = $this->accounting_credit_memo_model->createCreditMemo($creditMemoData);

            if($creditMemoId) {
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Credit Memo',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $creditMemoId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Credit Memo',
                            'transaction_id' => $creditMemoId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if(isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'credit memo',
                        'txn_id' => $creditMemoId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                } else {
                    $arAcc = $this->chart_of_accounts_model->get_accounts_receivable_account(logged('company_id'));
                    $newBalance = floatval(str_replace(',', '', $arAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));

                    $arAccData = [
                        'id' => $arAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($arAccData);

                    $accTransacData = [
                        'account_id' => $arAcc->id,
                        'transaction_type' => 'Credit Memo',
                        'transaction_id' => $creditMemoId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['credit_memo_date'])),
                        'type' => 'decrease'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                }

                $items = [];
                foreach($data['item'] as $key => $input) {
                    $explode = explode('-', $input);

                    if($explode[0] === 'package') {
                        $packageItems = $this->items_model->get_package_items($explode[1]);
                    }

                    // $items[] = [
                    $item = [
                        'transaction_type' => 'Credit Memo',
                        'transaction_id' => $creditMemoId,
                        'item_id' => $explode[0] === 'item' ? $explode[1] : null,
                        'package_id' => $explode[0] === 'package' ? $explode[1] : null,
                        'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                        'location_id' => $data['location'][$key],
                        'quantity' => $data['quantity'][$key],
                        'price' => $data['item_amount'][$key],
                        'discount' => $data['discount'][$key],
                        'tax' => $data['item_tax'][$key],
                        'total' => floatval(str_replace(',', '', $data['item_total'][$key]))
                    ];

                    $itemId = $this->accounting_credit_memo_model->insert_transaction_item($item);

                    if(!isset($data['template_name'])) {
                        if($explode[0] === 'item') {
                            $item = $this->items_model->getItemById($explode[1])[0];
                            $itemAccDetails = $this->items_model->getItemAccountingDetails($explode[1]);

                            if ($itemAccDetails) {
                                if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                    $location = $this->items_model->getItemLocation($data['location'][$key], $explode[1]);
                                    $newQty = intval($location->qty) + intval($data['quantity'][$key]);
                                    $this->items_model->updateLocationQty($data['location'][$key], $explode[1], $newQty);

                                    $amount = floatval(str_replace(',', '', $item->cost)) * floatval($data['quantity'][$key]);
                                    $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + $amount;
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $invAssetAccData = [
                                        'id' => $invAssetAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                    $accTransacData = [
                                        'account_id' => $invAssetAcc->id,
                                        'transaction_type' => 'Credit Memo',
                                        'transaction_id' => $creditMemoId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['credit_memo_date'])),
                                        'type' => 'increase',
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
        
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                } else {
                                    $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                    $incomeAccType = $this->account_model->getById($incomeAcc->account_id);

                                    $amount = floatval($data['item_amount'][$key]) * floatval($data['quantity'][$key]);

                                    if ($incomeAccType->account_name === 'Credit Card') {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                                    } else {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $incomeAccData = [
                                        'id' => $incomeAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                    $accTransacData = [
                                        'account_id' => $incomeAcc->id,
                                        'transaction_type' => 'Credit Memo',
                                        'transaction_id' => $creditMemoId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['credit_memo_date'])),
                                        'type' => 'decrease',
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
        
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                }
                            }
                        } else {
                            $package = $this->items_model->get_package_by_id($explode[1]);

                            foreach($packageItems as $packageItem) {
                                $item = $this->items_model->getItemById($packageItem->item_id)[0];
                                $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                                $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);

                                if ($itemAccDetails) {
                                    if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                        $location = $this->items_model->get_first_location($packageItem->item_id);
                                        $newQty = intval($location->qty) + intval($totalQty);
                                        $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);

                                        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->cost)) * floatval($totalQty);
                                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + floatval($totalAmount);
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $invAssetAccData = [
                                            'id' => $invAssetAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                        $accTransacData = [
                                            'account_id' => $invAssetAcc->id,
                                            'transaction_type' => 'Credit Memo',
                                            'transaction_id' => $creditMemoId,
                                            'amount' => floatval($totalAmount),
                                            'transaction_date' => date("Y-m-d", strtotime($data['credit_memo_date'])),
                                            'type' => 'increase',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $itemId
                                        ];
            
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    } else {
                                        $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                        $incomeAccType = $this->account_model->getById($incomeAcc->account_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->price)) * floatval($totalQty);

                                        if ($incomeAccType->account_name === 'Credit Card') {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval($totalAmount);
                                        } else {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval($totalAmount);
                                        }
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $incomeAccData = [
                                            'id' => $incomeAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                        $accTransacData = [
                                            'account_id' => $incomeAcc->id,
                                            'transaction_type' => 'Credit Memo',
                                            'transaction_id' => $creditMemoId,
                                            'amount' => floatval($totalAmount),
                                            'transaction_date' => date("Y-m-d", strtotime($data['credit_memo_date'])),
                                            'type' => 'decrease',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $itemId
                                        ];
            
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    }
                                }
                            }
                        }
                    }
                }

                // $this->accounting_credit_memo_model->insert_transaction_items($items);
            }
    
            $return['data'] = $creditMemoId;
            $return['success'] = $creditMemoId ? true : false;
            $return['message'] = $creditMemoId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function sales_receipt($data)
    {
        $this->form_validation->set_rules('item[]', 'Item', 'required');

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('sales_receipt_date', 'Sales receipt date', 'required');
        }

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $salesReceiptData = [
                'company_id' => logged('company_id'),
                'customer_id' => $data['customer'],
                'email' => $data['email'],
                'send_later' => !isset($data['template_name']) ? $data['send_later'] : null,
                'billing_address' => nl2br($data['billing_address']),
                'sales_receipt_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['sales_receipt_date'])) : null,
                'location_of_sale' => $data['location_of_sale'],
                'po_number' => $data['purchase_order_no'],
                'sales_rep' => $data['sales_rep'],
                'payment_method' => $data['payment_method'],
                'ref_no' => $data['ref_no'],
                'deposit_to_account' => $data['deposit_to_account'],
                'message_sales_receipt' => $data['message_sales_receipt'],
                'message_on_statement' => $data['message_on_statement'],
                'adjustment_name' => $data['adjustment_name'],
                'adjustment_value' => $data['adjustment_value'],
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
                'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
                'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];

            $salesReceiptId = $this->accounting_sales_receipt_model->createSalesReceipts($salesReceiptData);

            if($salesReceiptId) {
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Sales Receipt',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $salesReceiptId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Sales Receipt',
                            'transaction_id' => $salesReceiptId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if(isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'auto_send_emails' => $data['auto_send_emails'],
                        'print_later' => $data['print_later'],
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'sales receipt',
                        'txn_id' => $salesReceiptId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                } else {
                    $depositAcc = $this->chart_of_accounts_model->getById($data['deposit_to_account']);
                    $depositAccType = $this->account_model->getById($depositAcc->account_id);

                    if ($depositAccType->account_name === 'Credit Card') {
                        $newBalance = floatval(str_replace(',', '', $depositAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
                    } else {
                        $newBalance = floatval(str_replace(',', '', $depositAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $depositAccData = [
                        'id' => $depositAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($depositAccData);

                    $accTransacData = [
                        'account_id' => $depositAcc->id,
                        'transaction_type' => 'Sales Receipt',
                        'transaction_id' => $salesReceiptId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['sales_receipt_date'])),
                        'type' => 'increase'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                }

                $items = [];
                foreach($data['item'] as $key => $input) {
                    $explode = explode('-', $input);

                    if($explode[0] === 'package') {
                        $packageItems = $this->items_model->get_package_items($explode[1]);
                    }

                    // $items[] = [
                    $item = [
                        'transaction_type' => 'Sales Receipt',
                        'transaction_id' => $salesReceiptId,
                        'item_id' => $explode[0] === 'item' ? $explode[1] : null,
                        'package_id' => $explode[0] === 'package' ? $explode[1] : null,
                        'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                        'location_id' => $data['location'][$key],
                        'quantity' => $data['quantity'][$key],
                        'price' => $data['item_amount'][$key],
                        'discount' => $data['discount'][$key],
                        'tax' => $data['item_tax'][$key],
                        'total' => floatval(str_replace(',', '', $data['item_total'][$key]))
                    ];

                    $itemId = $this->accounting_credit_memo_model->insert_transaction_item($item);;

                    if(!isset($data['template_name'])) {
                        if($explode[0] === 'item') {
                            $item = $this->items_model->getItemById($explode[1])[0];
                            $itemAccDetails = $this->items_model->getItemAccountingDetails($explode[1]);

                            if ($itemAccDetails) {
                                if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                    $location = $this->items_model->getItemLocation($data['location'][$key], $explode[1]);
                                    $newQty = intval($location->qty) - intval($data['quantity'][$key]);
                                    $this->items_model->updateLocationQty($data['location'][$key], $explode[1], $newQty);

                                    $amount = floatval(str_replace(',', '', $item->cost)) * floatval($data['quantity'][$key]);

                                    $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - $amount;
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $invAssetAccData = [
                                        'id' => $invAssetAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                    $accTransacData = [
                                        'account_id' => $invAssetAcc->id,
                                        'transaction_type' => 'Sales Receipt',
                                        'transaction_id' => $salesReceiptId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['sales_receipt_date'])),
                                        'type' => 'decrease',
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
                
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                } else {
                                    $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                    $incomeAccType = $this->account_model->getById($incomeAcc->account_id);

                                    $amount = floatval($data['item_amount'][$key]) * floatval($data['quantity'][$key]);

                                    if ($incomeAccType->account_name === 'Credit Card') {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                                    } else {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $incomeAccData = [
                                        'id' => $incomeAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                    $accTransacData = [
                                        'account_id' => $incomeAcc->id,
                                        'transaction_type' => 'Sales Receipt',
                                        'transaction_id' => $salesReceiptId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['sales_receipt_date'])),
                                        'type' => 'decrease',
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
                
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                }
                            }
                        } else {
                            $package = $this->items_model->get_package_by_id($explode[1]);

                            foreach($packageItems as $packageItem) {
                                $item = $this->items_model->getItemById($packageItem->item_id)[0];
                                $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                                $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);

                                if ($itemAccDetails) {
                                    if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                        $location = $this->items_model->get_first_location($packageItem->item_id);
                                        $newQty = intval($location->qty) - intval($totalQty);
                                        $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);

                                        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->cost)) * floatval($totalQty);
                                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - floatval($totalAmount);
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $invAssetAccData = [
                                            'id' => $invAssetAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                        $accTransacData = [
                                            'account_id' => $invAssetAcc->id,
                                            'transaction_type' => 'Sales Receipt',
                                            'transaction_id' => $salesReceiptId,
                                            'amount' => floatval($totalAmount),
                                            'transaction_date' => date("Y-m-d", strtotime($data['sales_receipt_date'])),
                                            'type' => 'decrease',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $itemId
                                        ];
                    
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    } else {
                                        $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                        $incomeAccType = $this->account_model->getById($incomeAcc->account_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->price)) * floatval($totalQty);

                                        if ($incomeAccType->account_name === 'Credit Card') {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval($totalAmount);
                                        } else {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval($totalAmount);
                                        }
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $incomeAccData = [
                                            'id' => $incomeAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                        $accTransacData = [
                                            'account_id' => $incomeAcc->id,
                                            'transaction_type' => 'Sales Receipt',
                                            'transaction_id' => $salesReceiptId,
                                            'amount' => floatval($totalAmount),
                                            'transaction_date' => date("Y-m-d", strtotime($data['sales_receipt_date'])),
                                            'type' => 'decrease',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $itemId
                                        ];
                    
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    }
                                }
                            }
                        }
                    }
                }

                // $this->accounting_credit_memo_model->insert_transaction_items($items);
            }
    
            $return['data'] = $salesReceiptId;
            $return['success'] = $salesReceiptId ? true : false;
            $return['message'] = $salesReceiptId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function refund_receipt($data)
    {
        $this->form_validation->set_rules('item[]', 'Item', 'required');

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('refund_receipt_date', 'Refund receipt date', 'required');
        }

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $refundReceiptData = [
                'company_id' => logged('company_id'),
                'customer_id' => $data['customer'],
                'email' => $data['email'],
                'billing_address' => nl2br($data['billing_address']),
                'refund_receipt_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['refund_receipt_date'])) : null,
                'location_of_sale' => $data['location_of_sale'],
                'po_number' => $data['purchase_order_no'],
                'sales_rep' => $data['sales_rep'],
                'payment_method' => $data['payment_method'],
                'refund_from_account' => $data['refund_from_account'],
                'check_no' => !is_null($data['print_later']) ? null : $data['check_no'],
                'print_later' => $data['print_later'],
                'message_refund_receipt' => $data['message_refund_receipt'],
                'message_on_statement' => $data['message_on_statement'],
                'adjustment_name' => $data['adjustment_name'],
                'adjustment_value' => $data['adjustment_value'],
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
                'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
                'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];

            $refundReceiptId = $this->accounting_refund_receipt_model->createRefundReceipts($refundReceiptData);

            if($refundReceiptId) {
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Refund Receipt',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $refundReceiptId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Refund Receipt',
                            'transaction_id' => $refundReceiptId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if(isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'refund',
                        'txn_id' => $refundReceiptId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                } else {
                    $refundAcc = $this->chart_of_accounts_model->getById($data['refund_from_account']);
                    $refundAccType = $this->account_model->getById($refundAcc->account_id);

                    if ($refundAccType->account_name === 'Credit Card') {
                        $newBalance = floatval(str_replace(',', '', $refundAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));
                    } else {
                        $newBalance = floatval(str_replace(',', '', $refundAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $refundAccData = [
                        'id' => $refundAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($refundAccData);

                    $accTransacData = [
                        'account_id' => $refundAcc->id,
                        'transaction_type' => 'Refund Receipt',
                        'transaction_id' => $refundReceiptId,
                        'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                        'transaction_date' => date("Y-m-d", strtotime($data['refund_receipt_date'])),
                        'type' => 'decrease'
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                }

                $items = [];
                foreach($data['item'] as $key => $input) {
                    $explode = explode('-', $input);

                    if($explode[0] === 'package') {
                        $packageItems = $this->items_model->get_package_items($explode[1]);
                    }

                    $items[] = [
                        'transaction_type' => 'Refund Receipt',
                        'transaction_id' => $refundReceiptId,
                        'item_id' => $explode[0] === 'item' ? $explode[1] : null,
                        'package_id' => $explode[0] === 'package' ? $explode[1] : null,
                        'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                        'location_id' => $data['location'][$key],
                        'quantity' => $data['quantity'][$key],
                        'price' => $data['item_amount'][$key],
                        'discount' => $data['discount'][$key],
                        'tax' => $data['item_tax'][$key],
                        'total' => floatval(str_replace(',', '', $data['item_total'][$key]))
                    ];

                    if(!isset($data['template_name'])) {
                        if($explode[0] === 'item') {
                            $item = $this->items_model->getItemById($explode[1])[0];
                            $itemAccDetails = $this->items_model->getItemAccountingDetails($explode[1]);

                            if ($itemAccDetails) {
                                if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                    $location = $this->items_model->getItemLocation($data['location'][$key], $explode[1]);
                                    $newQty = intval($location->qty) + intval($data['quantity'][$key]);
                                    $this->items_model->updateLocationQty($data['location'][$key], $explode[1], $newQty);

                                    $amount = floatval(str_replace(',', '', $item->cost)) * floatval($data['quantity'][$key]);

                                    $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + $amount;
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $invAssetAccData = [
                                        'id' => $invAssetAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                    $accTransacData = [
                                        'account_id' => $invAssetAcc->id,
                                        'transaction_type' => 'Refund Receipt',
                                        'transaction_id' => $refundReceiptId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['refund_receipt_date'])),
                                        'type' => 'increase',
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
                
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                } else {
                                    $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                    $incomeAccType = $this->account_model->getById($incomeAcc->account_id);

                                    $amount = floatval($data['item_amount'][$key]) * floatval($data['quantity'][$key]);

                                    if ($incomeAccType->account_name === 'Credit Card') {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                                    } else {
                                        $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');

                                    $incomeAccData = [
                                        'id' => $incomeAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                    $accTransacData = [
                                        'account_id' => $incomeAcc->id,
                                        'transaction_type' => 'Refund Receipt',
                                        'transaction_id' => $refundReceiptId,
                                        'amount' => $amount,
                                        'transaction_date' => date("Y-m-d", strtotime($data['refund_receipt_date'])),
                                        'type' => 'increase',
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
                
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                }
                            }
                        } else {
                            $package = $this->items_model->get_package_by_id($explode[1]);

                            foreach($packageItems as $packageItem) {
                                $item = $this->items_model->getItemById($packageItem->item_id)[0];
                                $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                                $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);

                                if ($itemAccDetails) {
                                    if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                        $location = $this->items_model->get_first_location($packageItem->item_id);
                                        $newQty = intval($location->qty) + intval($totalQty);
                                        $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);

                                        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->cost)) * floatval($totalQty);
                                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + floatval($totalAmount);
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $invAssetAccData = [
                                            'id' => $invAssetAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                        $accTransacData = [
                                            'account_id' => $invAssetAcc->id,
                                            'transaction_type' => 'Refund Receipt',
                                            'transaction_id' => $refundReceiptId,
                                            'amount' => floatval($totalAmount),
                                            'transaction_date' => date("Y-m-d", strtotime($data['refund_receipt_date'])),
                                            'type' => 'increase',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $itemId
                                        ];
                    
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    } else {
                                        $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                        $incomeAccType = $this->account_model->getById($incomeAcc->account_id);
                                        $totalAmount = floatval(str_replace(',', '', $item->price)) * floatval($totalQty);

                                        if ($incomeAccType->account_name === 'Credit Card') {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval($totalAmount);
                                        } else {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval($totalAmount);
                                        }
                                        $newBalance = number_format($newBalance, 2, '.', ',');

                                        $incomeAccData = [
                                            'id' => $incomeAcc->id,
                                            'company_id' => logged('company_id'),
                                            'balance' => floatval(str_replace(',', '', $newBalance))
                                        ];

                                        $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                        $accTransacData = [
                                            'account_id' => $incomeAcc->id,
                                            'transaction_type' => 'Refund Receipt',
                                            'transaction_id' => $refundReceiptId,
                                            'amount' => floatval($totalAmount),
                                            'transaction_date' => date("Y-m-d", strtotime($data['refund_receipt_date'])),
                                            'type' => 'increase',
                                            'is_item_category' => 1,
                                            'is_in_package' => 1,
                                            'child_id' => $itemId
                                        ];
                    
                                        $this->accounting_account_transactions_model->create($accTransacData);
                                    }
                                }
                            }
                        }
                    }
                }

                $this->accounting_credit_memo_model->insert_transaction_items($items);
            }
    
            $return['data'] = $refundReceiptId;
            $return['success'] = $refundReceiptId ? true : false;
            $return['message'] = $refundReceiptId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function delayed_credit($data)
    {
        $this->form_validation->set_rules('item[]', 'Item', 'required');
        $this->form_validation->set_rules('customer', 'Customer', 'required');

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('delayed_credit_date', 'Delayed credit date', 'required');
        }

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $delayedCreditData = [
                'company_id' => logged('company_id'),
                'customer_id' => $data['customer'],
                'delayed_credit_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['delayed_credit_date'])) : null,
                'memo' => $data['memo'],
                'adjustment_name' => $data['adjustment_name'],
                'adjustment_value' => $data['adjustment_value'],
                'remaining_balance' => floatval(str_replace(',', '', $data['total_amount'])),
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
                'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
                'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];

            $delayedCreditId = $this->accounting_delayed_credit_model->createDelayedCredit($delayedCreditData);

            if($delayedCreditId) {
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Delayed Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $delayedCreditId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Delayed Credit',
                            'transaction_id' => $delayedCreditId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if(isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'npcredit',
                        'txn_id' => $delayedCreditId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                $items = [];
                foreach($data['item'] as $key => $input) {
                    $explode = explode('-', $input);

                    if($explode[0] === 'package') {
                        $packageItems = $this->items_model->get_package_items($explode[1]);
                    }

                    $items[] = [
                        'transaction_type' => 'Delayed Credit',
                        'transaction_id' => $delayedCreditId,
                        'item_id' => $explode[0] === 'item' ? $explode[1] : null,
                        'package_id' => $explode[0] === 'package' ? $explode[1] : null,
                        'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                        'location_id' => $data['location'][$key],
                        'quantity' => $data['quantity'][$key],
                        'price' => $data['item_amount'][$key],
                        'discount' => $data['discount'][$key],
                        'tax' => $data['item_tax'][$key],
                        'total' => floatval(str_replace(',', '', $data['item_total'][$key])),
                        'remaining_balance' => floatval(str_replace(',', '', $data['item_total'][$key]))
                    ];
                }

                $this->accounting_credit_memo_model->insert_transaction_items($items);
            }
    
            $return['data'] = $delayedCreditId;
            $return['success'] = $delayedCreditId ? true : false;
            $return['message'] = $delayedCreditId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function delayed_charge($data)
    {
        $this->form_validation->set_rules('item[]', 'Item', 'required');
        $this->form_validation->set_rules('customer', 'Customer', 'required');

        if(isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('delayed_charge_date', 'Delayed charge date', 'required');
        }

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['item'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $delayedChargeData = [
                'company_id' => logged('company_id'),
                'customer_id' => $data['customer'],
                'delayed_charge_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['delayed_charge_date'])) : null,
                'memo' => $data['memo'],
                'adjustment_name' => $data['adjustment_name'],
                'adjustment_value' => $data['adjustment_value'],
                'remaining_balance' => floatval(str_replace(',', '', $data['total_amount'])),
                'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
                'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
                'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
                'recurring' => isset($data['template_name']) ? 1 : null,
                'status' => 1
            ];

            $delayedChargeId = $this->accounting_delayed_charge_model->createDelayedCharge($delayedChargeData);

            if($delayedChargeId) {
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $linkAttachmentData = [
                            'type' => 'Delayed Charge',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $delayedChargeId,
                            'order_no' => $order
                        ];

                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);

                        $order++;
                    }
                }

                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Delayed Charge',
                            'transaction_id' => $delayedChargeId,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];

                        $linkTagId = $this->tags_model->link_tag($linkTagData);

                        $order++;
                    }
                }

                if(isset($data['template_name'])) {
                    if($data['recurring_type'] !== 'unscheduled') {
                        $currentDate = date("m/d/Y");
                        $startDate = $data['start_date'] === '' ? $currentDate : date("m/d/Y", strtotime($data['start_date']));
                        $every = $data['recurr_every'];

                        switch($data['recurring_interval']) {
                            case 'daily' :
                                $next = $startDate;
                            break;
                            case 'weekly' :
                                $days = [
                                    'sunday',
                                    'monday',
                                    'tuesday',
                                    'wednesday',
                                    'thursday',
                                    'friday',
                                    'saturday'
                                ];
        
                                $day = $data['recurring_day'];
                                $dayNum = array_search($day, $days);
                                $next = $startDate;
        
                                if(intval(date("w", strtotime($next))) !== $dayNum) {
                                    do {
                                        $next = date("m/d/Y", strtotime("$next +1 day"));
                                    } while(intval(date("w", strtotime($next))) !== $dayNum);
                                }
                            break;
                            case 'monthly' :
                                if($data['recurring_week'] === 'day') {
                                    $day = $data['recurring_day'] === 'last' ? 't' : $data['recurring_day'];
                                    $next = date("m/$day/Y", strtotime($startDate));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/$day/Y", strtotime("$next +$every months"));
                                    }
                                } else {
                                    $week = $data['recurring_week'];
                                    $day = $data['recurring_day'];
                                    $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime($startDate))));

                                    if(strtotime($currentDate) > strtotime($next)) {
                                        $next = date("m/d/Y", strtotime("$week $day ".date("Y-m", strtotime("$startDate +$every months"))));
                                    }
                                }
                            break;
                            case 'yearly' :
                                $month = $data['recurring_month'];
                                $day = $data['recurring_day'];
                                $previous = date("$month/$day/Y", strtotime($startDate));
                                $next = date("$month/$day/Y", strtotime($startDate));

                                if(strtotime($currentDate) > strtotime($next)) {
                                    $next = date("$month/$day/Y", strtotime("$next +1 year"));
                                }
                            break;
                        }
                    }

                    $recurringData = [
                        'company_id' => getLoggedCompanyID(),
                        'template_name' => $data['template_name'],
                        'recurring_type' => $data['recurring_type'],
                        'days_in_advance' => $data['recurring_type'] !== 'unscheduled' ? $data['days_in_advance'] !== '' ? $data['days_in_advance'] : null : null,
                        'txn_type' => 'npcharge',
                        'txn_id' => $delayedChargeId,
                        'recurring_interval' => $data['recurring_interval'],
                        'recurring_month' => $data['recurring_interval'] === 'yearly' ? $data['recurring_month'] : null,
                        'recurring_week' => $data['recurring_interval'] === 'monthly' ? $data['recurring_week'] : null,
                        'recurring_day' => $data['recurring_interval'] !== 'daily' ? $data['recurring_day'] : null,
                        'recurr_every' => $data['recurring_interval'] !== 'yearly' ? $data['recurr_every'] : null,
                        'start_date' => $data['recurring_type'] !== 'unscheduled' ? ($data['start_date'] !== '' ? date('Y-m-d', strtotime($data['start_date'])) : null) : null,
                        'end_type' => $data['end_type'],
                        'end_date' => $data['end_type'] === 'by' ? date('Y-m-d', strtotime($data['end_date'])) : null,
                        'max_occurrences' => $data['end_type'] === 'after' ? $data['max_occurrence'] : null,
                        'current_occurrence' => 0,
                        'next_date' => date("Y-m-d", strtotime($next)),
                        'status' => 1
                    ];
    
                    $recurringId = $this->accounting_recurring_transactions_model->create($recurringData);
                }

                $items = [];
                foreach($data['item'] as $key => $input) {
                    $explode = explode('-', $input);

                    if($explode[0] === 'package') {
                        $packageItems = $this->items_model->get_package_items($explode[1]);
                    }

                    $items[] = [
                        'transaction_type' => 'Delayed Charge',
                        'transaction_id' => $delayedChargeId,
                        'item_id' => $explode[0] === 'item' ? $explode[1] : null,
                        'package_id' => $explode[0] === 'package' ? $explode[1] : null,
                        'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                        'location_id' => $data['location'][$key],
                        'quantity' => $data['quantity'][$key],
                        'price' => $data['item_amount'][$key],
                        'discount' => $data['discount'][$key],
                        'tax' => $data['item_tax'][$key],
                        'total' => floatval(str_replace(',', '', $data['item_total'][$key])),
                        'remaining_balance' => floatval(str_replace(',', '', $data['item_total'][$key]))
                    ];
                }

                $this->accounting_credit_memo_model->insert_transaction_items($items);
            }
    
            $return['data'] = $delayedChargeId;
            $return['success'] = $delayedChargeId ? true : false;
            $return['message'] = $delayedChargeId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function standard_estimate($data)
    {
        $this->form_validation->set_rules('item[]', 'Item', 'required');
        $this->form_validation->set_rules('customer', 'Customer', 'required');
        $this->form_validation->set_rules('estimate_no', 'Estimate #', 'required');
        $this->form_validation->set_rules('estimate_date', 'Estimate Date', 'required');
        $this->form_validation->set_rules('expiry_date', 'Expiry Date', 'required');
        $this->form_validation->set_rules('estimate_type', 'Estimate Type', 'required');
        $this->form_validation->set_rules('estimate_status', 'Estimate Status', 'required');

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $company_id  = getLoggedCompanyID();
            $user_id  = getLoggedUserID();
    
            $new_data = array(
                'customer_id' => $data['customer'],
                'job_location' => $data['job_location'],
                'job_name' => $data['job_name'],
                'estimate_number' => $data['estimate_no'],
                'estimate_date' => date("Y-m-d", strtotime($data['estimate_date'])),
                'expiry_date' => date("Y-m-d", strtotime($data['expiry_date'])),
                'purchase_order_number' => $data['purchase_order_no'],
                'status' => $data['estimate_status'],
                'estimate_type' => 'Standard',
                'type' => $data['estimate_type'],
                'attachments' => 'testing',
                'deposit_request' => $data['deposit_request'],
                'deposit_amount' => $data['deposit_amount'],
                'customer_message' => $data['customer_message'],
                'terms_conditions' => $data['terms_conditions'],
                'instructions' => $data['instructions'],
                'user_id' => $user_id,
                'company_id' => $company_id,
                'sub_total' => $data['subtotal'],
                'grand_total' => $data['total_amount'],
                'tax1_total' => $data['tax_total'],
                'adjustment_name' => $data['adjustment_name'],
                'adjustment_value' => $data['adjustment_value'],
                'markup_type' => '$',
                'markup_amount' => $data['markup_input_form']
            );
    
            $estimateId = $this->estimate_model->save_estimate($new_data);
    
            if($estimateId) {
                $a = $data['item'];
                $quantity = $data['quantity'];
                $price = $data['item_amount'];
                $tax = $data['item_tax'];
                $gtotal = $data['item_total'];
    
                $i = 0;
                foreach($a as $row){
                    $itemData['items_id'] = str_replace('item-', '', $a[$i]);
                    $itemData['qty'] = $quantity[$i];
                    $itemData['cost'] = $price[$i];
                    $itemData['tax'] = $tax[$i];
                    $itemData['total'] = $gtotal[$i];
                    $itemData['estimates_id '] = $estimateId;
                    $estimateItemId = $this->estimate_model->add_estimate_items($itemData);
                    $i++;
                }
    
                $userid = logged('id');
    
                $getname = $this->estimate_model->getname($userid);
    
                $notif = array(
            
                    'user_id'               => $userid,
                    'title'                 => 'New Estimates',
                    'content'               => $getname->FName. ' has created new Estimates.'. $data['estimate_no'],
                    'date_created'          => date("Y-m-d H:i:s"),
                    'status'                => '1',
                    'company_id'            => getLoggedCompanyID()
                );
    
                $notification = $this->estimate_model->save_notification($notif);
            }
    
            $return['data'] = $estimateId;
            $return['success'] = $estimateId ? true : false;
            $return['message'] = $estimateId ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function options_estimate($data)
    {
        // $this->form_validation->set_rules('item[]', 'Item', 'required');
        $this->form_validation->set_rules('customer', 'Customer', 'required');
        $this->form_validation->set_rules('estimate_no', 'Estimate #', 'required');
        $this->form_validation->set_rules('estimate_date', 'Estimate Date', 'required');
        $this->form_validation->set_rules('expiry_date', 'Expiry Date', 'required');
        $this->form_validation->set_rules('estimate_type', 'Estimate Type', 'required');
        $this->form_validation->set_rules('estimate_status', 'Estimate Status', 'required');

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $company_id  = getLoggedCompanyID();
            $user_id  = getLoggedUserID();

            $new_data = array(
                'customer_id' => $data['customer'],
                'job_location' => $data['job_location'],
                'job_name' => $data['job_name'],
                'estimate_number' => $data['estimate_no'],
                'estimate_date' => date("Y-m-d", strtotime($data['estimate_date'])),
                'expiry_date' => date("Y-m-d", strtotime($data['expiry_date'])),
                'purchase_order_number' => $data['purchase_order_no'],
                'status' => $data['estimate_status'],
                'estimate_type' => 'Option',
                'type' => $data['estimate_type'],
                'attachments' => 'testing',
                'deposit_request' => $data['deposit_request'],
                'deposit_amount' => $data['deposit_amount'],
                'customer_message' => $data['customer_message'],
                'terms_conditions' => $data['terms_conditions'],
                'instructions' => $data['instructions'],
                'option_message' => $data['option_1_message'],
                'option2_message' => $data['option_2_message'],
                'option1_total' => $data['table_1_total'],
                'option2_total' => $data['table_2_total'],
                'tax1_total' => $data['table_1_taxes'],
                'tax2_total' => $data['table_2_taxes'],
                'sub_total' => $data['table_1_subtotal'],
                'sub_total2' => $data['table_2_subtotal'],
                'user_id' => $user_id,
                'company_id' => $company_id
            );

            $addQuery = $this->estimate_model->save_estimate($new_data);

            if($addQuery) {
                $a = $data['table_1_item'];
                $quantity = $data['table_1_quantity'];
                $price = $data['table_1_item_amount'];
                $tax = $data['table_1_item_tax'];
                $discount = $data['table_1_discount'];
                $total = $data['table_1_item_total'];

                $i = 0;
                foreach($a as $row){
                    $itemData['items_id']       = $a[$i];
                    $itemData['qty']            = $quantity[$i];
                    $itemData['cost']           = $price[$i];
                    $itemData['tax']            = $tax[$i];
                    $itemData['discount']       = $discount[$i];
                    $itemData['total']          = $total[$i];
                    $itemData['estimate_type']  = 'Option';
                    $itemData['estimates_id ']  = $addQuery;
                    $itemData['bundle_option_type'] = '1';
                    $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                    $i++;
                }

                $a2 = $data['table_2_item'];
                $quantity2 = $data['table_2_quantity'];
                $price2 = $data['table_2_item_amount'];
                $tax2 = $data['table_2_item_tax'];
                $discount2 = $data['table_2_discount'];
                $total2 = $data['table_2_item_total'];

                $i2 = 0;
                foreach($a2 as $row2){
                    $itemData['items_id']       = $a2[$i2];
                    $itemData['qty']            = $quantity2[$i2];
                    $itemData['cost']           = $price2[$i2];
                    $itemData['tax']            = $tax2[$i2];
                    $itemData['discount']       = $discount2[$i2];
                    $itemData['total']          = $total2[$i2];
                    $itemData['estimate_type']  = 'Option';
                    $itemData['estimates_id ']  = $addQuery;
                    $itemData['bundle_option_type'] = '2';
                    $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                    $i2++;
                }

                $userid = logged('id');

                $getname = $this->estimate_model->getname($userid);

                $notif = array(
            
                    'user_id'               => $userid,
                    'title'                 => 'New Estimates',
                    'content'               => $getname->FName. ' has created new Estimates.'. $data['estimate_number'],
                    'date_created'          => date("Y-m-d H:i:s"),
                    'status'                => '1',
                    'company_id'            => getLoggedCompanyID()
                );

                $notification = $this->estimate_model->save_notification($notif);
            }

            $return['data'] = $addQuery;
            $return['success'] = $addQuery ? true : false;
            $return['message'] = $addQuery ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    private function bundle_estimate($data)
    {
        // $this->form_validation->set_rules('item[]', 'Item', 'required');
        $this->form_validation->set_rules('customer', 'Customer', 'required');
        $this->form_validation->set_rules('estimate_no', 'Estimate #', 'required');
        $this->form_validation->set_rules('estimate_date', 'Estimate Date', 'required');
        $this->form_validation->set_rules('expiry_date', 'Expiry Date', 'required');
        $this->form_validation->set_rules('estimate_type', 'Estimate Type', 'required');
        $this->form_validation->set_rules('estimate_status', 'Estimate Status', 'required');

        $return = [];
        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $company_id  = getLoggedCompanyID();
            $user_id  = getLoggedUserID();

            $new_data = array(
                'customer_id' => $data['customer'],
                'job_location' => $data['job_location'],
                'job_name' => $data['job_name'],
                'estimate_number' => $data['estimate_no'],
                'estimate_date' => date("Y-m-d", strtotime($data['estimate_date'])),
                'expiry_date' => date("Y-m-d", strtotime($data['expiry_date'])),
                'purchase_order_number' => $data['purchase_order_number'],
                'status' => $data['estimate_status'],
                'estimate_type' => 'Bundle',
                'type' => $data['estimate_type'],
                'attachments' => 'testing',
                'deposit_request' => $data['deposit_request'],
                'deposit_amount' => $data['deposit_amount'],
                'customer_message' => $data['customer_message'],
                'terms_conditions' => $data['terms_conditions'],
                'instructions' => $data['instructions'],
                'bundle1_message' => $data['bundle_1_message'],
                'bundle2_message' => $data['bundle_2_message'],
                'bundle_discount' => $data['table_2_adjustment'],
                'user_id' => $user_id,
                'company_id' => $company_id,
                'deposit_request' => '$',
                'deposit_amount' => $data['adjustment_input'],
                'bundle1_total' => $data['table_1_total'],
                'bundle2_total' => $data['table_2_total'],
                'sub_total' => $data['table_1_subtotal'],
                'sub_total2' => $data['table_2_subtotal'],
                'tax1_total' => $data['table_1_taxes'],
                'tax2_total' => $data['table_2_taxes'],
                'adjustment_name' => $data['table_1_adjustment_name'],
                'adjustment_value' => $data['table_1_adjustment'],
                'markup_type' => '$',
                'markup_amount' => $data['markup_input_form']
            );

            $addQuery = $this->estimate_model->save_estimate($new_data);

            if($addQuery) {
                $a = $data['table_1_item'];
                $quantity = $data['table_1_quantity'];
                $price = $data['table_1_item_amount'];
                $tax = $data['table_1_item_tax'];
                $discount = $data['table_1_discount'];
                $total = $data['table_1_item_total'];

                $i = 0;
                foreach($a as $row){
                    $itemData['items_id']       = $a[$i];
                    $itemData['qty']            = $quantity[$i];
                    $itemData['cost']           = $price[$i];
                    $itemData['tax']            = $tax[$i];
                    $itemData['discount']       = $discount[$i];
                    $itemData['total']          = $total[$i];
                    $itemData['estimate_type']  = 'Bundle';
                    $itemData['estimates_id ']  = $addQuery;
                    $itemData['bundle_option_type'] = '1';
                    $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                    $i++;
                }

                $a2 = $data['table_2_item'];
                $quantity2 = $data['table_2_quantity'];
                $price2 = $data['table_2_item_amount'];
                $tax2 = $data['table_2_item_tax'];
                $discount2 = $data['table_2_discount'];
                $total2 = $data['table_2_item_total'];

                $i2 = 0;
                foreach($a2 as $row2){
                    $itemData['items_id']       = $a2[$i2];
                    $itemData['qty']            = $quantity2[$i2];
                    $itemData['cost']           = $price2[$i2];
                    $itemData['tax']            = $tax2[$i2];
                    $itemData['discount']       = $discount2[$i2];
                    $itemData['total']          = $total2[$i2];
                    $itemData['estimate_type']  = 'Bundle';
                    $itemData['estimates_id ']  = $addQuery;
                    $itemData['bundle_option_type'] = '2';
                    $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                    $i2++;
                }

                $userid = logged('id');

                $getname = $this->estimate_model->getname($userid);

                $notif = array(
            
                    'user_id'               => $userid,
                    'title'                 => 'New Estimates',
                    'content'               => $getname->FName. ' has created new Estimates.'. $data['estimate_number'],
                    'date_created'          => date("Y-m-d H:i:s"),
                    'status'                => '1',
                    'company_id'            => getLoggedCompanyID()
                );

                $notification = $this->estimate_model->save_notification($notif);
            }

            $return['data'] = $addQuery;
            $return['success'] = $addQuery ? true : false;
            $return['message'] = $addQuery ? 'Entry Successful!' : 'An unexpected error occured!';
        }

        return $return;
    }

    public function get_linkable_transactions($transactionType, $id)
    {
        switch ($transactionType) {
            case 'expense':
                $purchaseOrders = $this->expenses_model->get_vendor_open_purchase_orders($id);
                $bills = $this->expenses_model->get_vendor_open_bills($id);
                $vendorCredits = $this->expenses_model->get_vendor_unapplied_vendor_credits($id);
                $billPayments = $this->expenses_model->get_payment_with_credits_by_vendor($id);

                $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('expense', $this->input->get('transaction-id'));
            break;
            case 'check':
                $purchaseOrders = $this->expenses_model->get_vendor_open_purchase_orders($id);
                $bills = $this->expenses_model->get_vendor_open_bills($id);
                $vendorCredits = $this->expenses_model->get_vendor_unapplied_vendor_credits($id);
                $billPayments = $this->expenses_model->get_payment_with_credits_by_vendor($id);

                $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('check', $this->input->get('transaction-id'));
            break;
            case 'bill':
                $purchaseOrders = $this->expenses_model->get_vendor_open_purchase_orders($id);

                $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('bill', $this->input->get('transaction-id'));
            break;
            case 'bill-payment':
                $bills = $this->expenses_model->get_vendor_open_bills($id);
                if(!empty($this->input->get('paymentid'))) {
                    $paymentBills = $this->vendors_model->get_bill_payment_bills($this->input->get('paymentid'));
                }
                $vendorCredits = $this->expenses_model->get_vendor_unapplied_vendor_credits($id);
                $billPayments = $this->expenses_model->get_payment_with_credits_by_vendor($id);
            break;
            case 'invoice' :
                $credits = $this->accounting_delayed_credit_model->get_customer_delayed_credits($id, logged('company_id'));
                $charges = $this->accounting_delayed_charge_model->get_customer_delayed_charges($id, logged('company_id'));
                $estimates = $this->estimate_model->get_customer_estimates($id, logged('company_id'));
                $billableExpenses = $this->accounting_customers_model->get_customer_billable_expenses($id);
                $timeCharges = $this->accounting_single_time_activity_model->get_customer_time_charges($id);
            break;
        }

        $transactions = [];

        if (isset($purchaseOrders) && count($purchaseOrders) > 0) {
            foreach ($purchaseOrders as $purchaseOrder) {
                $balance = '$'.number_format(floatval($purchaseOrder->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($purchaseOrder->total_amount), 2, '.', ',');

                $flag = true;
                if(!is_null($this->input->get('transaction-id'))) {
                    if($purchaseOrder->status === "2" && array_search($purchaseOrder->id, array_column($linkedTransactions, 'linked_transaction_id')) === false) {
                        $flag = false;
                    }
                } else {
                    if($purchaseOrder->status === "2") {
                        $flag = false;
                    }
                }

                if($flag) {
                    $transactions[] = [
                        'type' => 'Purchase Order',
                        'data_type' => 'purchase-order',
                        'id' => $purchaseOrder->id,
                        'number' => $purchaseOrder->purchase_order_no === null || $purchaseOrder->purchase_order_no === '' ? '' : $purchaseOrder->purchase_order_no,
                        'date' => date("m/d/Y", strtotime($purchaseOrder->purchase_order_date)),
                        'formatted_date' => date("F j", strtotime($purchaseOrder->purchase_order_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        if(isset($paymentBills) && count($paymentBills) > 0) {
            foreach ($paymentBills as $paymentBill) {
                $balance = '$'.number_format(floatval($paymentBill->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($paymentBill->total_amount), 2, '.', ',');

                $transactions[] = [
                    'type' => 'Bill',
                    'data_type' => 'bill',
                    'id' => $paymentBill->id,
                    'number' => $paymentBill->bill_no === null || $paymentBill->bill_no === '' ? '' : $paymentBill->bill_no,
                    'date' => date("m/d/Y", strtotime($paymentBill->due_date)),
                    'formatted_date' => date("F j", strtotime($paymentBill->due_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance),
                    'amount' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        if (isset($bills) && count($bills) > 0) {
            foreach ($bills as $bill) {
                $balance = '$'.number_format(floatval($bill->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($bill->total_amount), 2, '.', ',');

                $transactions[] = [
                    'type' => 'Bill',
                    'data_type' => 'bill',
                    'id' => $bill->id,
                    'number' => $bill->bill_no === null || $bill->bill_no === '' ? '' : $bill->bill_no,
                    'date' => date("m/d/Y", strtotime($bill->due_date)),
                    'formatted_date' => date("F j", strtotime($bill->due_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance),
                    'amount' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        if(isset($billPayments) && count($billPayments) > 0) {
            foreach($billPayments as $billPayment) {
                $balance = '$'.number_format(floatval($billPayment->available_credits_amount), 2, '.', ',');
                $total = '$'.number_format(floatval($billPayment->total_credits_amount), 2, '.', ',');

                $type = 'Bill Payment';

                $paymentAcc = $this->chart_of_accounts_model->getById($billPayment->payment_account_id);
                $paymentAccType = $this->account_model->getById($paymentAcc->account_id);
                $type .= $paymentAccType->account_name === 'Bank' ? ' (Check)' : ' (Credit Card)';

                $transactions[] = [
                    'type' => $type,
                    'data_type' => 'bill-payment',
                    'id' => $billPayment->id,
                    'number' => $billPayment->check_no === null || $billPayment->check_no === '' ? '' : $billPayment->check_no,
                    'date' => date("m/d/Y", strtotime($billPayment->payment_date)),
                    'formatted_date' => date("F j", strtotime($billPayment->payment_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance),
                    'amount' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        if (isset($vendorCredits) && count($vendorCredits) > 0) {
            foreach ($vendorCredits as $vendorCredit) {
                $balance = '$'.number_format(floatval($vendorCredit->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($vendorCredit->total_amount), 2, '.', ',');

                $transactions[] = [
                    'type' => 'Vendor Credit',
                    'data_type' => 'vendor-credit',
                    'id' => $vendorCredit->id,
                    'number' => $vendorCredit->ref_no === null || $vendorCredit->ref_no === '' ? '' : $vendorCredit->ref_no,
                    'date' => date("m/d/Y", strtotime($vendorCredit->payment_date)),
                    'formatted_date' => date("F j", strtotime($vendorCredit->payment_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance),
                    'amount' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        if(isset($credits) && count($credits)) {
            foreach($credits as $credit) {
                $balance = '$'.number_format(floatval($credit->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($credit->total_amount), 2, '.', ',');

                if($credit->status === "1") {
                    $transactions[] = [
                        'type' => 'Credit',
                        'data_type' => 'delayed-credit',
                        'id' => $credit->id,
                        'number' => $credit->ref_no === null || $credit->ref_no === '' ? '' : $credit->ref_no,
                        'date' => date("m/d/Y", strtotime($credit->delayed_credit_date)),
                        'formatted_date' => date("F j", strtotime($credit->delayed_credit_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance),
                        'amount' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        if(isset($charges) && count($charges)) {
            foreach($charges as $charge) {
                $balance = '$'.number_format(floatval($charge->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($charge->total_amount), 2, '.', ',');

                if($charge->status === "1") {
                    $transactions[] = [
                        'type' => 'Charge',
                        'data_type' => 'delayed-charge',
                        'id' => $charge->id,
                        'number' => $charge->ref_no === null || $charge->ref_no === '' ? '' : $charge->ref_no,
                        'date' => date("m/d/Y", strtotime($charge->delayed_charge_date)),
                        'formatted_date' => date("F j", strtotime($charge->delayed_charge_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance),
                        'amount' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        if(isset($estimates) && count($estimates)) {
            foreach($estimates as $estimate) {
                $total1 = ((float)$estimate->option1_total) + ((float)$estimate->option2_total);
                $total2 = ((float)$estimate->bundle1_total) + ((float)$estimate->bundle2_total);

                if ($estimate->estimate_type == 'Option') {
                    $grandTotal = $total1;
                } elseif ($estimate->estimate_type == 'Bundle') {
                    $grandTotal = $total2;
                } else {
                    $grandTotal = $estimate->grand_total;
                }

                $balance = '$'.number_format(floatval($grandTotal), 2, '.', ',');
                $total = '$'.number_format(floatval($grandTotal), 2, '.', ',');

                $transactions[] = [
                    'type' => 'Estimate',
                    'data_type' => 'estimate',
                    'id' => $estimate->id,
                    'number' => $estimate->estimate_number === null || $estimate->estimate_number === '' ? '' : $estimate->estimate_number,
                    'date' => date("m/d/Y", strtotime($estimate->estimate_date)),
                    'formatted_date' => date("F j", strtotime($estimate->estimate_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance),
                    'amount' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        if(isset($billableExpenses) && count($billableExpenses)) {
            foreach($billableExpenses as $billableExpense) {
                $balance = '$'.number_format(floatval($billableExpense->amount), 2, '.', ',');
                $total = '$'.number_format(floatval($billableExpense->amount), 2, '.', ',');

                switch($billableExpense->transaction_type) {
                    case 'Expense' :
                        $expense = $this->vendors_model->get_expense_by_id($billableExpense->transaction_id, logged('company_id'));
                        $date = date("m/d/Y", strtotime($expense->payment_date));
                    break;
                    case 'Check' :
                        $check = $this->vendors_model->get_check_by_id($billableExpense->transaction_id, logged('company_id'));
                        $date = date("m/d/Y", strtotime($check->payment_date));
                    break;
                    case 'Bill' :
                        $bill = $this->vendors_model->get_bill_by_id($billableExpense->transaction_id, logged('company_id'));
                        $date = date("m/d/Y", strtotime($bill->bill_date));
                    break;
                    case 'Vendor Credit' :
                        $vendorCredit = $this->vendors_model->get_vendor_credit_by_id($billableExpense->transaction_id, logged('company_id'));
                        $date = date("m/d/Y", strtotime($vendorCredit->payment_date));
                    break;
                    case 'Credit Card Credit' :
                        $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($billableExpense->transaction_id, logged('company_id'));
                        $date = date("m/d/Y", strtotime($ccCredit->payment_date));
                    break;
                }

                if(floatval($billableExpense->received) === 0.00) {
                    $transactions[] = [
                        'type' => 'Billable Expense',
                        'data_type' => 'billexp-charge',
                        'id' => $billableExpense->id,
                        'number' => '',
                        'date' => $date,
                        'formatted_date' => date("F j", strtotime($date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance),
                        'amount' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        if(isset($timeCharges) && count($timeCharges)) {
            foreach($timeCharges as $timeCharge)
            {
                $price = floatval(str_replace(',', '', $timeCharge->hourly_rate));

                $hours = substr($timeCharge->time, 0, -3);
                $time = explode(':', $hours);
                $hr = $time[0] + ($time[1] / 60);

                $total = $hr * $price;

                $balance = '$'.number_format(floatval($total), 2, '.', ',');
                $total = '$'.number_format(floatval($total), 2, '.', ',');

                if($timeCharge->status === '1') {
                    $transactions[] = [
                        'type' => 'Billable time',
                        'data_type' => 'time-charge',
                        'id' => $timeCharge->id,
                        'number' => '',
                        'date' => date("m/d/Y", strtotime($timeCharge->date)),
                        'formatted_date' => date("F j", strtotime($timeCharge->date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance),
                        'amount' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        echo json_encode($transactions);
    }

    public function get_transaction_details($transactionType, $transactionId)
    {
        switch ($transactionType) {
            case 'purchase-order':
                $type = 'Purchase Order';
                $transaction = $this->vendors_model->get_purchase_order_by_id($transactionId, logged('company_id'));
            break;
            case 'bill':
                $type = 'Bill';
                $transaction = $this->vendors_model->get_bill_by_id($transactionId, logged('company_id'));
            break;
            case 'delayed-credit' :
                $type = 'Delayed Credit';
                $transaction = $this->accounting_delayed_credit_model->getDelayedCreditDetails($transactionId);
            break;
            case 'delayed-charge' :
                $type = 'Delayed Charge';
                $transaction = $this->accounting_delayed_charge_model->getDelayedChargeDetails($transactionId);
            break;
            case 'estimate' :
                $type = 'Estimate';
                $transaction = $this->estimate_model->getEstimate($transactionId);

                $total1 = ((float)$transaction->option1_total) + ((float)$transaction->option2_total);
                $total2 = ((float)$transaction->bundle1_total) + ((float)$transaction->bundle2_total);

                if ($transaction->estimate_type == 'Option') {
                    $transaction->grand_total = $total1;
                } elseif ($transaction->estimate_type == 'Bundle') {
                    $transaction->grand_total = $total2;
                }

                $transaction->remaining_balance = $transaction->grand_total;
            break;
            case 'billexp-charge' :
                $type = 'Billable Expense';
                $transaction = $this->expenses_model->get_vendor_transaction_category_by_id($transactionId);

                switch($transaction->transaction_type) {
                    case 'Expense' :
                        $expense = $this->vendors_model->get_expense_by_id($transaction->transaction_id, logged('company_id'));
                        $transaction->date = date("m/d/Y", strtotime($expense->payment_date));
                    break;
                    case 'Check' :
                        $check = $this->vendors_model->get_check_by_id($transaction->transaction_id, logged('company_id'));
                        $transaction->date = date("m/d/Y", strtotime($check->payment_date));
                    break;
                    case 'Bill' :
                        $bill = $this->vendors_model->get_bill_by_id($transaction->transaction_id, logged('company_id'));
                        $transaction->date = date("m/d/Y", strtotime($bill->bill_date));
                    break;
                    case 'Vendor Credit' :
                        $vendorCredit = $this->vendors_model->get_vendor_credit_by_id($transaction->transaction_id, logged('company_id'));
                        $transaction->date = date("m/d/Y", strtotime($vendorCredit->payment_date));
                    break;
                    case 'Credit Card Credit' :
                        $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($transaction->transaction_id, logged('company_id'));
                        $transaction->date = date("m/d/Y", strtotime($ccCredit->payment_date));
                    break;
                }
            break;
            case 'time-charge' :
                $type = 'Billable time';
                $transaction = $this->accounting_single_time_activity_model->get_by_id($transactionId);
            break;
        }

        $return = [
            'details' => $transaction
        ];

        switch($transactionType) {
            case 'purchase-order' :
                $categories = $this->expenses_model->get_transaction_categories($transactionId, $type);
                $items = $this->expenses_model->get_transaction_items($transactionId, $type);

                foreach ($categories as $index => $category) {
                    $customer = $this->accounting_customers_model->get_by_id($category->customer_id);
                    $customerName = $customer->first_name . ' ' . $customer->last_name;

                    $categories[$index]->expense_account = $this->chart_of_accounts_model->getById($category->expense_account_id)->name;
                    $categories[$index]->customer_name = $customerName;
                }

                foreach ($items as $index => $item) {
                    $details = $this->items_model->getItemById($item->item_id);
                    $locations = $this->items_model->getLocationByItemId($item->item_id);

                    $items[$index]->details = $details[0];
                    $items[$index]->locations = $locations;
                }

                $return['categories'] = $categories;
                $return['items'] = $items;
            break;
            case 'bill' :
                $categories = $this->expenses_model->get_transaction_categories($transactionId, $type);
                $items = $this->expenses_model->get_transaction_items($transactionId, $type);
    
                foreach ($categories as $index => $category) {
                    $customer = $this->accounting_customers_model->get_by_id($category->customer_id);
                    $customerName = $customer->first_name . ' ' . $customer->last_name;
    
                    $categories[$index]->expense_account = $this->chart_of_accounts_model->getById($category->expense_account_id)->name;
                    $categories[$index]->customer_name = $customerName;
                }
    
                foreach ($items as $index => $item) {
                    $details = $this->items_model->getItemById($item->item_id);
                    $locations = $this->items_model->getLocationByItemId($item->item_id);
    
                    $items[$index]->details = $details[0];
                    $items[$index]->locations = $locations;
                }
    
                $return['categories'] = $categories;
                $return['items'] = $items;
            break;
            case 'estimate' :
                switch($transaction->estimate_type) {
                    case 'Standard' :
                        $items = $this->estimate_model->getItemlistByID($transactionId);
    
                        foreach($items as $key => $item) {
                            $items[$key]->cost = $item->costing;
                            $items[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                            $items[$key]->locations = $this->items_model->getLocationByItemId($item->items_id);
                        }
                    break;
                    case 'Option' :
                        $itemsOption1 = $this->estimate_model->getItemlistByIDOption1($transactionId);
                        $transaction->grand_total = ((float)$transaction->option1_total) + ((float)$transaction->option2_total);
        
                        $items = [];
                        $index = 0;
                        foreach($itemsOption1 as $key => $item) {
                            $items[] = $item;
                            $items[$index]->cost = $item->costing;
                            $items[$index]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                            $items[$index]->locations = $this->items_model->getLocationByItemId($item->items_id);
                            $index++;
                        }
    
                        $itemsOption2 = $this->estimate_model->getItemlistByIDOption2($transactionId);
        
                        foreach($itemsOption2 as $key => $item) {
                            $items[] = $item;
                            $items[$index]->cost = $item->costing;
                            $items[$index]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                            $items[$index]->locations = $this->items_model->getLocationByItemId($item->items_id);
                            $index++;
                        }
                    break;
                    case 'Bundle' :
                        $itemsBundle1 = $this->estimate_model->getItemlistByIDBundle1($transactionId);
                        $transaction->grand_total = ((float)$transaction->bundle1_total) + ((float)$transaction->bundle2_total);
    
                        $items = [];
                        $index = 0;
                        foreach($itemsBundle1 as $key => $item) {
                            $items[] = $item;
                            $items[$index]->cost = $item->costing;
                            $items[$index]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                            $items[$index]->locations = $this->items_model->getLocationByItemId($item->items_id);
                            $index++;
                        }
    
                        $itemsBundle2 = $this->estimate_model->getItemlistByIDBundle2($transactionId);
        
                        foreach($itemsBundle2 as $key => $item) {
                            $items[] = $item;
                            $items[$index]->cost = $item->costing;
                            $items[$index]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                            $items[$index]->locations = $this->items_model->getLocationByItemId($item->items_id);
                            $index++;
                        }
                    break;
                }
    
                $return['items'] = $items;
            break;
            case 'billable-expense' :
                $items = [];
                $return['items'] = $items;
            break;
            case 'delayed-credit' :
                $items = $this->accounting_credit_memo_model->get_customer_transaction_items($type, $transactionId);

                foreach($items as $index => $item) {
                    if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                        $items[$index]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                        $items[$index]->locations = $this->items_model->getLocationByItemId($item->item_id);
                    } else {
                        $items[$index]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                        $items[$index]->packageItems = json_decode($item->package_item_details);
                    }
                }
                
                $return['items'] = $items;
            break;
            case 'delayed-charge' :
                $items = $this->accounting_credit_memo_model->get_customer_transaction_items($type, $transactionId);

                foreach($items as $index => $item) {
                    if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                        $items[$index]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                        $items[$index]->locations = $this->items_model->getLocationByItemId($item->item_id);
                    } else {
                        $items[$index]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                        $items[$index]->packageItems = json_decode($item->package_item_details);
                    }
                }

                $return['items'] = $items;
            break;
        }

        echo json_encode($return);
    }

    public function bill_payment_form($billId)
    {
        $bill = $this->vendors_model->get_bill_by_id($billId, logged('company_id'));

        $filters = [
            'from' => null,
            'to' => null,
            'overdue' => false,
            'search' => '',
            'vendor' => $bill->vendor_id
        ];

        $this->page_data['bills'] = $this->get_bills_to_pay_by_vendor($filters);
        $this->page_data['credits'] = $this->get_vendor_credits($filters);

        $linkableBills = $this->expenses_model->get_vendor_open_bills($bill->vendor_id);
        $vendorCredits = $this->expenses_model->get_vendor_unapplied_vendor_credits($bill->vendor_id);
        $billPayments = $this->expenses_model->get_payment_with_credits_by_vendor($bill->vendor_id);

        if (isset($linkableBills) && count($linkableBills) > 0) {
            foreach ($linkableBills as $linkableBill) {
                $balance = '$'.number_format(floatval($linkableBill->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($linkableBill->total_amount), 2, '.', ',');

                if($linkableBill->id !== $bill->id) {
                    $transactions[] = [
                        'type' => 'Bill',
                        'data_type' => 'bill',
                        'id' => $linkableBill->id,
                        'number' => $linkableBill->bill_no === null || $linkableBill->bill_no === '' ? '' : $linkableBill->bill_no,
                        'date' => date("m/d/Y", strtotime($linkableBill->due_date)),
                        'formatted_date' => date("F j", strtotime($linkableBill->due_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        if(isset($billPayments) && count($billPayments) > 0) {
            foreach($billPayments as $billPayment) {
                $balance = '$'.number_format(floatval($billPayment->available_credits_amount), 2, '.', ',');
                $total = '$'.number_format(floatval($billPayment->total_credits_amount), 2, '.', ',');

                $type = 'Bill Payment';

                $paymentAcc = $this->chart_of_accounts_model->getById($billPayment->payment_account_id);
                $paymentAccType = $this->account_model->getById($paymentAcc->account_id);
                $type .= $paymentAccType->account_name === 'Bank' ? ' (Check)' : ' (Credit Card)';

                $transactions[] = [
                    'type' => $type,
                    'data_type' => 'bill-payment',
                    'id' => $billPayment->id,
                    'number' => $billPayment->check_no === null || $billPayment->check_no === '' ? '' : $billPayment->check_no,
                    'date' => date("m/d/Y", strtotime($billPayment->payment_date)),
                    'formatted_date' => date("F j", strtotime($billPayment->payment_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance),
                    'amount' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        if (isset($vendorCredits) && count($vendorCredits) > 0) {
            foreach ($vendorCredits as $vendorCredit) {
                $balance = '$'.number_format(floatval($vendorCredit->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($vendorCredit->total_amount), 2, '.', ',');

                $transactions[] = [
                    'type' => 'Vendor Credit',
                    'data_type' => 'vendor-credit',
                    'id' => $vendorCredit->id,
                    'number' => $vendorCredit->ref_no === null || $vendorCredit->ref_no === '' ? '' : $vendorCredit->ref_no,
                    'date' => date("m/d/Y", strtotime($vendorCredit->payment_date)),
                    'formatted_date' => date("F j", strtotime($vendorCredit->payment_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        $this->page_data['linkableTransactions'] = $transactions;
        $this->page_data['balance'] = '$0.00';
        $this->page_data['bill'] = $bill;
        $this->load->view('v2/includes/accounting/modal_forms/bill_payment_modal', $this->page_data);
    }

    private function get_bills_to_pay_by_vendor($filters)
    {
        $bills = $this->expenses_model->get_bills_by_vendor($filters['vendor'], $filters);

        $data = [];
        foreach ($bills as $bill) {
            $description = '<a href="#" class="text-decoration-none" data-id="'.$bill->id.'">Bill ';
            $description .= $bill->bill_no !== "" && !is_null($bill->bill_no) ? '# '.$bill->bill_no.' ' : '';
            $description .= '</a>';
            $description .= '('.date("m/d/Y", strtotime($bill->bill_date)).')';

            if ($filters['search'] !== "") {
                if (stripos($bill->bill_no, $filters['search']) !== false) {
                    $data[] = [
                        'id' => $bill->id,
                        'description' => $description,
                        'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                        'original_amount' => number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ','),
                        'open_balance' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)), 2, '.', ','),
                        'payment' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)), 2, '.', ','),
                    ];
                }
            } else {
                $data[] = [
                    'id' => $bill->id,
                    'description' => $description,
                    'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                    'original_amount' => number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ','),
                    'open_balance' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)), 2, '.', ','),
                    'payment' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)), 2, '.', ','),
                ];
            }
        }

        return $data;
    }

    public function get_bill_payment_bills()
    {
        $post = $this->input->post();

        $filters = [
            'from' => $post['from'] !== "" ? date("Y-m-d", strtotime($post['from'])) : null,
            'to' => $post['to'] !== "" ? date("Y-m-d", strtotime($post['to'])) : null,
            'overdue' => $post['overdue'] === 'false' ? false : true,
            'search' => $post['search'],
            'vendor' => $post['vendor']
        ];

        $data = $this->get_bills_to_pay_by_vendor($filters);

        echo json_encode($data);
    }

    private function get_vendor_credits($filters)
    {
        $credits = $this->expenses_model->get_credits_by_vendor($filters['vendor'], $filters);

        $data = [];
        foreach ($credits as $credit) {
            $description = '<a href="#" class="text-decoration-none" data-id="'.$credit->id.'" data-type="vendor-credit">Vendor Credit ';
            $description .= $credit->ref_no !== "" && !is_null($credit->ref_no) ? '# '.$credit->ref_no.' ' : '';
            $description .= '</a>';
            $description .= '('.date("m/d/Y", strtotime($credit->payment_date)).')';

            if ($filters['search'] !== "") {
                if (stripos($credit->ref_no, $filters['search']) !== false) {
                    $data[] = [
                        'id' => $credit->id,
                        'type' => 'vendor-credit',
                        'description' => $description,
                        'original_amount' => number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ','),
                        'open_balance' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)), 2, '.', ','),
                        'payment' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)), 2, '.', ','),
                    ];
                }
            } else {
                $data[] = [
                    'id' => $credit->id,
                    'type' => 'vendor-credit',
                    'description' => $description,
                    'original_amount' => number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ','),
                    'open_balance' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)), 2, '.', ','),
                    'payment' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)), 2, '.', ','),
                ];
            }
        }

        $paymentCredits = $this->expenses_model->get_payment_with_credits_by_vendor($filters['vendor'], $filters);

        foreach($paymentCredits as $paymentCredit)
        {
            $description = '<a href="#" class="text-decoration-none" data-id="'.$paymentCredit->id.'" data-type="bill-payment">Unapplied Payment ';
            $description .= $paymentCredit->check_no !== "" && !is_null($paymentCredit->check_no) ? '# '.$paymentCredit->check_no.' ' : '';
            $description .= '</a>';
            $description .= '('.date("m/d/Y", strtotime($paymentCredit->payment_date)).')';

            if ($filters['search'] !== "") {
                if (stripos($paymentCredit->ref_no, $filters['search']) !== false) {
                    $data[] = [
                        'id' => $paymentCredit->id,
                        'type' => 'bill-payment',
                        'description' => $description,
                        'original_amount' => number_format(floatval(str_replace(',', '', $paymentCredit->total_credits_amount)), 2, '.', ','),
                        'open_balance' => number_format(floatval(str_replace(',', '', $paymentCredit->available_credits_amount)), 2, '.', ','),
                        'payment' => number_format(floatval(str_replace(',', '', $paymentCredit->available_credits_amount)), 2, '.', ','),
                    ];
                }
            } else {
                $data[] = [
                    'id' => $paymentCredit->id,
                    'type' => 'bill-payment',
                    'description' => $description,
                    'original_amount' => number_format(floatval(str_replace(',', '', $paymentCredit->total_credits_amount)), 2, '.', ','),
                    'open_balance' => number_format(floatval(str_replace(',', '', $paymentCredit->available_credits_amount)), 2, '.', ','),
                    'payment' => number_format(floatval(str_replace(',', '', $paymentCredit->available_credits_amount)), 2, '.', ','),
                ];
            }
        }

        return $data;
    }

    public function get_bill_payment_credits()
    {
        $post = $this->input->post();

        $filters = [
            'from' => $post['from'] !== "" ? date("Y-m-d", strtotime($post['from'])) : null,
            'to' => $post['to'] !== "" ? date("Y-m-d", strtotime($post['to'])) : null,
            'search' => $post['search'],
            'selectedCredits' => $post['credits'],
            'vendor' => $post['vendor']
        ];

        $data = $this->get_vendor_credits($filters);

        echo json_encode($data);
    }

    public function load_checks()
    {
        $post = json_decode(file_get_contents('php://input'), true);
        $start = $post['start'];
        $limit = $post['length'];
        $paymentAcc = $post['payment_account'];
        $sort = $post['sort'];
        $type = $post['type'];

        $filters = [
            'payment_account' => $paymentAcc
        ];

        switch ($type) {
            case 'regular':
                $checks = $this->expenses_model->get_checks_to_print($filters);
                $totalCount = count($checks);
            break;
            case 'bill-payment':
                $billPayments = $this->expenses_model->get_bill_payments_to_print($filters);
                $totalCount = count($billPayments);
            break;
            default:
                $checks = $this->expenses_model->get_checks_to_print($filters);
                $billPayments = $this->expenses_model->get_bill_payments_to_print($filters);
                $totalCount = count($checks) + count($billPayments);
            break;
        }

        $data = [];
        if (isset($checks) && count($checks) > 0) {
            foreach ($checks as $check) {
                switch ($check->payee_type) {
                    case 'vendor':
                        $payee = $this->vendors_model->get_vendor_by_id($check->payee_id);
                        $payeeName = $payee->display_name;
                    break;
                    case 'customer':
                        $payee = $this->accounting_customers_model->get_by_id($check->payee_id);
                        $payeeName = $payee->first_name . ' ' . $payee->last_name;
                    break;
                    case 'employee':
                        $payee = $this->users_model->getUser($check->payee_id);
                        $payeeName = $payee->FName . ' ' . $payee->LName;
                    break;
                }

                if (strpos($check->total_amount, '-') !== false) {
                    $total = str_replace('-', '', floatval(str_replace(',', '', $check->total_amount)));
                    $amount = '-$'.number_format($total, 2, '.', ',');
                } else {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $check->total_amount)), 2, '.', ',');
                }

                $data[] = [
                    'id' => $check->id,
                    'date' => date("m/d/Y", strtotime($check->payment_date)),
                    'type' => 'Check',
                    'payee' => $payeeName,
                    'amount' => $amount,
                    'order_created' => strtotime($check->created_at)
                ];
            }
        }

        if (isset($billPayments) && count($billPayments) > 0) {
            foreach ($billPayments as $payment) {
                $payee = $this->vendors_model->get_vendor_by_id($payment->payee_id);
                $payeeName = $payee->display_name;

                $paymentAcc = $this->chart_of_accounts_model->getById($billPayment->payment_account_id);
                $paymentAccType = $this->account_model->getById($paymentAcc->account_id);
                $paymentType = $paymentAccType->account_name === 'Bank' ? 'Check' : 'Credit Card';

                if (strpos($payment->total_amount, '-') !== false) {
                    $total = str_replace('-', '', floatval(str_replace(',', '', $payment->total_amount)));
                    $amount = '-$'.number_format($total, 2, '.', ',');
                } else {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $payment->total_amount)), 2, '.', ',');
                }

                $data[] = [
                    'id' => $payment->id,
                    'date' => date("m/d/Y", strtotime($payment->payment_date)),
                    'type' => 'Bill Payment ('.$paymentType.')',
                    'payee' => $payeeName,
                    'amount' => $amount,
                    'order_created' => strtotime($payment->created_at)
                ];
            }
        }

        usort($data, function ($a, $b) use ($sort) {
            switch ($sort) {
                case 'payee':
                    return strcmp($b['payee'], $a['payee']);
                break;
                case 'order-created':
                    return $a['order_created'] > $b['order_created'];
                break;
                case 'date-payee':
                    return strtotime($a['date']) > strtotime($b['date']) || strtotime($a['date']) > strtotime($b['date']) && strcmp($b['payee'], $a['payee']);
                break;
                case 'date-order-created':
                    return strtotime($a['date']) > strtotime($b['date']) || strtotime($a['date']) > strtotime($b['date']) && $a['order_created'] > $b['order_created'];
                break;
            }
        });

        $result = [
            'draw' => $post['draw'],
            'recordsTotal' => $totalCount,
            'recordsFiltered' => count($data),
            'data' => array_slice($data, $start, $limit)
        ];

        echo json_encode($result);
    }

    public function get_checks()
    {
        $post = $this->input->post();
        $sort = $post['sort'];
        $type = $post['type'];

        $filters = [
            'payment_account' => $post['payment_account']
        ];

        switch ($type) {
            case 'regular':
                $checks = $this->expenses_model->get_checks_to_print($filters);
            break;
            case 'bill-payment':
                $billPayments = $this->expenses_model->get_bill_payments_to_print($filters);
            break;
            default:
                $checks = $this->expenses_model->get_checks_to_print($filters);
                $billPayments = $this->expenses_model->get_bill_payments_to_print($filters);
            break;
        }

        $data = [];
        if (isset($checks) && count($checks) > 0) {
            foreach ($checks as $check) {
                switch ($check->payee_type) {
                    case 'vendor':
                        $payee = $this->vendors_model->get_vendor_by_id($check->payee_id);
                        $payeeName = $payee->display_name;
                    break;
                    case 'customer':
                        $payee = $this->accounting_customers_model->get_by_id($check->payee_id);
                        $payeeName = $payee->first_name . ' ' . $payee->last_name;
                    break;
                    case 'employee':
                        $payee = $this->users_model->getUser($check->payee_id);
                        $payeeName = $payee->FName . ' ' . $payee->LName;
                    break;
                }

                if (strpos($check->total_amount, '-') !== false) {
                    $total = str_replace('-', '', floatval(str_replace(',', '', $check->total_amount)));
                    $amount = '-$'.number_format($total, 2, '.', ',');
                } else {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $check->total_amount)), 2, '.', ',');
                }

                $data[] = [
                    'id' => $check->id,
                    'date' => date("m/d/Y", strtotime($check->payment_date)),
                    'type' => 'Check',
                    'payee' => $payeeName,
                    'amount' => $amount,
                    'order_created' => strtotime($check->created_at)
                ];
            }
        }

        if (isset($billPayments) && count($billPayments) > 0) {
            foreach ($billPayments as $payment) {
                $payee = $this->vendors_model->get_vendor_by_id($payment->payee_id);
                $payeeName = $payee->display_name;

                $paymentAcc = $this->chart_of_accounts_model->getById($billPayment->payment_account_id);
                $paymentAccType = $this->account_model->getById($paymentAcc->account_id);
                $paymentType = $paymentAccType->account_name === 'Bank' ? 'Check' : 'Credit Card';

                if (strpos($payment->total_amount, '-') !== false) {
                    $total = str_replace('-', '', floatval(str_replace(',', '', $payment->total_amount)));
                    $amount = '-$'.number_format($total, 2, '.', ',');
                } else {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $payment->total_amount)), 2, '.', ',');
                }

                $data[] = [
                    'id' => $payment->id,
                    'date' => date("m/d/Y", strtotime($payment->payment_date)),
                    'type' => 'Bill Payment ('.$paymentType.')',
                    'payee' => $payeeName,
                    'amount' => $amount,
                    'order_created' => strtotime($payment->created_at)
                ];
            }
        }

        usort($data, function ($a, $b) use ($sort) {
            switch ($sort) {
                case 'payee':
                    return strcmp($b['payee'], $a['payee']);
                break;
                case 'order-created':
                    return $a['order_created'] > $b['order_created'];
                break;
                case 'date-payee':
                    return strtotime($a['date']) > strtotime($b['date']) || strtotime($a['date']) > strtotime($b['date']) && strcmp($b['payee'], $a['payee']);
                break;
                case 'date-order-created':
                    return strtotime($a['date']) > strtotime($b['date']) || strtotime($a['date']) > strtotime($b['date']) && $a['order_created'] > $b['order_created'];
                break;
            }
        });

        echo json_encode($data);
    }

    public function remove_to_print()
    {
        $post = $this->input->post();
        $flag = true;

        foreach ($post['id'] as $key => $id) {
            if ($flag) {
                if ($post['type'][$key] === 'check') {
                    $data = [
                        'to_print' => 0
                    ];
    
                    $update = $this->vendors_model->update_check($id, $data);
                } else {
                    $data = [
                        'to_print_check_no' => 0
                    ];
    
                    $update = $this->vendors_model->update_bill_payment($id, $data);
                }
            }

            $flag = $update ? true : false;
        }

        if ($flag === false) {
            foreach ($post['id'] as $key => $id) {
                if ($post['type'][$key] === 'check') {
                    $data = [
                        'to_print' => 1
                    ];
    
                    $update = $this->vendors_model->update_check($id, $data);
                } else {
                    $data = [
                        'to_print_check_no' => 1
                    ];
    
                    $update = $this->vendors_model->update_bill_payment($id, $data);
                }
            }
        }

        $return = [];
        $return['data'] = $flag;
        $return['success'] = $flag ? true : false;
        $return['message'] = $flag ? 'Removed successfuly!' : 'An unexpected error occured!';

        echo json_encode($return);
    }

    public function print_preview_checks()
    {
        $this->load->helper('string');
        $this->load->library('pdf');
        $settings = $this->accounting_print_checks_settings_model->get_by_company_id(logged('company_id'));
        $post = $this->input->post();

        if(is_null($settings) || $settings->check_type === "1") {
            $view = "accounting/modals/print_action/print_checks_voucher";
            $data = [
                'top-margin' => 25 - intval(isset($settings) ? $settings->vertical : 0),
                'left-padding' => 15 + intval(isset($settings) ? $settings->horizontal : 0),
                'right-padding' => 15 - intval(isset($settings) ? $settings->horizontal : 0)
            ];
        } else {
            $view = "accounting/modals/print_action/print_checks_standard";

            $data = [
                'top-margin' => 47 - intval(isset($settings) ? $settings->vertical : 0),
                'left-padding' => 15 + intval(isset($settings) ? $settings->horizontal : 0),
                'right-padding' => 15 - intval(isset($settings) ? $settings->horizontal : 0)
            ];
        }

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_check_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $fileType = explode('/', $files['type'][$key]);
        $uploadedName = str_replace('.'.$extension, '', $name);

        $startingCheckNo = $post['starting_check_no'] === "" ? null : intval($post['starting_check_no']);

        $checks = [];
        foreach ($post['id'] as $key => $id) {
            if ($post['type'][$key] === 'check') {
                $check = $this->vendors_model->get_check_by_id($id, logged('company_id'));
                $paymentAcc = $this->chart_of_accounts_model->getById($check->bank_account_id);

                switch ($check->payee_type) {
                    case 'vendor':
                        $payee = $this->vendors_model->get_vendor_by_id($check->payee_id);
                        $payeeName = $payee->display_name;
                    break;
                    case 'customer':
                        $payee = $this->accounting_customers_model->get_by_id($check->payee_id);
                        $payeeName = $payee->first_name . ' ' . $payee->last_name;
                    break;
                    case 'employee':
                        $payee = $this->users_model->getUser($check->payee_id);
                        $payeeName = $payee->FName . ' ' . $payee->LName;
                    break;
                }

                $totalDecimal = number_format(floatval(str_replace(',', '', $check->total_amount)), 2, '.', ',');
                $totalString = strval($totalDecimal);
                $totalSplit = explode('.', $totalString);
                $totalWords = $this->spell_out_number($totalSplit[0]);
                $totalWords = ucfirst($totalWords);
                $totalWords .= ' and '.$totalSplit[1].'/100*******************************************************************';

                $checks[] = [
                    'date' => date("m/d/Y", strtotime($check->payment_date)),
                    'name' => $payeeName,
                    'total' => $totalDecimal,
                    'mailing_address' => $check->mailing_address,
                    'payment_account' => $paymentAcc->name,
                    'type' => 'check',
                    'total_in_words' => $totalWords
                ];

                $checkData = [
                    'check_no' => $startingCheckNo,
                    'to_print' => null
                ];

                $this->vendors_model->update_check($id, $checkData);
            } else {
                $check = $this->vendors_model->get_bill_payment_by_id($id);
                $paymentAcc = $this->chart_of_accounts_model->getById($check->payment_account_id);
                $payee = $this->vendors_model->get_vendor_by_id($check->payee_id);
                $payeeName = $payee->display_name;

                $linked = [];
                if ($check->vendor_credits_applied !== null && $check->vendor_credits_applied !== "[]") {
                    $vCredits = json_decode($check->vendor_credits_applied, true);
                    foreach ($vCredits as $vCreditId => $amount) {
                        $vCredit = $this->vendors_model->get_vendor_credit_by_id($vCreditId, logged('company_id'));

                        $linked[] = [
                            'date' => date("m/d/Y", strtotime($vCredit->payment_date)),
                            'type' => 'Vendor Cred',
                            'reference' => '',
                            'original_amount' => '-'.number_format(floatval(str_replace(',', '', $vCredit->total_amount)), 2, '.', ','),
                            'balance_due' => '-'.number_format(floatval(str_replace(',', '', $vCredit->remaining_balance)) + floatval(str_replace(',', '', $amount)), 2, '.', ','),
                            'payment' => '-'.number_format(floatval(str_replace(',', '', $amount)), 2, '.', ',')
                        ];
                    }
                }

                $paidBills = $this->vendors_model->get_bill_payment_items($id);
                foreach ($paidBills as $paidBill) {
                    $bill = $this->vendors_model->get_bill_by_id($paidBill->bill_id, logged('company_id'));

                    $linked[] = [
                        'date' => date("m/d/Y", strtotime($bill->bill_date)),
                        'type' => 'Bill',
                        'reference' => '',
                        'original_amount' => number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ','),
                        'balance_due' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)) + floatval(str_replace(',', '', $paidBill->total_amount)), 2, '.', ','),
                        'payment' => number_format(floatval(str_replace(',', '', $paidBill->total_amount)), 2, '.', ',')
                    ];
                }

                usort($linked, function ($a, $b) {
                    return strtotime($a['date']) > strtotime($b['date']);
                });

                $totalDecimal = number_format(floatval(str_replace(',', '', $check->total_amount)), 2, '.', ',');
                $totalString = strval($totalDecimal);
                $totalSplit = explode('.', $totalString);
                $totalWords = $this->spell_out_number($totalSplit[0]);
                $totalWords = ucfirst($totalWords);
                $totalWords .= ' and '.$totalSplit[1].'/100*******************************************************************';

                $checks[] = [
                    'date' => date("m/d/Y", strtotime($check->payment_date)),
                    'name' => $payeeName,
                    'total' => number_format(floatval(str_replace(',', '', $check->total_amount)), 2, '.', ','),
                    'mailing_address' => $check->mailing_address,
                    'payment_account' => $paymentAcc->name,
                    'type' => 'bill-payment',
                    'total_in_words' => $totalWords,
                    'linked_transactions' => $linked
                ];

                $checkData = [
                    'check_no' => $startingCheckNo,
                    'to_print_check_no' => null
                ];

                $this->vendors_model->update_bill_payment($id, $checkData);
            }

            $assignCheck = [
                'check_no' => $startingCheckNo,
                'transaction_type' => $post['type'][$key],
                'transaction_id' => $check->id,
                'payment_account_id' => $paymentAcc->id
            ];

            $this->accounting_assigned_checks_model->assign_check_no($assignCheck);

            $startingCheckNo++;
        }

        if(is_null($settings) || $settings->check_type === "1") { 
            $data['checks'] = $checks;
        } else {
            if($post['on_first_page_print'] !== '3') {
                $data['checks'] = [];
                
                $data['checks'][0][] = $checks[0];
                unset($checks[0]);

                if(intval($post['on_first_page_print']) > 1) {
                    $data['checks'][0][] = $checks[1];
                    unset($checks[1]);
                }

                $checkGroups = array_chunk($checks, 3);

                foreach($checkGroups as $checkGroup) {
                    $data['checks'][] = $checkGroup;
                }
            } else {
                $data['checks'] = array_chunk($checks, 3);
            }
        }

        $this->pdf->save_pdf($view, ['data' => $data], $fileName, 'portrait');

        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['pdf'] = $pdf;
        $this->load->view('accounting/modals/view_print_checks', $this->page_data);
    }

    private function spell_out_number($num)
    {
        $formatter = new \NumberFormatter("en", \NumberFormatter::SPELLOUT);
        return $formatter->format($num);
    }

    public function success_print_checks_form()
    {
        $checks = $this->input->post('checks_selected');
        $startingCheckNo = intval($this->input->post('starting_check_no'));
        
        $checkNos = [];
        foreach ($checks as $check) {
            $checkNos[] = $startingCheckNo;
            $startingCheckNo++;
        }

        $this->page_data['checkNos'] = $checkNos;
        $this->load->view('accounting/modals/success_print_checks', $this->page_data);
    }

    public function success_print_checks()
    {
        $post = $this->input->post();
        $paymentAcc = $this->input->post('payment_account');
        switch ($post['print_check_status']) {
            case 'some':
                $fromCheckNo = $post['print_from'];

                foreach ($post['checks_selected'] as $key => $id) {
                    $type = $post['type'][$key];
                    $assignedData = [
                        'transaction_type' => $type,
                        'transaction_id' => $id,
                        'payment_account_id' => $paymentAcc
                    ];
                    $checkNo = $this->accounting_assigned_checks_model->get_assigned_check_no($assignedData);

                    if (intval($checkNo->check_no) >= intval($fromCheckNo)) {
                        $checkData = [
                            'check_no' => null
                        ];

                        if ($type === 'check') {
                            $checkData['to_print'] = 1;

                            $this->vendors_model->update_check($id, $checkData);
                        } else {
                            $checkData['to_print_check_no'] = 1;

                            $this->vendors_model->update_bill_payment($id, $checkData);
                        }

                        $assignCheck = [
                            'transaction_type' => $type,
                            'transaction_id' => $id
                        ];
        
                        $this->accounting_assigned_checks_model->unassign_check_no($assignCheck);
                    }
                }
            break;
            case 'no':
                foreach ($post['checks_selected'] as $key => $id) {
                    $type = $post['type'][$key];

                    $checkData = [
                        'check_no' => null
                    ];

                    if ($type === 'check') {
                        $checkData['to_print'] = 1;

                        $this->vendors_model->update_check($id, $checkData);
                    } else {
                        $checkData['to_print_check_no'] = 1;

                        $this->vendors_model->update_bill_payment($id, $checkData);
                    }

                    $assignCheck = [
                        'transaction_type' => $type,
                        'transaction_id' => $id
                    ];
    
                    $this->accounting_assigned_checks_model->unassign_check_no($assignCheck);
                }
            break;
        }
    }

    public function update_timesheet_settings($field, $value)
    {
        $companyId = logged('company_id');
        $settingsData = [
            $field => $value
        ];

        $settings = $this->accounting_timesheet_settings_model->get_by_company_id($companyId);

        if ($settings) {
            $query = $this->accounting_timesheet_settings_model->update($companyId, $settingsData);
        } else {
            $settingsData['company_id'] = $companyId;

            $query = $this->accounting_timesheet_settings_model->create($settingsData);
        }

        echo json_encode($query ? true : false);
    }

    public function get_last_timesheet($nameType, $nameId)
    {
        $lastTimesheet = $this->accounting_weekly_timesheet_model->get_last_timesheet($nameType, $nameId);

        $return = [];
        if ($lastTimesheet) {
            $timeActivities = [];
            $activityData = [
                'name_key' => $nameType,
                'name_id' => $nameId,
                'start_date' => date("Y-m-d", strtotime($lastTimesheet->week_start_date)),
                'end_date' => date("Y-m-d", strtotime($lastTimesheet->week_end_date))
            ];
            $activities = $this->accounting_weekly_timesheet_model->get_timesheet_activities($activityData);
            foreach($activities as $activity) {
                $customer = $this->accounting_customers_model->get_by_id($activity->customer_id);
                $activity->customer_name = $customer->first_name . ' ' . $customer->last_name;
                $service = $this->items_model->getItemById($activity->service_id)[0];
                $activity->service_name = $service->title;

                $totalTime = substr($activity->time, 0, -3);

                $day = strtolower(date("l", strtotime($activity->date)));

                $activity->hours = [
                    $day => $totalTime
                ];

                $find = array_filter($timeActivities, function($v, $k) use ($activity) {
                    return $activity->customer_id === $v->customer_id && $activity->service_id === $v->service_id && $activity->billable === $v->billable && $activity->hourly_rate === $v->hourly_rate && $activity->taxable === $v->taxable;
                }, ARRAY_FILTER_USE_BOTH);

                if(count($find) < 1) {
                    $timeActivities[] = $activity;
                } else {
                    $timeActivities[array_key_first($find)]->hours[$day] = $totalTime;
                }
            }

            $lastTimesheet->time_activities = $timeActivities;

            $return['data'] = $lastTimesheet;
            $return['success'] = true;
            $return['message'] = 'Success.';
        } else {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'nSmarTrac can’t copy a previous timesheet because one doesn’t exist yet for this employee or vendor.';
        }

        echo json_encode($return);
    }

    public function get_timesheet($timesheetId)
    {
        $timesheet = $this->accounting_weekly_timesheet_model->get_by_id($timesheetId);
        $timeActivities = [];
        foreach (json_decode($timesheet->time_activity_ids, true) as $row => $timeActs) {
            foreach ($timeActs as $timeAct) {
                $timeActivity = $this->accounting_single_time_activity_model->get_by_id($timeAct);
                $timeActivities[$row]['customer'] = $this->accounting_customers_model->getCustomerDetails($timeActivity->customer_id)[0];
                $timeActivities[$row]['service'] = $this->items_model->getItemById($timeActivity->service_id)[0];
                $timeActivities[$row]['billable'] = $timeActivity->billable;
                $timeActivities[$row]['rate'] = $timeActivity->hourly_rate;
                $timeActivities[$row]['taxable'] = $timeActivity->taxable;
                $timeActivities[$row]['time_activities'][] = $timeActivity;
            }
        }

        $timesheet->time_activities = $timeActivities;

        echo json_encode(['timesheet' => $timesheet]);
    }

    public function get_add_payee_modal($type)
    {
        $this->page_data['type'] = $type;
        $this->load->view('accounting/modals/add_new_payee', $this->page_data);
    }

    public function add_new_payee()
    {
        $post = $this->input->post();
        $name = explode(' ', trim($post['payee_name']));
        $nameCount = count($name);

        if ($post['payee_type'] === 'vendor') {
            $data = [
                'company_id' => logged('company_id'),
                'display_name' => trim($post['payee_name']),
                'print_on_check_name' => trim($post['payee_name']),
                'status' => 1
            ];

            switch (strval($nameCount)) {
                case '1':
                    $data['f_name'] = $name[0];
                break;
                case '2':
                    $data['f_name'] = $name[0];
                    $data['l_name'] = $name[1];
                break;
                case '3':
                    $data['f_name'] = $name[0];
                    $data['m_name'] = $name[1];
                    $data['l_name'] = $name[2];
                break;
                case '4':
                    $data['title'] = $name[0];
                    $data['f_name'] = $name[1];
                    $data['m_name'] = $name[2];
                    $data['l_name'] = $name[3];
                break;
                case '5':
                    $data['title'] = $name[0];
                    $data['f_name'] = $name[1];
                    $data['m_name'] = $name[2];
                    $data['l_name'] = $name[3];
                    $data['suffix'] = $name[4];
                break;
            }

            $id = $this->vendors_model->createVendor($data);

            $payee = $this->vendors_model->get_vendor_by_id($id);
        } else {
            $data = [
                'fk_user_id' => logged('id'),
                'company_id' => logged('company_id'),
                'business_name' => trim($post['payee_name'])
            ];

            switch (strval($nameCount)) {
                case '1':
                    $data['first_name'] = $name[0];
                break;
                case '2':
                    $data['first_name'] = $name[0];
                    $data['last_name'] = $name[1];
                break;
                case '3':
                    $data['first_name'] = $name[0];
                    $data['middle_name'] = $name[1];
                    $data['last_name'] = $name[2];
                break;
                case '4':
                    $data['prefix'] = $name[0];
                    $data['first_name'] = $name[1];
                    $data['middle_name'] = $name[2];
                    $data['last_name'] = $name[3];
                break;
                case '5':
                    $data['prefix'] = $name[0];
                    $data['first_name'] = $name[1];
                    $data['middle_name'] = $name[2];
                    $data['last_name'] = $name[3];
                    $data['suffix'] = $name[4];
                break;
            }

            $id = $this->accounting_customers_model->createCustomer($data);
            $payee = $this->accounting_customers_model->getCustomerDetails($id)[0];
            $payee->id = $payee->prof_id;
        }

        echo json_encode(['payee' => $payee]);
    }

    public function get_dropdown_choices()
    {
        $search = $this->input->get('search');
        $field = $this->input->get('field');
        $return = [];

        switch ($field) {
            case 'payee':
                $return = $this->get_vendor_choices($return, $search, $field);
                $return = $this->get_customer_choices($return, $search, $field);
                $return = $this->get_employee_choices($return, $search, $field);
            break;
            case 'received-from':
                $return = $this->get_customer_choices($return, $search, $field);
                $return = $this->get_vendor_choices($return, $search, $field);
                $return = $this->get_employee_choices($return, $search, $field);
            break;
            case 'names':
                $return = $this->get_customer_choices($return, $search, $field);
                $return = $this->get_vendor_choices($return, $search, $field);
                $return = $this->get_employee_choices($return, $search, $field);
            break;
            case 'person-tracking':
                $return = $this->get_employee_choices($return, $search, $field);
                $return = $this->get_vendor_choices($return, $search, $field);
            break;
            case 'vendor':
                $return = $this->get_vendor_choices($return, $search, $field);
            break;
            case 'pay-bills-vendor':
                $return = $this->get_vendor_choices($return, $search, $field);
            break;
            case 'customer':
                $return = $this->get_customer_choices($return, $search, $field);
            break;
            case 'employee':
                $return = $this->get_employee_choices($return, $search, $field);
            break;
            case 'payment-method':
                $return = $this->get_payment_method_choices($return, $search);
            break;
            case 'term' :
                $return = $this->get_terms_choices($return, $search);
            break;
            case 'vendor-expense-account' :
                $accountTypes = [
                    'Cost of Goods Sold',
                    'Expenses',
                    'Other Expense'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'expense-account':
                $accountTypes = [
                    'Expenses',
                    'Bank',
                    'Accounts receivable (A/R)',
                    'Other Current Assets',
                    'Fixed Assets',
                    'Accounts payable (A/P)',
                    'Credit Card',
                    'Other Current Liabilities',
                    'Long Term Liabilities',
                    'Equity',
                    'Income',
                    'Cost of Goods Sold',
                    'Other Income',
                    'Other Expense'
                ];

                if($this->input->get('modal') === 'vendor-modal') {
                    $accountTypes = [
                        'Expenses',
                        'Other Expense',
                        'Cost of Goods Sold'
                    ];

                    $this->page_data['expenseAccs'] = $this->chart_of_accounts_model->get_expense_accounts();
                    $this->page_data['otherExpenseAccs'] = $this->chart_of_accounts_model->get_other_expense_accounts();
                    $this->page_data['cogsAccs'] = $this->chart_of_accounts_model->get_cogs_accounts();
                }

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'markup-account' :
                $types = $this->account_model->getAccounts();
                usort($types, function($a, $b) {
                    return strcmp($a->account_name, $b->account_name);
                });
                $accountTypes = [];
                foreach($types as $type) {
                    $accountTypes[] = $type->account_name;
                }

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'expense-payment-account':
                $accountTypes = [
                    'Bank',
                    'Credit Card',
                    'Other Current Assets'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'bank-account':
                $accountTypes = [
                    'Bank'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'payment-account':
                $accountTypes = [
                    'Bank',
                    'Credit Card'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'bank-credit-account':
                $accountTypes = [
                    'Credit Card'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'bank-deposit-account':
                $accountTypes = [
                    'Bank',
                    'Other Current Assets'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'cash-back-account':
                $accountTypes = [
                    'Bank',
                    'Credit Card',
                    'Equity',
                    'Other Current Assets',
                    'Other Current Liabilities'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'funds-account':
                $accountTypes = [
                    'Income',
                    'Other Income',
                    'Bank',
                    'Accounts receivable (A/R)',
                    'Other Current Assets',
                    'Fixed Assets',
                    'Accounts payable (A/P)',
                    'Credit Card',
                    'Other Current Liabilities',
                    'Long Term Liabilities',
                    'Equity',
                    'Cost of Goods Sold',
                    'Expenses',
                    'Other Expense'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'transfer-account':
                $accountTypes = [
                    'Bank',
                    'Other Current Assets',
                    'Fixed Assets',
                    'Credit Card',
                    'Other Current Liabilities',
                    'Long Term Liabilities',
                    'Equity'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'journal-entry-accounts' :
                $types = $this->account_model->getAccounts();
                usort($types, function($a, $b) {
                    return strcmp($a->account_name, $b->account_name);
                });
                $accountTypes = [];
                foreach($types as $type) {
                    $accountTypes[] = $type->account_name;
                }

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'inventory-adj-account' :
                if($this->input->get('field') === 'inventoryModal') {
                    $accountTypes = [
                        'Cost of Goods Sold',
                        'Expenses',
                        'Other Expense',
                        'Income',
                        'Other Income',
                        'Equity',
                        'Other Current Assets',
                        'Fixed Assets',
                        'Other Assets',
                        'Bank',
                        'Other Current Liabilities'
                    ];
                } else {
                    $accountTypes = [
                        'Bank',
                        'Cost of Goods Sold',
                        'Equity',
                        'Expenses',
                        'Fixed Assets',
                        'Other Current Assets',
                        'Other Assets',
                        'Other Current Liabilities',
                        'Other Expense'
                    ];
                }

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'inventory-asset-account' :
                $accountTypes = [
                    'Expenses',
                    'Bank',
                    'Accounts receivable (A/R)',
                    'Other Current Assets',
                    'Fixed Assets',
                    'Accounts payable (A/P)',
                    'Credit Card',
                    'Other Current Liabilities',
                    'Long Term Liabilities',
                    'Equity',
                    'Income',
                    'Cost of Goods Sold',
                    'Other Income',
                    'Other Expense'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'credit-card-account' :
                $accountTypes = [
                    'Credit Card'  
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'parent-account' :
                $accTypes = $this->account_model->getAccounts();
                $accountTypes = [];
                foreach($accTypes as $accType) {
                    $accountTypes[] = $accType->account_name;
                }

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'account-type' :
                $dropdown = $this->input->get('dropdown');
                $return = $this->get_account_types_choices($return, $search, $dropdown);
            break;
            case 'detail-type' :
                $accType = $this->input->get('accType');
                $dropdown = $this->input->get('dropdown');
                $return = $this->get_account_details_choices($return, $search, $accType, $dropdown);
            break;
            case 'service' :
                $return = $this->get_services_choices($return, $search);
            break;
            case 'product' :
                $selected = is_null($this->input->get('selected')) ? [] : json_decode($this->input->get('selected'), true);
                $return = $this->get_products_choices($return, $search, $selected);
            break;
            case 'item' :
                $return = $this->get_items_choices($return, $search);
            break;
            case 'category' :
                $return = $this->get_product_category_choices($return, $search);
            break;
            case 'inv-asset-account' :
                $accountTypes = [
                    'Other Current Assets'
                ];

                $detailTypes = [
                    'Inventory'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes, $detailTypes);
            break;
            case 'income-account' :
                switch($this->input->get('item_type')) {
                    case 'product' :
                        $accountTypes = [
                            'Income'
                        ];
        
                        $detailTypes = [
                            'Sales of Product Income'
                        ];
                    break;
                    default :
                        $accountTypes = $this->account_model->get();
                        $accountTypes = array_column($accountTypes, 'account_name');

                        $detailTypes = [];
                    break;
                }

                $return = $this->get_account_choices($return, $search, $accountTypes, $detailTypes);
            break;
            case 'item-expense-account' :
                switch($this->input->get('item_type')) {
                    case 'product' :
                        $accountTypes = [
                            'Cost of Goods Sold'
                        ];
        
                        $detailTypes = [
                            'Supplies & Materials - COGS'
                        ];
                    break;
                    default :
                        $accountTypes = $this->account_model->get();
                        $accountTypes = array_column($accountTypes, 'account_name');

                        $detailTypes = [];
                    break;
                }

                $return = $this->get_account_choices($return, $search, $accountTypes, $detailTypes);
            break;
            case 'sales-tax-category' :
                $return = $this->get_tax_rates_choices($return, $search);
            break;
            case 'register-account' :
                $accountTypes = [
                    'Bank',
                    'Accounts receivable (A/R)',
                    'Other Current Assets',
                    'Fixed Assets',
                    'Accounts payable (A/P)',
                    'Credit Card',
                    'Other Current Liabilities',
                    'Long Term Liabilities',
                    'Equity'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'transaction-contact' :
                $return = $this->get_customer_choices($return, $search, 'contact');
                $return = $this->get_vendor_choices($return, $search, 'contact');
            break;
            case 'deposit-to-account' :
                $accountTypes = [
                    'Bank',
                    'Other Current Assets'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'refund-from-account' :
                $accountTypes = [
                    'Bank',
                    'Other Current Assets'
                ];

                $return = $this->get_account_choices($return, $search, $accountTypes);
            break;
            case 'filter-report-customer' :
                $return = $this->get_customer_choices($return, $search, 'report');
            break;
            case 'filter-report-employee' :
                $return = $this->get_employee_choices($return, $search, 'report');
                $return = $this->get_vendor_choices($return, $search, 'report');
            break;
            case 'filter-report-item' :
                $return = $this->get_items_choices($return, $search, 'report');
            break;
            case 'custom-report-group' :
                $return = $this->get_custom_report_group_choices($return, $search);
            break;
        }

        if ($search !== null && $search !== '') {
            usort($return['results'], function ($a, $b) use ($search) {
                $indexA = stripos($a['text'], "<strong>$search</strong>") === false ? PHP_INT_MAX : stripos($a['text'], "<strong>$search</strong>");
                $indexB = stripos($b['text'], "<strong>$search</strong>") === false ? PHP_INT_MAX : stripos($b['text'], "<strong>$search</strong>");
                return $indexA - $indexB;
            });

            if ($field === 'payee' || $field === 'received-from' || $field === 'names' || $field === 'person-tracking' || $field === 'transaction-contact') {
                $results = $return['results'];
                $return['results'] = [];
                for ($i = 0; $i < count($results); $i++) {
                    $idExplode = explode('-', $results[$i]['id']);

                    if (count($return['results']) === 0 || $return['results'][array_key_last($return['results'])]['text'] !== ucfirst($idExplode[0])) {
                        $return['results'][]['text'] = ucfirst($idExplode[0]);
                    }

                    $return['results'][array_key_last($return['results'])]['children'][] = [
                        'id' => $results[$i]['id'],
                        'text' => $results[$i]['text']
                    ];
                }
            } else if(stripos($field, 'account') !== false && $field !== 'account-type') {
                $results = $return['results'];
                $childrens = $return['childrens'];

                $return['results'] = [];
                unset($return['childrens']);
                for($i = 0; $i < count($results); $i++) {
                    if(count($accountTypes) > 1) {
                        $idExplode = explode('-', $results[$i]['id']);

                        if (count($return['results']) === 0 || $return['results'][array_key_last($return['results'])]['text'] !== str_replace('_', ' ', $idExplode[0])) {
                            $return['results'][]['text'] = str_replace('_', ' ', $idExplode[0]);
                        }

                        $return['results'][array_key_last($return['results'])]['children'][] = [
                            'id' => $idExplode[1],
                            'text' => $results[$i]['text']
                        ];
                    } else {
                        $return['results'][] = [
                            'id' => $results[$i]['id'],
                            'text' => $results[$i]['text']
                        ];
                    }
                }

                if(!is_null($childrens)) {
                    foreach($childrens as $child) {
                        if(count($accountTypes) > 1) {
                            $lastResultKey = array_key_last($return['results'][array_key_last($return['results'])]['children']);
                            if($return['results'][array_key_last($return['results'])]['children'][$lastResultKey]['id'] !== null || $return['results'][array_key_last($return['results'])]['children'][$lastResultKey]['text'] !== $child['parent']) {
                                $return['results'][array_key_last($return['results'])]['children'][]['text'] = 'Sub-account of '.$child['parent'];
                            }
        
                            $lastKey = array_key_last($return['results'][array_key_last($return['results'])]['children']);
                            $return['results'][array_key_last($return['results'])]['children'][$lastKey]['children'][] = [
                                'id' => $child['id'],
                                'text' => $child['text']
                            ];
                        } else {
                            if($return['results'][array_key_last($return['results'])]['id'] !== null || $return['results'][array_key_last($return['results'])]['text'] !== $child['parent']) {
                                $return['results'][]['text'] = 'Sub-account of '.$child['parent'];
                            }
    
                            $return['results'][array_key_last($return['results'])]['children'][] = [
                                'id' => $child['id'],
                                'text' => $child['text']
                            ];
                        }
                    }
                }
            }
        }

        if ($field === 'pay-bills-vendor' ||
        $field === 'payee' && is_null($this->input->get('modal')) ||
        $field === 'payee' && $this->input->get('for') === 'filter' ||
        $field === 'customer' && $this->input->get('for') === 'filter' ||
        $field === 'expense-account' && $this->input->get('for') === 'filter') {
            array_unshift($return['results'], ['id' => 'all', 'text' => 'All']);
        } else {
            if(!in_array($field, ['account-type', 'detail-type', 'parent-account', 'item']) &&
            $this->input->get('modal') !== 'printChecksModal' &&
            $field !== 'sales-tax-category' && !is_null($this->input->get('modal'))) {
                array_unshift($return['results'], ['id' => 'add-new', 'text' => '+ Add new']);
            }
        }

        if($field === 'product' && count($selected) > 0) {
            array_shift($return['results']);
        }

        if($field === 'category' && $this->input->get('field_id') === 'assign-category') {
            array_unshift($return['results'], ['id' => 0, 'text' => 'Uncategorized']);
        }

        echo json_encode($return);
    }

    private function get_vendor_choices($choices, $search = null, $field)
    {
        $vendors = $this->vendors_model->getAllByCompany();
        if(!isset($choices['results'])) {
            $choices['results'] = [];
        }
        foreach ($vendors as $vendor) {
            if($field === 'report') {
                $vendor->display_name .= ' - Vendor';
            }
            if ($search !== null && $search !== '') {
                $stripos = stripos($vendor->display_name, $search);
                if ($stripos !== false) {
                    if ($field === 'payee' || $field === 'received-from' || $field === 'names' || $field === 'person-tracking' || $field === 'contact') {
                        $searched = substr($vendor->display_name, $stripos, strlen($search));
                        $choices['results'][] = [
                            'id' => 'vendor-'.$vendor->id,
                            'text' => str_replace($searched, "<strong>$searched</strong>", $vendor->display_name)
                        ];
                    } else {
                        $id = $vendor->id;
                        if($field === 'report') {
                            $id = 'vendor-'.$vendor->id;
                        }
                        $searched = substr($vendor->display_name, $stripos, strlen($search));
                        $choices['results'][] = [
                            'id' => $id,
                            'text' => str_replace($searched, "<strong>$searched</strong>", $vendor->display_name)
                        ];
                    }
                }
            } else {
                if ($field === 'payee' || $field === 'received-from' || $field === 'names' || $field === 'person-tracking' || $field === 'contact') {
                    if ($choices['results'] !== null && $choices['results'][array_key_last($choices['results'])]['text'] === 'Vendors') {
                        $choices['results'][array_key_last($choices['results'])]['text'] = 'Vendors';
                    } else {
                        $choices['results'][]['text'] = 'Vendors';
                    }
                    $choices['results'][array_key_last($choices['results'])]['children'][] = [
                        'id' => 'vendor-'.$vendor->id,
                        'text' => $vendor->display_name
                    ];
                } else {
                    $id = $vendor->id;
                    if($field === 'report') {
                        $id = 'vendor-'.$vendor->id;
                    }

                    $choices['results'][] = [
                        'id' => $id,
                        'text' => $vendor->display_name
                    ];
                }
            }
        }

        return $choices;
    }

    private function get_customer_choices($choices, $search = null, $field)
    {
        $customers = $this->accounting_customers_model->getAllByCompany();

        if(!isset($choices['results'])) {
            $choices['results'] = [];
        }

        if($field === 'report') {
            $choices['results'][] = [
                'id' => 'all',
                'text' => 'All'
            ];

            $choices['results'][] = [
                'id' => 'not-specified',
                'text' => 'Not Specified'
            ];

            $choices['results'][] = [
                'id' => 'specified',
                'text' => 'Specified'
            ];
        }
        foreach ($customers as $customer) {
            $name = $customer->first_name . ' ' . $customer->last_name;
            if ($search !== null && $search !== '') {
                $stripos = stripos($name, $search);
                if ($stripos !== false) {
                    $searched = substr($name, $stripos, strlen($search));
                    if ($field === 'payee' || $field === 'received-from' || $field === 'names' || $field === 'contact') {
                        if ($choices['results'] !== null && $choices['results'][array_key_last($choices['results'])]['text'] === 'Customers') {
                            $choices['results'][array_key_last($choices['results'])]['text'] = 'Customers';
                        } else {
                            $choices['results'][]['text'] = 'Customers';
                        }
                        $choices['results'][array_key_last($choices['results'])]['children'][] = [
                            'id' => 'customer-'.$customer->prof_id,
                            'text' => str_replace($searched, "<strong>$searched</strong>", $name)
                        ];
                    } else {
                        $choices['results'][] = [
                            'id' => $customer->prof_id,
                            'text' => str_replace($searched, "<strong>$searched</strong>", $name)
                        ];
                    }
                }
            } else {
                if ($field === 'payee' || $field === 'received-from' || $field === 'names' || $field === 'contact') {
                    if ($choices['results'] !== null && $choices['results'][array_key_last($choices['results'])]['text'] === 'Customers') {
                        $choices['results'][array_key_last($choices['results'])]['text'] = 'Customers';
                    } else {
                        $choices['results'][]['text'] = 'Customers';
                    }
                    $choices['results'][array_key_last($choices['results'])]['children'][] = [
                        'id' => 'customer-'.$customer->prof_id,
                        'text' => $name
                    ];
                } else {
                    $choices['results'][] = [
                        'id' => $customer->prof_id,
                        'text' => $name
                    ];
                }
            }
        }

        return $choices;
    }

    private function get_employee_choices($choices, $search = null, $field)
    {
        $employees = $this->users_model->getCompanyUsers(logged('company_id'));

        if(!isset($choices['results'])) {
            $choices['results'] = [];
        }

        if($field === 'report') {
            $choices['results'][] = [
                'id' => 'all',
                'text' => 'All'
            ];

            $choices['results'][] = [
                'id' => 'not-specified',
                'text' => 'Not Specified'
            ];

            $choices['results'][] = [
                'id' => 'specified',
                'text' => 'Specified'
            ];
        }

        foreach ($employees as $employee) {
            $name = $employee->FName . ' ' . $employee->LName;
            if($field === 'report') {
                $name .= ' - Employee';
            }
            if ($search !== null && $search !== '') {
                $stripos = stripos($name, $search);
                if ($stripos !== false) {
                    $searched = substr($name, $stripos, strlen($search));
                    $name = str_replace($searched, "<strong>$searched</strong>", $name);
                    // $choices['results'][] = [
                    //     'id' => 'employee-'.$employee->id,
                    //     'text' => str_replace($searched, "<strong>$searched</strong>", $name)
                    // ];

                    if ($field === 'payee' || $field === 'received-from' || $field === 'names' || $field === 'person-tracking') {
                        if ($choices['results'] !== null && $choices['results'][array_key_last($choices['results'])]['text'] === 'Employees') {
                            $choices['results'][array_key_last($choices['results'])]['text'] = 'Employees';
                        } else {
                            $choices['results'][]['text'] = 'Employees';
                        }
                        $choices['results'][array_key_last($choices['results'])]['children'][] =  [
                            'id' => 'employee-'.$employee->id,
                            'text' => $name
                        ];
                    } else {
                        $id = $employee->id;
                        if($field === 'report') {
                            $id = 'employee-'.$employee->id;
                        }
                        $choices['results'][] = [
                            'id' => $id,
                            'text' => $name
                        ];
                    }
                }
            } else {
                if ($field === 'payee' || $field === 'received-from' || $field === 'names' || $field === 'person-tracking') {
                    if ($choices['results'] !== null && $choices['results'][array_key_last($choices['results'])]['text'] === 'Employees') {
                        $choices['results'][array_key_last($choices['results'])]['text'] = 'Employees';
                    } else {
                        $choices['results'][]['text'] = 'Employees';
                    }
                    $choices['results'][array_key_last($choices['results'])]['children'][] =  [
                        'id' => 'employee-'.$employee->id,
                        'text' => $name
                    ];
                } else {
                    $id = $employee->id;
                    if($field === 'report') {
                        $id = 'employee-'.$employee->id;
                    }
                    $choices['results'][] = [
                        'id' => $id,
                        'text' => $name
                    ];
                }
            }
        }

        return $choices;
    }

    private function get_payment_method_choices($choices, $search = null)
    {
        $paymentMethods = $this->accounting_payment_methods_model->getCompanyPaymentMethods();

        $choices['results'] = [];
        foreach ($paymentMethods as $paymentMethod) {
            if ($search !== null && $search !== '') {
                $stripos = stripos($paymentMethod['name'], $search);
                if ($stripos !== false) {
                    $searched = substr($paymentMethod['name'], $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $paymentMethod['id'],
                        'text' => str_replace($searched, "<strong>$searched</strong>", $paymentMethod['name'])
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $paymentMethod['id'],
                    'text' => $paymentMethod['name']
                ];
            }
        }

        return $choices;
    }

    private function get_terms_choices($choices, $search = null)
    {
        $terms = $this->accounting_terms_model->getActiveCompanyTerms(logged('company_id'));

        $choices['results'] = [];
        foreach ($terms as $term) {
            if($search !== null && $search !== '') {
                $stripos = stripos($term->name, $search);
                if($stripos !== false) {
                    $searched = substr($term->name, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $term->id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $term->name)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $term->id,
                    'text' => $term->name
                ];
            }
        }

        return $choices;
    }

    private function get_account_choices($choices, $search = null, $accountTypes = [], $detailTypes = [])
    {
        $choices['results'] = [];

        if(count($detailTypes) > 0) {
            $detailTypeIds = [];
            foreach($detailTypes as $detailType) {
                $detailTypeIds[] = $this->account_detail_model->getByName($detailType)->acc_detail_id;
            }
        }

        foreach ($accountTypes as $typeName) {
            $accType = $this->account_model->getAccTypeByName($typeName);

            if(count($detailTypes) < 1) {
                $accounts = $this->chart_of_accounts_model->getByAccountType($accType->id, null, logged('company_id'));
            } else {
                $accounts = $this->chart_of_accounts_model->getParentAccsByAccAndDetailType(1, $accType->id, $detailTypeIds);
            }

            if($search === null || $search === '') {
                if (count($accounts) > 0) {
                    if (count($accountTypes) > 1) {
                        $choices['results'][]['text'] = $typeName;
                        $accTypeKey = array_key_last($choices['results']);
                    }
    
                    foreach ($accounts as $account) {
                        if (count($accountTypes) > 1) {
                            $choices['results'][$accTypeKey]['children'][] = [
                                'id' => $account->id,
                                'text' => $account->name
                            ];
                        } else {
                            $choices['results'][] = [
                                'id' => $account->id,
                                'text' => $account->name
                            ];
                        }
    
                        $lastParentKey = array_key_last($choices['results']);
                        $childAccs = $this->chart_of_accounts_model->getChildAccounts($account->id);
    
                        if (count($childAccs) > 0) {
                            if (count($accountTypes) > 1) {
                                $choices['results'][$lastParentKey]['children'][] = [
                                    'text' => 'Sub-account of '.$account->name,
                                    'children' => []
                                ];
                            } else {
                                $choices['results'][] = [
                                    'text' => 'Sub-account of '.$account->name,
                                    'children' => []
                                ];
                            }
    
                            if (count($accountTypes) > 1) {
                                $key = array_key_last($choices['results'][$lastParentKey]['children']);
                            }
    
                            $lastParentKey = array_key_last($choices['results']);
                            foreach ($childAccs as $childAcc) {
                                if (count($accountTypes) > 1) {
                                    $choices['results'][$lastParentKey]['children'][$key]['children'][] = [
                                        'id' => $childAcc->id,
                                        'text' => $childAcc->name
                                    ];
                                } else {
                                    $choices['results'][$lastParentKey]['children'][] = [
                                        'id' => $childAcc->id,
                                        'text' => $childAcc->name
                                    ];
                                }
                            }
                        }
                    }
                }
            } else {
                foreach($accounts as $account) {
                    $stripos = stripos($account->name, $search);
                    if($stripos !== false) {
                        $searched = substr($account->name, $stripos, strlen($search));
                        $choices['results'][] = [
                            'id' => count($accountTypes) > 1 ? str_replace(" ", "_", $typeName).'-'.$account->id : $account->id,
                            'text' => str_replace($searched, "<strong>$searched</strong>", $account->name)
                        ];
                    }

                    $childAccs = $this->chart_of_accounts_model->getChildAccounts($account->id);

                    foreach($childAccs as $childAcc) {
                        $stripos = stripos($childAcc->name, $search);
                        if($stripos !== false) {
                            $searched = substr($childAcc->name, $stripos, strlen($search));
                            $choices['childrens'][] = [
                                'id' => $childAcc->id,
                                'text' => str_replace($searched, "<strong>$searched</strong>", $childAcc->name),
                                'parent' => $account->name
                            ];
                        }
                    }
                }
            }
        }

        if($search !== null && $search !== '' && !is_null($choices['childrens'])) {
            usort($choices['childrens'], function ($a, $b) use ($search) {
                $indexA = stripos($a->name, "<strong>$search</strong>") === false ? PHP_INT_MAX : stripos($a->name, "<strong>$search</strong>");
                $indexB = stripos($b->name, "<strong>$search</strong>") === false ? PHP_INT_MAX : stripos($b->name, "<strong>$search</strong>");
                return $indexA - $indexB;
            });
        }

        return $choices;
    }

    private function get_account_types_choices($choices, $search = null, $dropdown = null)
    {
        $types = $this->account_model->getAccounts();

        switch ($dropdown) {
            case 'expense-payment-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return in_array($type->account_name, ['Bank', 'Credit Card', 'Other Current Assets']);
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'expense-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name !== 'Other Assets';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'bank-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Bank';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'payment-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Bank' || $type->account_name === 'Credit Card';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'bank-credit-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Credit Card';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'bank-deposit-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Bank' || $type->account_name === 'Other Current Assets';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'funds-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name !== 'Other Assets' || $type->account_name !== 'Accounts receivable (A/R)';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'transfer-account' :
                $accTypes = [
                    'Bank',
                    'Other Current Assets',
                    'Fixed Assets',
                    'Credit Card',
                    'Other Current Liabilities',
                    'Long Term Liabilities',
                    'Equity'
                ];
                $typeNames = array_filter($types, function($type, $key) use ($accTypes) {
                    return in_array($type->account_name, $accTypes);
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'inventory-adj-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return !in_array($type->account_name, ['Accounts receivable (A/R)', 'Other Assets', 'Accounts payable (A/P)', 'Credit Card', 'Long Term Liabilities']);
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'credit-card-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Credit Card';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'cash-back-account' :
                $accTypes = [
                    'Bank',
                    'Credit Card',
                    'Equity',
                    'Other Current Assets',
                    'Other Current Liabilities'
                ];
                $typeNames = array_filter($types, function($type, $key) use ($accTypes) {
                    return in_array($type->account_name, $accTypes);
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'inv-asset-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Other Current Assets';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'income-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Income';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            case 'item-expense-account' :
                $typeNames = array_filter($types, function($type, $key) {
                    return $type->account_name === 'Cost of Goods Sold';
                }, ARRAY_FILTER_USE_BOTH);
            break;
            default :
                $typeNames = $types;
            break;
        }

        $choices['results'] = [];
        foreach($typeNames as $type) {
            if($search !== null && $search !== '') {
                $stripos = stripos($type->account_name, $search);
                if($stripos !== false) {
                    $searched = substr($type->account_name, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $type->id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $type->account_name)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $type->id,
                    'text' => $type->account_name
                ];
            }
        }

        usort($choices['results'], function($a, $b) {
            return intval($a['id']) > intval($b['id']);
        });

        return $choices;
    }

    private function get_account_details_choices($choices, $search = null, $accType, $dropdown = null)
    {
        $accDetails = $this->account_detail_model->getDetailTypesById($accType);

        if ($dropdown) {
            switch($dropdown) {
                case 'inv-asset-account' :
                    $accDetails = array_filter($accDetails, function($detailType, $key) {
                        return $detailType->acc_detail_name === 'Inventory';
                    }, ARRAY_FILTER_USE_BOTH);
                break;
                case 'income-account' :
                    $accDetails = array_filter($accDetails, function($detailType, $key) {
                        return $detailType->acc_detail_name === 'Sales of Product Income';
                    }, ARRAY_FILTER_USE_BOTH);
                break;
                case 'item-expense-account' :
                    $accDetails = array_filter($accDetails, function($detailType, $key) {
                        return $detailType->acc_detail_name === 'Supplies & Materials - COGS';
                    }, ARRAY_FILTER_USE_BOTH);
                break;
            }
        }

        foreach($accDetails as $accDetail) {
            if($search !== null && $search !== '') {
                $stripos = stripos($accDetail->acc_detail_name, $search);
                if($stripos !== false) {
                    $searched = substr($accDetail->acc_detail_name, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $accDetail->acc_detail_id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $accDetail->acc_detail_name)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $accDetail->acc_detail_id,
                    'text' => $accDetail->acc_detail_name
                ];
            }
        }

        return $choices;
    }

    private function get_items_choices($choices, $search = null, $field = '')
    {
        $filters = [
            'status' => [1]
        ];
        $items = $this->items_model->getItemsWithFilter($filters);

        if($field === 'report') {
            $choices['results'][] = [
                'id' => 'all',
                'text' => 'All'
            ];

            $choices['results'][] = [
                'id' => 'not-specified',
                'text' => 'Not Specified'
            ];

            $choices['results'][] = [
                'id' => 'specified',
                'text' => 'Specified'
            ];
        }

        foreach($items as $item) {
            if($search !== null && $search !== '') {
                $stripos = stripos($item->title, $search);
                if($stripos !== false) {
                    $searched = substr($item->title, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $item->id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $item->title)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $item->id,
                    'text' => $item->title
                ];
            }
        }

        return $choices;
    }

    private function get_services_choices($choices, $search = null)
    {
        $services = $this->items_model->getItemsWithFilter(['type' => ['service', 'Service'], 'status' => [1]]);

        foreach($services as $service) {
            if($search !== null && $search !== '') {
                $stripos = stripos($service->title, $search);
                if($stripos !== false) {
                    $searched = substr($service->title, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $service->id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $service->title)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $service->id,
                    'text' => $service->title
                ];
            }
        }

        return $choices;
    }

    private function get_products_choices($choices, $search = null, $selected = [])
    {
        $products = $this->items_model->getItemsWithFilter(['type' => 'product', 'status' => [1]]);

        if(count($selected) > 0) {
            $products = array_filter($products, function($prod, $key) use ($selected) {
                return in_array($prod->id, $selected);
            }, ARRAY_FILTER_USE_BOTH);
        }

        foreach($products as $product) {
            if($search !== null && $search !== '') {
                $stripos = stripos($product->title, $search);
                if($stripos !== false) {
                    $searched = substr($product->title, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $product->id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $product->title)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $product->id,
                    'text' => $product->title
                ];
            }
        }

        return $choices;
    }

    private function get_product_category_choices($choices, $search = null)
    {
        $categories = $this->items_model->getItemCategories();

        foreach($categories as $category) {
            if($search !== null && $search !== '') {
                $stripos = stripos($category->name, $search);
                if($stripos !== false) {
                    $searched = substr($category->name, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $category->item_categories_id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $category->name)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $category->item_categories_id,
                    'text' => $category->name
                ];
            }
        }

        return $choices;
    }

    private function get_tax_rates_choices($choices, $search = null)
    {
        $rates = $this->TaxRates_model->getAllByCompanyId(getLoggedCompanyID());

        foreach($rates as $rate) {
            if($search !== null && $search !== '') {
                $stripos = stripos($rate->name, $search);
                if($stripos !== false) {
                    $searched = substr($rate->name, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $rate->id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $rate->name)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $rate->id,
                    'text' => $rate->name
                ];
            }
        }

        if($search !== null && $search !== '') {
            $stripos = stripos('Nontaxable', $search);
            if($stripos !== false) {
                $searched = substr('Nontaxable', $stripos, strlen($search));
                $choices['results'][] = [
                    'id' => 0,
                    'text' => str_replace($searched, "<strong>$searched</strong>", 'Nontaxable')
                ];
            }
        } else {
            $choices['results'][] = [
                'id' => 0,
                'text' => 'Nontaxable'
            ];
        }

        return $choices;
    }

    private function get_custom_report_group_choices($choices, $search = null)
    {
        $groups = $this->accounting_custom_reports_model->get_custom_report_groups(logged('company_id'));

        foreach($groups as $group)
        {
            if($search !== null && $search !== '') {
                $stripos = stripos($group->name, $search);
                if($stripos !== false) {
                    $searched = substr($group->name, $stripos, strlen($search));
                    $choices['results'][] = [
                        'id' => $group->id,
                        'text' => str_replace($searched, "<strong>$searched</strong>", $group->name)
                    ];
                }
            } else {
                $choices['results'][] = [
                    'id' => $group->id,
                    'text' => $group->name
                ];
            }
        }

        return $choices;
    }

    public function add_vendor_details_modal()
    {
        $this->page_data['terms'] = $this->accounting_terms_model->getActiveCompanyTerms(logged('company_id'));
        $this->page_data['expenseAccs'] = $this->chart_of_accounts_model->get_expense_accounts();
        $this->page_data['otherExpenseAccs'] = $this->chart_of_accounts_model->get_other_expense_accounts();
        $this->page_data['cogsAccs'] = $this->chart_of_accounts_model->get_cogs_accounts();
        $this->load->view('v2/includes/accounting/modal_forms/vendor_modal', $this->page_data);
    }

    public function add_customer_details_modal()
    {
        $this->page_data['terms'] = $this->accounting_terms_model->getActiveCompanyTerms(logged('company_id'));
        $this->page_data['paymentMethods'] = $this->accounting_payment_methods_model->getCompanyPaymentMethods();
        $this->page_data['customers'] = $this->accounting_customers_model->getAllByCompany();
        $this->load->view('v2/includes/accounting/modal_forms/customer_modal', $this->page_data);
    }

    public function add_full_payee_details()
    {
        $post = $this->input->post();
        
        if ($post['payee_type'] === 'vendor') {
            $data = [
                'company_id' =>logged('company_id'),
                'title' => $post['title'],
                'f_name' => $post['f_name'],
                'm_name' => $post['m_name'],
                'l_name' => $post['l_name'],
                'suffix' => $post['suffix'],
                'email' => $post['email'],
                'company' => $post['company'],
                'display_name' => $post['display_name'],
                'to_display' => $post['use_display_name'],
                'print_on_check_name' => $post['use_display_name'] === "1" ? $post['use_display_name'] : $post['print_on_check_name'],
                'street' => $post['street'],
                'city' => $post['city'],
                'state' => $post['state'],
                'zip' => $post['zip'],
                'country' => $post['country'],
                'phone' => $post['phone'],
                'mobile' => $post['mobile'],
                'fax' => $post['fax'],
                'website' => $post['website'],
                'billing_rate' => $post['billing_rate'],
                'terms' => $post['terms'],
                'opening_balance' => $post['opening_balance'],
                'opening_balance_as_of_date' => date("Y-m-d", strtotime($post['opening_balance_as_of_date'])),
                'account_number' => $post['account_number'],
                'tax_id' => $post['tax_id'],
                'default_expense_account' => $post['default_expense_account'],
                'notes' => $post['notes'],
                'attachments' => isset($post['attachments']) ? json_encode($post['attachments']) : null,
                'status' => 1,
                'created_by' => logged('id')
            ];

            $id = $this->vendors_model->createVendor($data);

            $payee = $this->vendors_model->get_vendor_by_id($id);
        } else {
            $data = [
                'fk_user_id' => logged('id'),
                'company_id' => logged('company_id'),
                'business_name' => $post['company'],
                'first_name' => $post['f_name'],
                'middle_name' => $post['m_name'],
                'last_name' => $post['l_name'],
                'prefix' => $post['title'],
                'suffix' => $post['suffix'],
                'mail_add' => $post['street'],
                'city' => $post['city'],
                'state' => $post['state'],
                'zip_code' => $post['zip'],
                'country' => $post['country'],
                'email' => $post['email'],
                'phone_m' => $post['phone'],
                'contact_phone1' => $post['mobile'],
                'notes' => $post['notes'],
                'customer_type' => $post['customer_type']
            ];
            if ($post['customer_id_edit_info']=="") {
                $id = $this->accounting_customers_model->createCustomer($data);
            } else {
                $id = $post['customer_id_edit_info'];
                $this->accounting_customers_model->updateCustomer($id, $data);
            }
            

            $payee = $this->accounting_customers_model->getCustomerDetails($id)[0];
            $payee->id = $payee->prof_id;

            if ($id) {
                $accountingDetails = [
                    'customer_id' => $id,
                    'company_id' => logged('company_id'),
                    'display_name' => $post['display_name'],
                    'use_display_name' => $post['use_display_name'],
                    'print_check_name' => $post['print_on_check_name'],
                    'fax_no' => $post['fax'],
                    'website' => $post['website'],
                    'is_sub_customer' => $post['sub_customer'],
                    'parent_customer_id' => $post['parent_customer'],
                    'bill_with' => $post['bill_with'],
                    'shipping_address' => $post['shipping_address'],
                    'shipping_city' => $post['shipping_city'],
                    'shipping_state' => $post['shipping_state'],
                    'shipping_zip' => $post['shipping_zip'],
                    'shipping_country' => $post['shipping_country'],
                    'notes' => $post['notes'],
                    'tax_exempted' => $post['cust_tax_exempt'],
                    'tax_rate' => $post['tax_rate'],
                    'reason_for_exemption' => $post['reason_for_exemption'],
                    'exemption_details' => $post['exemption_details'],
                    'payment_method' => $post['cust_payment_method'],
                    'delivery_method' => $post['delivery_method'],
                    'payment_terms' => $post['cust_payment_terms'],
                    'opening_balance' => $post['opening_balance'],
                    'as_of_date' => date("Y-m-d", strtotime($post['as_of_date'])),
                    'attachments' => isset($post['attachments']) ? json_encode($post['attachments']) : null
                ];

                if ($post['customer_id_edit_info']=="") {
                    $accDetailsId = $this->accounting_customers_model->add_customer_accounting_details($accountingDetails);
                } else {
                    if ($this->accounting_customers_model->get_customer_accounting_details($id) != null) {
                        $updated = $this->accounting_customers_model->update_customer_accounting_details($id, $accountingDetails);
                    } else {
                        $accDetailsId = $this->accounting_customers_model->add_customer_accounting_details($accountingDetails);
                    }
                }
            }
        }

        echo json_encode(['payee' => $payee,'updated' => $updated]);
    }

    public function first_detail_type($accTypeId)
    {
        $detailType = $this->account_detail_model->getDetailTypesById($accTypeId)[0];

        echo json_encode($detailType);
    }

    public function ajax_add_account()
    {
        $post = $this->input->post();

        switch($post['choose_time']) {
            case 'beginning-of-year' :
                $date = date("01-01-Y");
            break;
            case 'beginning-of-month' :
                $date = date("m-01-Y");
            break;
            case 'today' :
                $date = date("m-d-Y");
            break;
            case 'other' :
                $date = date("m-d-Y", strtotime($post['time_date']));
            break;
        }

        $name = $post['name'];

        do {
            $nameExists = $this->chart_of_accounts_model->get_by_name($name);

            if(!empty($nameExists)) {
                $name = $post['name'].'-'.count($nameExists);
            }
        } while(!empty($nameExists));

        $data = [
            'company_id' => logged('company_id'),
            'account_id' => $post['account_type'],
            'acc_detail_id' => $post['detail_type'],
            'name' => $name,
            'description' => $post['description'],
            'parent_acc_id' => $post['sub_account_type'],
            'time' => $post['choose_time'],
            'balance' => $post['balance'],
            'time_date' => $date
        ];

        $accountId = $this->chart_of_accounts_model->saverecords($data);
        $account = $this->chart_of_accounts_model->getById($accountId);

        $return = [
            'data' => $accountId ? $account : null,
            'success' => $accountId ? true : false,
            'message' => $accountId ? "Success!" : "Error!"
        ];

        echo json_encode($return);
    }

    public function get_dropdown_modal($modal = '')
    {
        switch($modal) {
            case 'account_modal' :
                $field = $this->input->get('field');
                switch($field) {
                    default :
                        $accountType = $this->account_model->getAccTypeByName('Bank');
                        $this->page_data['detailType'] = $this->account_detail_model->getDetailTypesById($accountType->id)[0];
                    break;
                    case 'bank-credit-account' :
                        $accountType = $this->account_model->getAccTypeByName('Credit Card');
                        $this->page_data['detailType'] = $this->account_detail_model->getDetailTypesById($accountType->id)[0];
                    break;
                    case 'credit-card-account' :
                        $accountType = $this->account_model->getAccTypeByName('Credit Card');
                        $this->page_data['detailType'] = $this->account_detail_model->getDetailTypesById($accountType->id)[0];
                    break;
                    case 'inv-asset-account' :
                        $accountType = $this->account_model->getAccTypeByName('Other Current Assets');
                        $this->page_data['detailType'] = $this->account_detail_model->getByName('Inventory');
                    break;
                    case 'income-account' :
                        $accountType = $this->account_model->getAccTypeByName('Income');
                        $this->page_data['detailType'] = $this->account_detail_model->getByName('Sales of Product Income');
                    break;
                    case 'item-expense-account' :
                        $accountType = $this->account_model->getAccTypeByName('Cost of Goods Sold');
                        $this->page_data['detailType'] = $this->account_detail_model->getByName('Supplies & Materials - COGS');
                    break;
                }

                $this->page_data['accountType'] = $accountType;
            break;
            case 'payee_modal' :
                $this->page_data['type'] = $this->input->get('type');
            break;
            case 'item_modal' :
                $this->page_data['field'] = $this->input->get('field');
            break;
        }
        $this->load->view("v2/includes/accounting/modal_forms/$modal", $this->page_data);
    }

    public function ajax_add_payment_method()
    {
        $post = $this->input->post();

        $data = [
            'company_id' => getLoggedCompanyID(),
            'name' => $post['name'],
            'credit_card' => $post['credit_card'],
            'status' => 1
        ];

        $methodId = $this->accounting_payment_methods_model->create($data);
        $method = $this->accounting_payment_methods_model->getById($methodId);

        $return = [
            'data' => $methodId ? $method : null,
            'success' => $methodId ? true : false,
            'message' => $methodId ? "Success!" : "Error!"
        ];

        echo json_encode($return);
    }

    public function ajax_add_payment_term()
    {
        $post = $this->input->post();

        $data = [
            'company_id' => getLoggedCompanyID(),
            'name' => $post['name'],
            'type' => $post['payment_term_type'],
            'net_due_days' => $post['payment_term_type'] === "1" ? ($post['net_due_days'] === "" ? 0 : $post['net_due_days']) : null,
            'day_of_month_due' => $post['payment_term_type'] === "2" ? ($post['day_of_month_due'] === "" ? 0 : $post['day_of_month_due']) : null,
            'minimum_days_to_pay' => $post['payment_term_type'] === "2" ? ($post['minimum_days_to_pay'] === "" ? 0 : $post['minimum_days_to_pay']) : null,
            'discount_days' => 0,
            'status' => 1
        ];

        $termId = $this->accounting_terms_model->create($data);
        $term = $this->accounting_terms_model->get_by_id($termId, logged('company_id'));

        $return = [
            'data' => $termId ? $term : null,
            'success' => $termId ? true : false,
            'message' => $termId ? "Success!" : "Error!"
        ];

        echo json_encode($return);
    }

    public function get_item_form($type = "")
    {
        if($type) {
            $this->page_data['inventory_asset_accounts'] = $this->chart_of_accounts_model->getByAccAndDetailType(1, 2, 5);
            $this->page_data['income_accounts'] = $this->chart_of_accounts_model->getByAccAndDetailType(1, 11, 86);
            $this->page_data['expense_accounts'] = $this->chart_of_accounts_model->getByAccAndDetailType(1, 13, 98);
            $this->page_data['tax_rates'] = $this->TaxRates_model->getAllByCompanyId(getLoggedCompanyID());
            $this->page_data['vendors'] = $this->vendors_model->getAllByCompany();
            $this->load->view('v2/pages/accounting/sales/products_and_services/item_forms/'.$type, $this->page_data);
            // $this->load->view("accounting/products_services_modals/".$type, $this->page_data);
        }
    }

    public function ajax_add_item($type)
    {
        $post = $this->input->post();
        $name = $post['name'];

        if($_FILES['icon']['name'] !== "") {
            $files = [
                'name' => [
                    $_FILES['icon']['name']
                ],
                'type' => [
                    $_FILES['icon']['type']
                ],
                'tmp_name' => [
                    $_FILES['icon']['tmp_name']
                ],
                'error' => [
                    $_FILES['icon']['tmp_name']
                ],
                'size' => [
                    $_FILES['icon']['size']
                ]
            ];

            $attachmentId = $this->uploadFile($files);
        }

        switch($type) {
            case 'bundle' :
                $data = [
                    'company_id' => logged('company_id'),
                    'title' => $name,
                    'type' => $type,
                    'rebate' => isset($post['rebate_item']) ? $post['rebate_item'] : 0,
                    'description' => $post['description'],
                    'is_active' => 1
                ];
            break;
            case 'product' :
                $data = [
                    'company_id' => logged('company_id'),
                    'title' => $name,
                    'type' => $type,
                    'rebate' => isset($post['rebate_item']) ? $post['rebate_item'] : 0,
                    'item_categories_id' => $post['category'],
                    're_order_points' => $post['reorder_point'],
                    'description' => $post['description'],
                    'price' => $post['price'],
                    'vendor_id' => $post['vendor'],
                    'cost' => $post['cost'],
                    'is_active' => 1
                ];
            break;
            default :
                $data = [
                    'company_id' => logged('company_id'),
                    'title' => $name,
                    'type' => $type,
                    'rebate' => isset($post['rebate_item']) ? $post['rebate_item'] : 0,
                    'item_categories_id' => $post['category'],
                    'description' => isset($post['selling']) ? $post['description'] : null,
                    'price' => isset($post['selling']) ? $post['price'] : null,
                    'vendor_id' => isset($post['purchasing']) ? $post['vendor'] : 0,
                    'cost' => isset($post['purchasing']) ? $post['cost'] : null,
                    'is_active' => 1
                ];
            break;
        }

        $create = $this->items_model->create($data);

        if($create) {
            switch($type) {
                case 'bundle' :
                    $accountingDetails = [
                        'item_id' => $create,
                        'attachment_id' => isset($attachmentId) ? $attachmentId : null,
                        'display_on_print' => isset($post['display_on_print']) ? $post['display_on_print'] : null,
                        'sku' => $post['sku']
                    ];
                    $itemAccDetails = $this->items_model->saveItemAccountingDetails($accountingDetails);

                    $bundleItems = [];
                    foreach($post['item'] as $key => $value) {
                        $bundleItems[] = [
                            'company_id' => logged('company_id'),
                            'item_id' => $create,
                            'bundle_item_id' => $value,
                            'quantity' => $post['quantity'][$key]
                        ];
                    }
                    $addBundleItems = $this->items_model->addBundleItems($bundleItems);
                break;
                case 'product' :
                    $accountingDetails = [
                        'item_id' => $create,
                        'attachment_id' => isset($attachmentId) ? $attachmentId : null,
                        'sku' => $post['sku'],
                        'as_of_date' => date('Y-m-d', strtotime($post['as_of_date'])),
                        'qty_po' => 0,
                        'inv_asset_acc_id' => $post['inv_asset_account'],
                        'income_account_id' => $post['income_account'],
                        'tax_rate_id' => $post['sales_tax_category'],
                        'purchase_description' => $post['purchase_description'],
                        'expense_account_id' => $post['item_expense_account'],
                    ];
                    $itemAccDetails = $this->items_model->saveItemAccountingDetails($accountingDetails);
    
                    $locations = [];
                    foreach($post['location_name'] as $key => $locName) {
                        if($locName !== "") {
                            $locations[] = [
                                'company_id' => logged('company_id'),
                                'qty' => $post['quantity'][$key],
                                'name' => $locName,
                                'item_id' => $create,
                                'insert_date' => date('Y-m-d H:i:s')
                            ];
                        }
                    }
                    $addItemLocs = $this->items_model->saveBatchItemLocation($locations);
                break;
                default :
                    $accountingDetails = [
                        'item_id' => $create,
                        'attachment_id' => isset($attachmentId) ? $attachmentId : null,
                        'sku' => $post['sku'],
                        'income_account_id' => isset($post['selling']) ? $post['income_account'] : null,
                        'tax_rate_id' => isset($post['selling']) ? $post['sales_tax_category'] : 0,
                        'purchase_description' => isset($post['purchasing']) ? $post['purchase_description'] : null,
                        'expense_account_id' => isset($post['purchasing']) ? $post['item_expense_account'] : null,
                    ];
                    $itemAccDetails = $this->items_model->saveItemAccountingDetails($accountingDetails);
                break;
            }
        }

        $return = [
            'data' => $this->items_model->getItemById($create)[0],
            'success' => $create && $itemAccDetails ? true : false,
            'message' => $create && $itemAccDetails ? "Item $name has been successfully added." : "Please try again!"
        ];

        echo json_encode($return);
    }

    private function uploadFile($files)
    {
        $this->load->helper('string');
        $data = [];
        foreach($files['name'] as $key => $name) {
            $extension = end(explode('.', $name));

            do {
                $randomString = random_string('alnum');
                $fileNameToStore = $randomString . '.' .$extension;
                $exists = file_exists('./uploads/accounting/attachments/'.$fileNameToStore);
            } while ($exists);

            $fileType = explode('/', $files['type'][$key]);
            $uploadedName = str_replace('.'.$extension, '', $name);

            $data[] = [
                'company_id' => getLoggedCompanyID(),
                'type' => $fileType[0] === 'application' ? ucfirst($fileType[1]) : ucfirst($fileType[0]),
                'uploaded_name' => $uploadedName,
                'stored_name' => $fileNameToStore,
                'file_extension' => $extension,
                'size' => $files['size'][$key],
                'notes' => null,
                'status' => 1
            ];

            move_uploaded_file($files['tmp_name'][$key], './uploads/accounting/attachments/'.$fileNameToStore);
        }

        $insert = $this->accounting_attachments_model->insertBatch($data);

        return $insert;
    }

    public function get_account_details($accountId)
    {
        echo json_encode($this->chart_of_accounts_model->getById($accountId));
    }

    public function get_item_category_details($categoryId)
    {
        echo json_encode($this->items_model->getCategory($categoryId));
    }

    public function get_sales_tax_category_details($taxCategoryId)
    {
        if($taxCategoryId === "0") {
            $taxCategory = new stdClass();
            $taxCategory->id = "0";
            $taxCategory->name = "Nontaxable";

            echo json_encode($taxCategory);
        } else {
            echo json_encode($this->TaxRates_model->getById($taxCategoryId));
        }
    }

    public function ajax_add_item_category()
    {
        $post = $this->input->post();

        $data = [
            'company_id' => getLoggedCompanyID(),
            'name' => $post['name']
        ];

        $categoryId = $this->items_model->insertCategory($data);
        $category = $this->items_model->getCategory($categoryId);

        $return = [
            'data' => $categoryId ? $category : null,
            'success' => $categoryId ? true : false,
            'message' => $categoryId ? "Success!" : "Error!"
        ];

        echo json_encode($return);
    }

    public function adjust_starting_value_form($item_id)
    {
        $item = $this->items_model->getItemById($item_id)[0];
        $itemAccDetails = $this->items_model->getItemAccountingDetails($item_id);
        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);

        $this->page_data['item'] = $item;
        $this->page_data['accountingDetails'] = $itemAccDetails;
        $this->page_data['invAssetAcc'] = $invAssetAcc;
        $this->page_data['locations'] = $this->items_model->getLocationByItemId($item_id);
        $this->load->view('accounting/modals/adjust_starting_value', $this->page_data);
    }
    public function adjust_starting_value($item_id)
    {
        $item = $this->items_model->getItemById($item_id)[0];
        $itemAccDetails = $this->items_model->getItemAccountingDetails($item_id);
        $startingValAdjustment = $this->starting_value_model->get_by_item_id($item_id);

        $startValueAdjData = [
            'company_id' => logged('company_id'),
            'item_id' => $item_id,
            'ref_no' => $this->input->post('ref_no'),
            'location_id' => $this->input->post('location'),
            'initial_qty' => $this->input->post('initial_qty_on_hand'),
            'as_of_date' => date('Y-m-d', strtotime($this->input->post('as_of_date'))),
            'initial_cost' => $this->input->post('initial_cost'),
            'inv_adj_account' => $this->input->post('inventory_adj_account'),
            'inv_asset_account' => !is_null($startingValAdjustment) ? $startingValAdjustment->inv_asset_account : $itemAccDetails->inv_asset_acc_id,
            'memo' => $this->input->post('memo'),
            'total_amount' => floatval(str_replace(',', '', $this->input->post('initial_qty_on_hand'))) * floatval(str_replace(',', '', $this->input->post('initial_cost'))),
            'status' => 1
        ];

        if(!is_null($startingValAdjustment)) {
            // REVERT PREVIOUS ADJUSTMENT
            $locationId = $startingValAdjustment->location_id;
            $location = $this->items_model->getItemLocation($locationId, $item_id);
            $quantity = intval($location->qty) - intval($startingValAdjustment->initial_qty);
            $quantity = intval($location->initial_qty) + $quantity;
            $locationDetails = [
                'qty' => $quantity
            ];

            $condition = ['id' => $locationId, 'item_id' => $item_id, 'company_id' => logged('company_id')];
            $updateLocation = $this->items_model->updateLocationDetails($locationDetails, $condition);

            $adjustmentAcc = $this->chart_of_accounts_model->getById($startingValAdjustment->inv_adj_account);
            $newBalance = floatval(str_replace(',', '', $adjustmentAcc->balance)) + floatval(str_replace(',', '', $startingValAdjustment->total_amount));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $adjustmentAccData = [
                'id' => $adjustmentAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($adjustmentAccData);

            $invAssetAcc = $this->chart_of_accounts_model->getById($startingValAdjustment->inv_asset_account);
            $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - floatval(str_replace(',', '', $startingValAdjustment->total_amount));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $invAssetAccData = [
                'id' => $invAssetAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($invAssetAccData);
        }

        // $itemData = [
        //     'cost' => $startValueAdjData['initial_cost']
        // ];

        // $accDetails = [
        //     'as_of_date' => $startValueAdjData['as_of_date']
        // ];

        $locationId = $startValueAdjData['location_id'];
        $location = $this->items_model->getItemLocation($locationId, $item_id);
        $quantity = intval($location->qty) - intval($location->initial_qty);
        $quantity = intval($startValueAdjData['initial_qty']) + $quantity;
        $locationDetails = [
            'qty' => $quantity
        ];

        // Update item initial cost in items
        // $updateItem = $this->items_model->update($itemData, ['id' => $item_id, 'company_id' => logged('company_id')]);

        // Update item as of date in item_accounting_details table
        // $updateAccDetails = $this->items_model->updateItemAccountingDetails($accDetails, $item_id);

        // Update initial quantity and quantity of item in items_has_storage_loc table
        $condition = ['id' => $locationId, 'item_id' => $item_id, 'company_id' => logged('company_id')];
        $updateLocation = $this->items_model->updateLocationDetails($locationDetails, $condition);

        $adjustmentAcc = $this->chart_of_accounts_model->getById($startValueAdjData['inv_adj_account']);
        $newBalance = floatval(str_replace(',', '', $adjustmentAcc->balance)) - floatval(str_replace(',', '', $startValueAdjData['total_amount']));
        $newBalance = number_format($newBalance, 2, '.', ',');

        $adjustmentAccData = [
            'id' => $adjustmentAcc->id,
            'company_id' => logged('company_id'),
            'balance' => floatval(str_replace(',', '', $newBalance))
        ];

        $this->chart_of_accounts_model->updateBalance($adjustmentAccData);

        $invAssetAcc = $this->chart_of_accounts_model->getById($startValueAdjData['inv_asset_account']);
        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + floatval(str_replace(',', '', $startValueAdjData['total_amount']));
        $newBalance = number_format($newBalance, 2, '.', ',');

        $invAssetAccData = [
            'id' => $invAssetAcc->id,
            'company_id' => logged('company_id'),
            'balance' => floatval(str_replace(',', '', $newBalance))
        ];

        $this->chart_of_accounts_model->updateBalance($invAssetAccData);

        // Insert starting value adjustment record
        if(is_null($startingValAdjustment)) {
            $startingValueAdjData['company_id'] = logged('company_id');
            $startingValueAdjData['status'] = 1;
            $sql = $this->starting_value_model->create($startValueAdjData);
        } else {
            $sql = $this->starting_value_model->update($startingValAdjustment->id, $startValueAdjData);
        }

        if ($sql > 0) {
            $this->session->set_flashdata('success', "Item $item->title starting value successfully adjusted.");
        } else {
            $this->session->set_flashdata('error', "Please try again!");
        }

        redirect($_SERVER['HTTP_REFERER']);
    }

    public function get_linked_attachments($linkedType, $linkedId)
    {
        switch ($linkedType) {
            case 'expense':
                $attachments = $this->accounting_attachments_model->get_attachments('Expense', $linkedId);
            break;
            case 'check':
                $attachments = $this->accounting_attachments_model->get_attachments('Check', $linkedId);
            break;
            case 'bill':
                $attachments = $this->accounting_attachments_model->get_attachments('Bill', $linkedId);
            break;
            case 'purchase-order':
                $attachments = $this->accounting_attachments_model->get_attachments('Purchase Order', $linkedId);
            break;
            case 'vendor-credit':
                $attachments = $this->accounting_attachments_model->get_attachments('Vendor Credit', $linkedId);
            break;
            case 'credit-card-payment':
                $attachments = $this->accounting_attachments_model->get_attachments('CC Payment', $linkedId);
            break;
            case 'credit-card-pmt':
                $attachments = $this->accounting_attachments_model->get_attachments('CC Payment', $linkedId);
            break;
            case 'credit-card-credit':
                $attachments = $this->accounting_attachments_model->get_attachments('CC Credit', $linkedId);
            break;
            case 'bill-payment':
                $attachments = $this->accounting_attachments_model->get_attachments('Bill Payment', $linkedId);
            break;
            case 'journal' :
                $attachments = $this->accounting_attachments_model->get_attachments('Journal', $linkedId);
            break;
            case 'transfer' :
                $attachments = $this->accounting_attachments_model->get_attachments('Transfer', $linkedId);
            break;
            case 'deposit' :
                $attachments = $this->accounting_attachments_model->get_attachments('Deposit', $linkedId);
            break;
            case 'vendor' :
                $attachments = $this->accounting_attachments_model->get_attachments('Vendor', $linkedId);
            break;
            case 'cc-payment':
                $attachments = $this->accounting_attachments_model->get_attachments('CC Payment', $linkedId);
            break;
            case 'receive-payment' :
                $attachments = $this->accounting_attachments_model->get_attachments('Payment', $linkedId);
            break;
            case 'invoice' :
                $attachments = $this->accounting_attachments_model->get_attachments('Invoice', $linkedId);
            break;
            case 'credit-memo' :
                $attachments = $this->accounting_attachments_model->get_attachments('Credit Memo', $linkedId);
            break;
            case 'sales-receipt' :
                $attachments = $this->accounting_attachments_model->get_attachments('Sales Receipt', $linkedId);
            break;
            case 'refund-receipt' :
                $attachments = $this->accounting_attachments_model->get_attachments('Refund Receipt', $linkedId);
            break;
            case 'delayed-charge' :
                $attachments = $this->accounting_attachments_model->get_attachments('Delayed Charge', $linkedId);
            break;
            case 'delayed-credit' :
                $attachments = $this->accounting_attachments_model->get_attachments('Delayed Credit', $linkedId);
            break;
        }

        echo json_encode($attachments);
    }

    public function view_transaction($transactionType, $transactionId)
    {
        switch($transactionType) {
            case 'expense':
                $this->view_expense($transactionId);
            break;
            case 'check':
                $this->view_check($transactionId);
            break;
            case 'journal' :
                $this->view_journal($transactionId);
            break;
            case 'bill':
                $this->view_bill($transactionId);
            break;
            case 'cc-credit' :
                $this->view_cc_credit($transactionId);
            break;
            case 'vendor-credit':
                $this->view_vendor_credit($transactionId);
            break;
            case 'bill-payment':
                $this->view_bill_payment($transactionId);
            break;
            case 'transfer' :
                $this->view_transfer($transactionId);
            break;
            case 'deposit' :
                $this->view_deposit($transactionId);
            break;
            case 'inventory-qty-adjust' :
                $this->view_qty_adjustment($transactionId);
            break;
            case 'credit-card-pmt':
                $this->view_cc_payment($transactionId);
            break;
            case 'inventory-starting-value' :
                $this->view_starting_value_adjustment($transactionId);
            break;
            case 'purchase-order' :
                $this->view_purchase_order($transactionId);
            break;
            case 'cc-payment':
                $this->view_cc_payment($transactionId);
            break;
            case 'qty-adjustment' :
                $this->view_qty_adjustment($transactionId);
            break;
            case 'time-activity' :
                $this->view_time_activity($transactionId);
            break;
            case 'receive-payment' :
                $this->view_receive_payment($transactionId);
            break;
            case 'unapplied-payment' :
                $this->view_unapplied_payment($transactionId);
            break;
            case 'credit-memo' :
                $this->view_credit_memo($transactionId);
            break;
            case 'sales-receipt' :
                $this->view_sales_receipt($transactionId);
            break;
            case 'refund-receipt' :
                $this->view_refund_receipt($transactionId);
            break;
            case 'delayed-credit' :
                $this->view_delayed_credit($transactionId);
            break;
            case 'delayed-charge' :
                $this->view_delayed_charge($transactionId);
            break;
            case 'invoice' :
                $this->view_invoice($transactionId);
            break;
            case 'estimate' :
                $this->view_estimate($transactionId);
            break;
            case 'billable-expense' :
                $this->view_billable_expense($transactionId);
            break;
        }
    }

    private function view_expense($expenseId)
    {
        $expense = $this->vendors_model->get_expense_by_id($expenseId, logged('company_id'));

        $paymentAcc = $this->chart_of_accounts_model->getById($expense->payment_account_id);

        $selectedBalance = $paymentAcc->balance;
        if (strpos($selectedBalance, '-') !== false) {
            $balance = str_replace('-', '', $selectedBalance);
            $selectedBalance = '-$'.number_format(floatval(str_replace(',', '', $balance)), 2, '.', ',');
        } else {
            $selectedBalance = '$'.number_format(floatval(str_replace(',', '', $selectedBalance)), 2, '.', ',');
        }

        $categories = $this->expenses_model->get_transaction_categories($expenseId, 'Expense');
        $items = $this->expenses_model->get_transaction_items($expenseId, 'Expense');

        foreach($categories as $key => $expenseCat) {
            if(!is_null($expenseCat->linked_transaction_type) && !is_null($expenseCat->linked_transaction_id)) {
                $categories[$key]->linked_transac = $this->vendors_model->get_purchase_order_by_id($expenseCat->linked_transaction_id, logged('company_id'));
            }
        }

        foreach($items as $key => $expenseItem) {
            if(!is_null($expenseItem->linked_transaction_type) && !is_null($expenseItem->linked_transaction_id)) {
                $items[$key]->linked_transac = $this->vendors_model->get_purchase_order_by_id($expenseItem->linked_transaction_id, logged('company_id'));
            }
        }

        $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('expense', $expenseId);
        if(count($linkedTransactions) > 0) {
            $linked = [];
            foreach($linkedTransactions as $linkedData) {
                $linked[] = [
                    'type' => 'Purchase Order',
                    'transaction' => $this->vendors_model->get_purchase_order_by_id($linkedData->linked_transaction_id, logged('company_id'))
                ];
            }

            $expense->linked_transacs = $linked;
        }

        $linkableTransactions = [];

        if($expense->payee_type === 'vendor') {
            $purchaseOrders = $this->expenses_model->get_vendor_open_purchase_orders($expense->payee_id);

            foreach ($purchaseOrders as $purchaseOrder) {
                $balance = '$'.number_format(floatval(str_replace(',', '', $purchaseOrder->remaining_balance)), 2, '.', ',');
                $total = '$'.number_format(floatval(str_replace(',', '', $purchaseOrder->total_amount)), 2, '.', ',');

                if($purchaseOrder->status === "1" && array_search($purchaseOrder->id, array_column($linkedTransactions, 'linked_transaction_id')) === false) {
                    $linkableTransactions[] = [
                        'type' => 'Purchase Order',
                        'data_type' => 'purchase-order',
                        'id' => $purchaseOrder->id,
                        'number' => $purchaseOrder->purchase_order_no === null || $purchaseOrder->purchase_order_no === '' ? '' : $purchaseOrder->purchase_order_no,
                        'date' => date("m/d/Y", strtotime($purchaseOrder->purchase_order_date)),
                        'formatted_date' => date("F j", strtotime($purchaseOrder->purchase_order_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        $transactions = $this->expenses_model->get_company_expense_transactions(['company_id' => logged('company_id')]);
        usort($transactions, function($a, $b) {
            return strtotime($b->created_at) > strtotime($a->created_at);
        });

        $this->page_data['linkableTransactions'] = $linkableTransactions;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Expense', $expenseId);
        $this->page_data['expense'] = $expense;
        $this->page_data['categories'] = $categories;
        $this->page_data['items'] = $items;
        $this->page_data['balance'] = $selectedBalance;

        $this->load->view("v2/includes/accounting/modal_forms/expense_modal", $this->page_data);
    }

    private function view_check($checkId)
    {
        $check = $this->vendors_model->get_check_by_id($checkId, logged('company_id'));

        $bankAcc = $this->chart_of_accounts_model->getById($check->bank_account_id);

        $selectedBalance = $bankAcc->balance;
        if (strpos($selectedBalance, '-') !== false) {
            $balance = str_replace('-', '', $selectedBalance);
            $selectedBalance = '-$'.number_format(floatval(str_replace(',', '', $balance)), 2, '.', ',');
        } else {
            $selectedBalance = '$'.number_format(floatval(str_replace(',', '', $selectedBalance)), 2, '.', ',');
        }

        $categories = $this->expenses_model->get_transaction_categories($checkId, 'Check');
        $items = $this->expenses_model->get_transaction_items($checkId, 'Check');

        foreach($categories as $key => $expenseCat) {
            if(!is_null($expenseCat->linked_transaction_type) && !is_null($expenseCat->linked_transaction_id)) {
                $categories[$key]->linked_transac = $this->vendors_model->get_purchase_order_by_id($expenseCat->linked_transaction_id, logged('company_id'));
            }
        }

        foreach($items as $key => $expenseItem) {
            if(!is_null($expenseItem->linked_transaction_type) && !is_null($expenseItem->linked_transaction_id)) {
                $items[$key]->linked_transac = $this->vendors_model->get_purchase_order_by_id($expenseItem->linked_transaction_id, logged('company_id'));
            }
        }

        $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('check', $checkId);
        if(count($linkedTransactions) > 0) {
            $linked = [];
            foreach($linkedTransactions as $linkedData) {
                $linked[] = [
                    'type' => 'Purchase Order',
                    'transaction' => $this->vendors_model->get_purchase_order_by_id($linkedData->linked_transaction_id, logged('company_id'))
                ];
            }

            $check->linked_transacs = $linked;
        }

        $linkableTransactions = [];

        if($check->payee_type === 'vendor') {
            $purchaseOrders = $this->expenses_model->get_vendor_open_purchase_orders($check->payee_id);

            foreach ($purchaseOrders as $purchaseOrder) {
                $balance = '$'.number_format(floatval(str_replace(',', '', $purchaseOrder->remaining_balance)), 2, '.', ',');
                $total = '$'.number_format(floatval(str_replace(',', '', $purchaseOrder->total_amount)), 2, '.', ',');

                if($purchaseOrder->status === "1" && array_search($purchaseOrder->id, array_column($linkedTransactions, 'linked_transaction_id')) === false) {
                    $linkableTransactions[] = [
                        'type' => 'Purchase Order',
                        'data_type' => 'purchase-order',
                        'id' => $purchaseOrder->id,
                        'number' => $purchaseOrder->purchase_order_no === null || $purchaseOrder->purchase_order_no === '' ? '' : $purchaseOrder->purchase_order_no,
                        'date' => date("m/d/Y", strtotime($purchaseOrder->purchase_order_date)),
                        'formatted_date' => date("F j", strtotime($purchaseOrder->purchase_order_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        $transactions = $this->expenses_model->get_company_check_transactions(['company_id' => logged('company_id')]);
        usort($transactions, function($a, $b) {
            return strtotime($b->created_at) > strtotime($a->created_at);
        });

        $this->page_data['linkableTransactions'] = $linkableTransactions;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Check', $checkId);
        $this->page_data['check'] = $check;
        $this->page_data['categories'] = $categories;
        $this->page_data['items'] = $items;
        $this->page_data['balance'] = $selectedBalance;

        $this->load->view("v2/includes/accounting/modal_forms/check_modal", $this->page_data);
    }

    private function view_bill($billId)
    {
        $bill = $this->vendors_model->get_bill_by_id($billId, logged('company_id'));
        $term = $this->accounting_terms_model->get_by_id($bill->term_id, logged('company_id'));

        $billPayments = $this->vendors_model->get_bill_payments_by_bill_id($billId);

        $totalPayment = 0.00;
        foreach ($billPayments as $billPayment) {
            $paymentItems = $this->vendors_model->get_bill_payment_items($billPayment->id);

            foreach ($paymentItems as $paymentItem) {
                if ($paymentItem->bill_id === $billId) {
                    $totalPayment += floatval(str_replace(',', '', $paymentItem->total_amount));
                }
            }
        }

        $categories = $this->expenses_model->get_transaction_categories($billId, 'Bill');
        $items = $this->expenses_model->get_transaction_items($billId, 'Bill');

        foreach($categories as $key => $expenseCat) {
            if(!is_null($expenseCat->linked_transaction_type) && !is_null($expenseCat->linked_transaction_id)) {
                $categories[$key]->linked_transac = $this->vendors_model->get_purchase_order_by_id($expenseCat->linked_transaction_id, logged('company_id'));
            }
        }

        foreach($items as $key => $expenseItem) {
            if(!is_null($expenseItem->linked_transaction_type) && !is_null($expenseItem->linked_transaction_id)) {
                $items[$key]->linked_transac = $this->vendors_model->get_purchase_order_by_id($expenseItem->linked_transaction_id, logged('company_id'));
            }
        }

        $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('bill', $billId);
        if(count($linkedTransactions) > 0) {
            $linked = [];
            foreach($linkedTransactions as $linkedData) {
                $linked[] = [
                    'type' => 'Purchase Order',
                    'transaction' => $this->vendors_model->get_purchase_order_by_id($linkedData->linked_transaction_id, logged('company_id'))
                ];
            }

            $bill->linked_transacs = $linked;
        }

        $linkableTransactions = [];

        $purchaseOrders = $this->expenses_model->get_vendor_open_purchase_orders($bill->vendor_id);

        foreach ($purchaseOrders as $purchaseOrder) {
            $balance = '$'.number_format(floatval(str_replace(',', '', $purchaseOrder->remaining_balance)), 2, '.', ',');
            $total = '$'.number_format(floatval(str_replace(',', '', $purchaseOrder->total_amount)), 2, '.', ',');

            if($purchaseOrder->status === "1" && array_search($purchaseOrder->id, array_column($linkedTransactions, 'linked_transaction_id')) === false) {
                $linkableTransactions[] = [
                    'type' => 'Purchase Order',
                    'data_type' => 'purchase-order',
                    'id' => $purchaseOrder->id,
                    'number' => $purchaseOrder->purchase_order_no === null || $purchaseOrder->purchase_order_no === '' ? '' : $purchaseOrder->purchase_order_no,
                    'date' => date("m/d/Y", strtotime($purchaseOrder->purchase_order_date)),
                    'formatted_date' => date("F j", strtotime($purchaseOrder->purchase_order_date)),
                    'total' => str_replace('$-', '-$', $total),
                    'balance' => str_replace('$-', '-$', $balance)
                ];
            }
        }

        $this->page_data['linkableTransactions'] = $linkableTransactions;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Bill', $billId);
        $this->page_data['bill_payments'] = $billPayments;
        $this->page_data['total_payment'] = number_format(floatval(str_replace(',', '', $totalPayment)), 2, '.', ',');
        $this->page_data['due_date'] = $bill->due_date !== "" && !is_null($bill->due_date) ? date("m/d/Y", strtotime($bill->due_date)) : "";
        $this->page_data['bill'] = $bill;
        $this->page_data['categories'] = $categories;
        $this->page_data['items'] = $items;
        $this->page_data['term'] = $term;

        $this->load->view("v2/includes/accounting/modal_forms/bill_modal", $this->page_data);
    }

    private function view_vendor_credit($vendorCreditId)
    {
        $vendorCredit = $this->vendors_model->get_vendor_credit_by_id($vendorCreditId, logged('company_id'));

        $categories = $this->expenses_model->get_transaction_categories($vendorCreditId, 'Vendor Credit');
        $items = $this->expenses_model->get_transaction_items($vendorCreditId, 'Vendor Credit');

        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Vendor Credit', $vendorCreditId);
        $this->page_data['vendorCredit'] = $vendorCredit;
        $this->page_data['categories'] = $categories;
        $this->page_data['items'] = $items;

        $this->load->view("v2/includes/accounting/modal_forms/vendor_credit_modal", $this->page_data);
    }

    private function view_cc_payment($ccPaymentId)
    {
        $ccPayment = $this->vendors_model->get_credit_card_payment_by_id($ccPaymentId);

        $this->page_data['ccPayment'] = $ccPayment;

        $this->load->view("v2/includes/accounting/modal_forms/pay_down_credit_card_modal", $this->page_data);
    }

    private function view_cc_credit($ccCreditId)
    {
        $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($ccCreditId, logged('company_id'));

        $creditCard = $this->chart_of_accounts_model->getById($ccCredit->bank_credit_account_id);

        $selectedBalance = $creditCard->balance;
        if (strpos($selectedBalance, '-') !== false) {
            $balance = str_replace('-', '', $selectedBalance);
            $selectedBalance = '-$'.number_format(floatval(str_replace(',', '', $balance)), 2, '.', ',');
        } else {
            $selectedBalance = '$'.number_format(floatval(str_replace(',', '', $selectedBalance)), 2, '.', ',');
        }

        $categories = $this->expenses_model->get_transaction_categories($ccCreditId, 'Credit Card Credit');
        $items = $this->expenses_model->get_transaction_items($ccCreditId, 'Credit Card Credit');

        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('CC Credit', $ccCreditId);
        $this->page_data['ccCredit'] = $ccCredit;
        $this->page_data['categories'] = $categories;
        $this->page_data['items'] = $items;
        $this->page_data['balance'] = $selectedBalance;

        $this->load->view("v2/includes/accounting/modal_forms/credit_card_credit_modal", $this->page_data);
    }

    private function view_bill_payment($billPaymentId)
    {
        $billPayment = $this->vendors_model->get_bill_payment_by_id($billPaymentId);
        $paymentAcc = $this->chart_of_accounts_model->getById($billPayment->payment_account_id);

        $selectedBalance = $paymentAcc->balance;
        if (strpos($selectedBalance, '-') !== false) {
            $balance = str_replace('-', '', $selectedBalance);
            $selectedBalance = '-$'.number_format(floatval(str_replace(',', '', $balance)), 2, '.', ',');
        } else {
            $selectedBalance = '$'.number_format(floatval(str_replace(',', '', $selectedBalance)), 2, '.', ',');
        }

        $filters = [
            'from' => null,
            'to' => null,
            'overdue' => false,
            'bill_payment_id' => $billPaymentId,
            'payee_id' => $billPayment->payee_id,
            'search' => ''
        ];

        $bills = $this->get_bills($filters);
        $credits = $this->get_credits($filters);

        $this->page_data['bills'] = $bills;
        $this->page_data['credits'] = $credits;

        $linkableBills = $this->expenses_model->get_vendor_open_bills($billPayment->payee_id);
        $vendorCredits = $this->expenses_model->get_vendor_unapplied_vendor_credits($billPayment->payee_id);

        $transactions = [];
        if (isset($linkableBills) && count($linkableBills) > 0) {
            foreach ($linkableBills as $bill) {
                $selected = array_filter($bills, function($paymentBill, $key) use ($bill) {
                    return $paymentBill['id'] === $bill->id && $paymentBill['selected'];
                }, ARRAY_FILTER_USE_BOTH);

                $balance = '$'.number_format(floatval($bill->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($bill->total_amount), 2, '.', ',');

                if(count($selected) < 1) {
                    $transactions[] = [
                        'type' => 'Bill',
                        'data_type' => 'bill',
                        'id' => $bill->id,
                        'number' => $bill->bill_no === null || $bill->bill_no === '' ? '' : $bill->bill_no,
                        'date' => date("m/d/Y", strtotime($bill->due_date)),
                        'formatted_date' => date("F j", strtotime($bill->due_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        if (isset($vendorCredits) && count($vendorCredits) > 0) {
            foreach ($vendorCredits as $vendorCredit) {
                $selected = array_filter($credits, function($credit, $key) use ($vendorCredit) {
                    return $credit['id'] === $vendorCredit->id && $credit['selected'];
                }, ARRAY_FILTER_USE_BOTH);

                $balance = '$'.number_format(floatval($vendorCredit->remaining_balance), 2, '.', ',');
                $total = '$'.number_format(floatval($vendorCredit->total_amount), 2, '.', ',');

                if(count($selected) < 1) {
                    $transactions[] = [
                        'type' => 'Vendor Credit',
                        'data_type' => 'vendor-credit',
                        'id' => $vendorCredit->id,
                        'number' => $vendorCredit->ref_no === null || $vendorCredit->ref_no === '' ? '' : $vendorCredit->ref_no,
                        'date' => date("m/d/Y", strtotime($vendorCredit->payment_date)),
                        'formatted_date' => date("F j", strtotime($vendorCredit->payment_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        $this->page_data['linkableTransactions'] = $transactions;
        $this->page_data['billPayment'] = $this->vendors_model->get_bill_payment_by_id($billPaymentId);
        $this->page_data['vendor'] = $this->vendors_model->get_vendor_by_id($billPayment->payee_id);
        $this->page_data['balance'] = $selectedBalance;

        $this->load->view("v2/includes/accounting/modal_forms/view_bill_payment", $this->page_data);
    }

    private function view_journal($journalId)
    {
        $journalEntry = $this->accounting_journal_entries_model->getById($journalId, logged('company_id'));
        $entries = $this->accounting_journal_entries_model->getEntries($journalEntry->id);

        foreach($entries as $key => $entry) {
            $entries[$key]->account = $this->chart_of_accounts_model->getById($entry->account_id);

            switch($entry->name_key) {
                case 'customer' :
                    $customer = $this->accounting_customers_model->get_by_id($entry->name_id);
                    $entries[$key]->name = $customer->first_name . ' ' . $customer->last_name;
                break;
                case 'vendor' :
                    $vendor = $this->vendors_model->get_vendor_by_id($entry->name_id);
                    $entries[$key]->name = $vendor->display_name;
                break;
                case 'employee' :
                    $employee = $this->users_model->getUser($entry->name_id);
                    $entries[$key]->name = $employee->FName . ' ' . $employee->LName;
                break;
            }
        }

        $this->page_data['journal_no'] = $journalEntry->journal_no;
        $this->page_data['journal_date'] = $journalEntry->journal_date !== "" && !is_null($journalEntry->journal_date) ? date("m/d/Y", strtotime($journalEntry->journal_date)) : "";
        $this->page_data['entries'] = $entries;
        $this->page_data['journal_entry'] = $journalEntry;

        $this->load->view("v2/includes/accounting/modal_forms/journal_entry_modal", $this->page_data);
    }

    private function view_transfer($transferId)
    {
        $transfer = $this->accounting_transfer_funds_model->getById($transferId, logged('company_id'));
        $transfer->transfer_from = $this->chart_of_accounts_model->getById($transfer->transfer_from_account_id);
        $transfer->transfer_to = $this->chart_of_accounts_model->getById($transfer->transfer_to_account_id);

        $this->page_data['transfer'] = $transfer;
        $this->load->view("v2/includes/accounting/modal_forms/transfer_modal", $this->page_data);
    }

    private function view_deposit($depositId)
    {
        $deposit = $this->accounting_bank_deposit_model->getById($depositId, logged('company_id'));
        $account = $this->chart_of_accounts_model->getById($deposit->account_id);
        $balance = '$'.number_format(floatval(str_replace(',', '', $account->balance)), 2, '.', ',');
        $balance = str_replace('$-', '-$', $balance);
        $cashBackAccount = $this->chart_of_accounts_model->getById($deposit->cash_back_account_id);
        $funds = $this->accounting_bank_deposit_model->getFunds($deposit->id);

        foreach($funds as $key => $fund) {
            $funds[$key]->account = $this->chart_of_accounts_model->getById($fund->received_from_account_id);

            switch($fund->received_from_key) {
                case 'customer' :
                    $customer = $this->accounting_customers_model->get_by_id($fund->received_from_id);
                    $funds[$key]->name = $customer->first_name . ' ' . $customer->last_name;
                break;
                case 'vendor' :
                    $vendor = $this->vendors_model->get_vendor_by_id($fund->received_from_id);
                    $funds[$key]->name = $vendor->display_name;
                break;
                case 'employee' :
                    $employee = $this->users_model->getUser($fund->received_from_id);
                    $funds[$key]->name = $employee->FName . ' ' . $employee->LName;
                break;
            }

            $funds[$key]->payment = $this->accounting_payment_methods_model->getById($fund->payment_method);
        }

        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Deposit', $depositId);
        $this->page_data['deposit'] = $deposit;
        $this->page_data['funds'] = $funds;
        $this->page_data['account'] = $account;
        $this->page_data['balance'] = $balance;
        $this->page_data['cash_back_account'] = $cashBackAccount;

        $this->load->view("v2/includes/accounting/modal_forms/bank_deposit_modal", $this->page_data);
    }

    private function view_qty_adjustment($adjustmentId)
    {
        $adjustment = $this->accounting_inventory_qty_adjustments_model->get_by_id($adjustmentId);
        $adjustment->account = $this->chart_of_accounts_model->getById($adjustment->inventory_adjustment_account_id);
        $adjustedProds = $this->accounting_inventory_qty_adjustments_model->get_adjusted_products($adjustment->id);

        foreach($adjustedProds as $key => $adjustedProd) {
            $adjustedProds[$key]->product = $this->items_model->getItemById($adjustedProd->product_id)[0];
            $adjustedProds[$key]->locations = $this->items_model->getLocationByItemId($adjustedProd->product_id);
        }

        $this->page_data['adjustment_no'] = $adjustment->adjustment_no;
        $this->page_data['adjustment'] = $adjustment;
        $this->page_data['adjustedProds'] = $adjustedProds;

        $this->load->view("v2/includes/accounting/modal_forms/inventory_qty_modal", $this->page_data);
    }

    private function view_starting_value_adjustment($adjustmentId)
    {
        $adjustment = $this->starting_value_model->get_by_id($adjustmentId);
        $adjustment->account = $this->chart_of_accounts_model->getById($adjustment->inv_adj_account);
        $item = $this->items_model->getItemById($adjustment->item_id)[0];
        $itemAccDetails = $this->items_model->getItemAccountingDetails($item->id);
        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);

        $this->page_data['item'] = $item;
        $this->page_data['accountingDetails'] = $itemAccDetails;
        $this->page_data['invAssetAcc'] = $invAssetAcc;
        $this->page_data['locations'] = $this->items_model->getLocationByItemId($item->id);
        $this->page_data['adjustment'] = $adjustment;

        $this->load->view("v2/includes/accounting/modal_forms/adjust_starting_value", $this->page_data);
    }

    private function view_purchase_order($purchaseOrderId)
    {
        $purchaseOrder = $this->vendors_model->get_purchase_order_by_id($purchaseOrderId, logged('company_id'));

        $categories = $this->expenses_model->get_transaction_categories($purchaseOrderId, 'Purchase Order');
        $items = $this->expenses_model->get_transaction_items($purchaseOrderId, 'Purchase Order');

        $this->page_data['purchaseOrder'] = $purchaseOrder;
        $this->page_data['categories'] = $categories;
        $this->page_data['items'] = $items;

        $this->load->view("v2/includes/accounting/modal_forms/purchase_order_modal", $this->page_data);
    }

    private function view_time_activity($timeActivityId)
    {
        $timeActivity = $this->accounting_single_time_activity_model->get_by_id($timeActivityId);

        switch($timeActivity->name_key) {
            case 'employee' :
                $employee = $this->users_model->getUser($timeActivity->name_id);
                $timeActivity->name = $employee->FName . ' ' . $employee->LName;
            break;
            case 'vendor' :
                $vendor = $this->vendors_model->get_vendor_by_id($timeActivity->name_id);
                $timeActivity->name = $vendor->display_name;
            break;
        }

        if($timeActivity->time === null) {
            $startTime = strtotime($timeActivity->start_time);
            $endTime = strtotime($timeActivity->end_time);
            $break = strtotime($timeActivity->break_duration === '' ? "00:00" : $timeActivity->break_duration);
            $duration = date("H:i:s", (($endTime - $startTime) - $break));
        } else {
            $duration = date("H:i:s", strtotime($timeActivity->time));
        }
        $hms = explode(":", $duration);
        $totalTime = $hms[0].' hours';
        $totalTime .= $hms[1] !== '00' ? ' '.$hms[1].' minute' : '';

        $customer = $this->accounting_customers_model->get_by_id($timeActivity->customer_id);
        $timeActivity->customer = $customer->first_name . ' ' . $customer->last_name;
        $timeActivity->service = $this->items_model->getItemById($timeActivity->service_id)[0]->title;

        $time = '00:00';
        $endTime = '23:45';
        
        $times = [
            [
                'value' => $time,
                'display' => date('h:i A', strtotime($time))
            ]
        ];

        for ($i = 0; $time != $endTime; $i++) {
            $time = date('H:i', strtotime($time . '+ 15 minutes'));

            $times[] = [
                'value' => $time,
                'display' => date('h:i A', strtotime($time))
            ];
        }

        $this->page_data['totalTime'] = $totalTime;
        $this->page_data['dropdown']['times'] = $times;
        $this->page_data['timeActivity'] = $timeActivity;
        $this->page_data['timesheetSettings'] = $this->accounting_timesheet_settings_model->get_by_company_id(logged('company_id'));

        $this->load->view("v2/includes/accounting/modal_forms/single_time_activity_modal", $this->page_data);
    }

    private function view_receive_payment($paymentId)
    {
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);
        $creditMemos = $this->accounting_credit_memo_model->get_customer_open_credit_memos(['company_id' => logged('company_id'), 'customer_id' => $payment->customer_id]);
        $paymentCreditMemos = $this->accounting_receive_payment_model->get_payment_credits($payment->id);
        $unappliedPayments = $this->accounting_receive_payment_model->get_customer_unapplied_payments(['customer_id' => $payment->customer_id]);

        $this->page_data['payment'] = $payment;

        $credits = [];
        foreach($creditMemos as $creditMemo) {
            $credits[] = $creditMemo;
        }
        foreach($paymentCreditMemos as $creditMemo) {
            $credits[] = $creditMemo;
        }
        foreach($unappliedPayments as $payment) {
            $credits[] = $payment;
        }

        $this->page_data['credits'] = $credits;
        $this->load->view("v2/includes/accounting/modal_forms/receive_payment_modal", $this->page_data);
    }
    
    private function view_unapplied_payment($paymentId)
    {
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);
        $creditMemos = $this->accounting_credit_memo_model->get_customer_open_credit_memos(['company_id' => logged('company_id'), 'customer_id' => $payment->customer_id]);

        $this->page_data['payment'] = $payment;
        $this->page_data['creditMemos'] = $creditMemos;
        $this->load->view("v2/includes/accounting/modal_forms/receive_payment_modal", $this->page_data);
    }

    private function view_credit_memo($creditMemoId)
    {
        $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($creditMemoId);
        $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Credit Memo', $creditMemoId);
        $payments = $this->accounting_credit_memo_model->get_credit_memo_payments($creditMemoId);

        foreach($items as $key => $item) {
            if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
            } else {
                $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                $items[$key]->packageItems = json_decode($item->package_item_details);
            }
        }

        $paymentAmounts = array_column($payments, 'payment_amount');
        $totalPayment = array_sum($paymentAmounts);

        foreach($payments as $key => $payment) {
            $receivePayment = $this->accounting_receive_payment_model->getReceivePaymentDetails($payment->receive_payment_id);
            $payments[$key]->receive_payment = $receivePayment;
        }

        $this->page_data['creditMemo'] = $creditMemo;
        $this->page_data['items'] = $items;
        $this->page_data['payments'] = $payments;
        $this->page_data['totalPayment'] = $totalPayment;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Credit Memo', $creditMemoId);

        $this->load->view("v2/includes/accounting/modal_forms/credit_memo_modal", $this->page_data);
    }

    private function view_sales_receipt($salesReceiptId)
    {
        $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($salesReceiptId);
        $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Sales Receipt', $salesReceiptId);

        foreach($items as $key => $item) {
            if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
            } else {
                $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                $items[$key]->packageItems = json_decode($item->package_item_details);
            }
        }

        $this->page_data['receipt'] = $salesReceipt;
        $this->page_data['items'] = $items;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Sales Receipt', $salesReceiptId);
        $this->load->view("v2/includes/accounting/modal_forms/sales_receipt_modal", $this->page_data);
    }

    private function view_refund_receipt($refundReceiptId)
    {
        $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($refundReceiptId);
        $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Refund Receipt', $refundReceiptId);
        $refundAcc = $this->chart_of_accounts_model->getById($refundReceipt->refund_from_account);

        foreach($items as $key => $item) {
            if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
            } else {
                $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                $items[$key]->packageItems = json_decode($item->package_item_details);
            }
        }

        $this->page_data['receipt'] = $refundReceipt;
        $this->page_data['items'] = $items;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Refund Receipt', $refundReceiptId);
        $this->page_data['refundAcc'] = $refundAcc;
        $this->load->view("v2/includes/accounting/modal_forms/refund_receipt_modal", $this->page_data);
    }

    private function view_delayed_credit($delayedCreditId)
    {
        $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($delayedCreditId);
        $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Delayed Credit', $delayedCreditId);

        $linkedTo = $this->accounting_linked_transactions_model->get_linked_to_transaction('delayed-credit', $delayedCreditId);

        foreach($items as $key => $item) {
            if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
            } else {
                $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                $items[$key]->packageItems = json_decode($item->package_item_details);
            }
        }

        if(count($linkedTo) > 0) {
            $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));
            $invoice = $this->invoice_model->getinvoice($linkedTo[0]->linked_to_id);
            $this->page_data['invoiceSetting'] = $invoiceSettings;
            $this->page_data['invoice'] = $invoice;
        }
        $this->page_data['credit'] = $delayedCredit;
        $this->page_data['items'] = $items;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Delayed Credit', $delayedCreditId);
        $this->load->view("v2/includes/accounting/modal_forms/delayed_credit_modal", $this->page_data);
    }

    private function view_delayed_charge($delayedChargeId)
    {
        $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($delayedChargeId);
        $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Delayed Charge', $delayedChargeId);

        $linkedTo = $this->accounting_linked_transactions_model->get_linked_to_transaction('delayed-charge', $delayedChargeId);

        foreach($items as $key => $item) {
            if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
            } else {
                $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                $items[$key]->packageItems = json_decode($item->package_item_details);
            }
        }

        if(count($linkedTo) > 0) {
            $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));
            $invoice = $this->invoice_model->getinvoice($linkedTo[0]->linked_to_id);
            $this->page_data['invoiceSetting'] = $invoiceSettings;
            $this->page_data['invoice'] = $invoice;
        }
        $this->page_data['charge'] = $delayedCharge;
        $this->page_data['items'] = $items;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Delayed Charge', $delayedChargeId);
        $this->load->view("v2/includes/accounting/modal_forms/delayed_charge_modal", $this->page_data);
    }

    private function view_invoice($invoiceId)
    {
        $invoice = $this->invoice_model->getinvoice($invoiceId);
        $invoiceItems = $this->invoice_model->get_invoice_items($invoiceId);
        $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);
        $term = $this->accounting_terms_model->get_by_id($invoice->terms, logged('company_id'));
        $paymentMethods = explode(',', $invoice->payment_methods);
        $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

        $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('invoice', $invoiceId);
        if(count($linkedTransactions) > 0) {
            $linked = [];
            foreach($linkedTransactions as $linkedData) {
                if($linkedData->linked_transaction_type === 'delayed-credit') {
                    $linked[] = [
                        'type' => 'Delayed Credit',
                        'transaction' => $this->accounting_delayed_credit_model->getDelayedCreditDetails($linkedData->linked_transaction_id)
                    ];
                } else {
                    $linked[] = [
                        'type' => 'Delayed Charge',
                        'transaction' => $this->accounting_delayed_charge_model->getDelayedChargeDetails($linkedData->linked_transaction_id)
                    ];
                }
            }

            $invoice->linked_transacs = $linked;
        }

        $discount = 0.00;
        foreach($invoiceItems as $key => $invoiceItem) {
            if(!in_array($invoiceItem->items_id, ['0', null, '']) && in_array($invoiceItem->package_id, ['0', null, ''])) {
                $invoiceItems[$key]->itemDetails = $this->items_model->getItemById($invoiceItem->items_id)[0];
                $invoiceItems[$key]->locations = $this->items_model->getLocationByItemId($invoiceItem->items_id);
            } else {
                $invoiceItems[$key]->packageDetails = $this->items_model->get_package_by_id($invoiceItem->package_id);
                $invoiceItems[$key]->packageItems = json_decode($invoiceItem->package_item_details);
            }

            $discount += floatval(str_replace(',', '', $invoiceItem->discount));

            if(!is_null($invoiceItem->linked_transaction_type) && !is_null($invoiceItem->linked_transaction_id)) {
                if($invoiceItem->linked_transaction_type === 'delayed_credit') {
                    $invoiceItems[$key]->linked_transac = $this->accounting_delayed_credit_model->getDelayedCreditDetails($invoiceItem->linked_transaction_id);
                } else {
                    $invoiceItems[$key]->linked_transac = $this->accounting_delayed_charge_model->getDelayedChargeDetails($invoiceItem->linked_transaction_id);
                }
            }
        }

        $invoice->discount_total = $discount;

        $credits = $this->accounting_delayed_credit_model->get_customer_delayed_credits($invoice->customer_id, logged('company_id'));
        $charges = $this->accounting_delayed_charge_model->get_customer_delayed_charges($invoice->customer_id, logged('company_id'));

        $linkableTransactions = [];
        if(isset($credits) && count($credits)) {
            foreach($credits as $credit) {
                $balance = '$'.number_format(floatval(str_replace(',', '', $credit->remaining_balance)), 2, '.', ',');
                $total = '$'.number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ',');

                if($credit->status === "1") {
                    $linkableTransactions[] = [
                        'type' => 'Credit',
                        'data_type' => 'delayed-credit',
                        'id' => $credit->id,
                        'number' => $credit->ref_no === null || $credit->ref_no === '' ? '' : $credit->ref_no,
                        'date' => date("m/d/Y", strtotime($credit->delayed_credit_date)),
                        'formatted_date' => date("F j", strtotime($credit->delayed_credit_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        if(isset($charges) && count($charges)) {
            foreach($charges as $charge) {
                $balance = '$'.number_format(floatval(str_replace(',', '', $charge->remaining_balance)), 2, '.', ',');
                $total = '$'.number_format(floatval(str_replace(',', '', $charge->total_amount)), 2, '.', ',');

                if($charge->status === "1") {
                    $linkableTransactions[] = [
                        'type' => 'Charge',
                        'data_type' => 'delayed-charge',
                        'id' => $charge->id,
                        'number' => $charge->ref_no === null || $charge->ref_no === '' ? '' : $charge->ref_no,
                        'date' => date("m/d/Y", strtotime($charge->delayed_charge_date)),
                        'formatted_date' => date("F j", strtotime($charge->delayed_charge_date)),
                        'total' => str_replace('$-', '-$', $total),
                        'balance' => str_replace('$-', '-$', $balance)
                    ];
                }
            }
        }

        $totalPayment = 0.00;
        foreach($paymentRecords as $record)
        {
            $totalPayment += floatval($record->invoice_amount);
        }

        $customer = $this->accounting_customers_model->get_by_id($invoice->customer_id);
        $this->page_data['customer'] = $customer;
        $this->page_data['linkableTransactions'] = $linkableTransactions;
        $this->page_data['invoice_prefix'] = $invoiceSettings->invoice_num_prefix;
        $this->page_data['paymentMethods'] = $paymentMethods;
        $this->page_data['invoice'] = $invoice;
        $this->page_data['items'] = $invoiceItems;
        $this->page_data['payments'] = $paymentRecords;
        $this->page_data['totalPayment'] = $totalPayment;
        $this->page_data['term'] = $term;
        $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Invoice', $invoiceId);
        $this->load->view("v2/includes/accounting/modal_forms/invoice_modal", $this->page_data);
    }

    private function view_estimate($estimateId)
    {
        $estimate = $this->estimate_model->getEstimate($estimateId);

        switch($estimate->estimate_type) {
            case 'Standard' :
                $view = "standard_estimate_modal";
                $items = $this->estimate_model->getItemlistByID($estimateId);

                $discount = 0.00;
                foreach($items as $key => $item) {
                    $items[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];

                    $discount += floatval($item->discount);
                }

                $this->page_data['discount'] = $discount;
                $this->page_data['items'] = $items;
            break;
            case 'Option' :
                $view = "options_estimate_modal";
                $itemsOption1 = $this->estimate_model->getItemlistByIDOption1($estimateId);

                foreach($itemsOption1 as $key => $item) {
                    $itemsOption1[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                }

                $this->page_data['itemsOption1'] = $itemsOption1;

                $itemsOption2 = $this->estimate_model->getItemlistByIDOption2($estimateId);

                foreach($itemsOption2 as $key => $item) {
                    $itemsOption2[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                }

                $this->page_data['itemsOption2'] = $itemsOption2;
            break;
            case 'Bundle' :
                $view = "bundle_estimate_modal";
                $itemsBundle1 = $this->estimate_model->getItemlistByIDBundle1($estimateId);

                foreach($itemsBundle1 as $key => $item) {
                    $itemsBundle1[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                }

                $this->page_data['itemsBundle1'] = $itemsBundle1;

                $itemsBundle2 = $this->estimate_model->getItemlistByIDBundle2($estimateId);

                foreach($itemsBundle2 as $key => $item) {
                    $itemsBundle2[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                }

                $this->page_data['itemsBundle2'] = $itemsBundle2;
            break;
        }

        $this->page_data['estimate'] = $estimate;

        $this->load->view("v2/includes/accounting/modal_forms/$view", $this->page_data);
    }

    private function view_billable_expense($id)
    {
        $billableExpense = $this->expenses_model->get_vendor_transaction_category_by_id($id);
        $customer = $this->accounting_customers_model->get_by_id($billableExpense->customer_id);
        $customerName = $customer->first_name . ' ' . $customer->last_name;

        switch($billableExpense->transaction_type) {
            case 'Expense' :
                $expense = $this->vendors_model->get_expense_by_id($billableExpense->transaction_id, logged('company_id'));
                $date = date("m/d/Y", strtotime($expense->payment_date));
            break;
            case 'Check' :
                $check = $this->vendors_model->get_check_by_id($billableExpense->transaction_id, logged('company_id'));
                $date = date("m/d/Y", strtotime($check->payment_date));
            break;
            case 'Bill' :
                $bill = $this->vendors_model->get_bill_by_id($billableExpense->transaction_id, logged('company_id'));
                $date = date("m/d/Y", strtotime($bill->bill_date));
            break;
            case 'Vendor Credit' :
                $vendorCredit = $this->vendors_model->get_vendor_credit_by_id($billableExpense->transaction_id, logged('company_id'));
                $date = date("m/d/Y", strtotime($vendorCredit->payment_date));
            break;
            case 'Credit Card Credit' :
                $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($billableExpense->transaction_id, logged('company_id'));
                $date = date("m/d/Y", strtotime($ccCredit->payment_date));
            break;
        }

        $this->page_data['billableExpense'] = $billableExpense;
        $this->page_data['customer'] = $customerName;
        $this->page_data['date'] = $date;
        $this->page_data['account'] = $this->chart_of_accounts_model->getById($billableExpense->expense_account_id);
        $this->page_data['markupAcc'] = $this->chart_of_accounts_model->getById($billableExpense->markup_account_id);
        $this->load->view("v2/includes/accounting/modal_forms/billable_expense_modal", $this->page_data);
    }

    private function get_bills($filters)
    {
        $bills = $this->vendors_model->get_bill_payment_bills_by_vendor_id($filters['bill_payment_id'], $filters['payee_id'], $filters);
        $openBills = $this->vendors_model->get_vendor_open_bills($filters['payee_id'], $filters);

        $data = [];
        foreach ($bills as $bill) {
            $paymentData = $this->vendors_model->get_bill_payment_item_by_bill_id($filters['bill_payment_id'], $bill->id);
            $description = '<a href="#" class="text-decoration-none" data-id="'.$bill->id.'">Bill ';
            $description .= $bill->bill_no !== "" && !is_null($bill->bill_no) ? '# '.$bill->bill_no.' ' : '';
            $description .= '</a>';
            $description .= '('.date("m/d/Y", strtotime($bill->bill_date)).')';

            if ($filters['search'] !== "") {
                if (stripos($bill->bill_no, $filters['search']) !== false) {
                    $data[] = [
                        'id' => $bill->id,
                        'description' => $description,
                        'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                        'original_amount' => number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ','),
                        'open_balance' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)) + floatval(str_replace(',', '', $paymentData->total_amount)), 2, '.', ','),
                        'payment' => number_format(floatval(str_replace(',', '', $paymentData->total_amount)), 2, '.', ','),
                        'selected' => true
                    ];
                }
            } else {
                $data[] = [
                    'id' => $bill->id,
                    'description' => $description,
                    'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                    'original_amount' => number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ','),
                    'open_balance' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)) + floatval(str_replace(',', '', $paymentData->total_amount)), 2, '.', ','),
                    'payment' => number_format(floatval(str_replace(',', '', $paymentData->total_amount)), 2, '.', ','),
                    'selected' => true
                ];
            }
        }

        if (count($openBills) > 0) {
            foreach ($openBills as $bill) {
                $description = '<a href="#" class="text-decoration-none" data-id="'.$bill->id.'">Bill ';
                $description .= $bill->bill_no !== "" && !is_null($bill->bill_no) ? '# '.$bill->bill_no.' ' : '';
                $description .= '</a>';
                $description .= '('.date("m/d/Y", strtotime($bill->bill_date)).')';

                if ($filters['search'] !== "") {
                    if (stripos($bill->bill_no, $filters['search']) !== false) {
                        $data[] = [
                            'id' => $bill->id,
                            'description' => $description,
                            'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                            'original_amount' => number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ','),
                            'open_balance' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)), 2, '.', ','),
                            'payment' => '',
                            'selected' => false
                        ];
                    }
                } else {
                    $data[] = [
                        'id' => $bill->id,
                        'description' => $description,
                        'due_date' => date("m/d/Y", strtotime($bill->due_date)),
                        'original_amount' => number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ','),
                        'open_balance' => number_format(floatval(str_replace(',', '', $bill->remaining_balance)), 2, '.', ','),
                        'payment' => '',
                        'selected' => false
                    ];
                }
            }
        }

        return $data;
    }

    public function get_bills_to_pay($billPaymentId)
    {
        $post = $this->input->post();
        $billPayment = $this->vendors_model->get_bill_payment_by_id($billPaymentId);

        $filters = [
            'from' => $post['from'] !== "" ? date("Y-m-d", strtotime($post['from'])) : null,
            'to' => $post['to'] !== "" ? date("Y-m-d", strtotime($post['to'])) : null,
            'overdue' => $post['overdue'] === 'true',
            'bill_payment_id' => $billPaymentId,
            'payee_id' => $billPayment->payee_id,
            'search' => $post['search']
        ];

        $data = $this->get_bills($filters);

        echo json_encode($data);
    }

    private function get_credits($filters)
    {
        $billPayment = $this->vendors_model->get_bill_payment_by_id($filters['bill_payment_id']);
        $credits = json_decode($billPayment->vendor_credits_applied, true);
        $openCredits = $this->expenses_model->get_vendor_unapplied_vendor_credits($billPayment->payee_id);
        $paymentCredits = $this->expenses_model->get_payment_with_credits_by_vendor($billPayment->payee_id);

        $data = [];
        foreach ($credits as $creditData) {
            if($creditData['credit-type'] === 'vendor-credit') {
                $credit = $this->vendors_model->get_vendor_credit_by_id($creditData['id'], logged('company_id'));

                $description = '<a href="#" class="text-decoration-none" data-id="'.$credit->id.'" data-type="vendor-credit">Vendor Credit ';
                $description .= $credit->ref_no !== "" && !is_null($credit->ref_no) ? '# '.$credit->ref_no.' ' : '';
                $description .= '</a>';
                $description .= '('.date("m/d/Y", strtotime($credit->payment_date)).')';
    
                if ($filters['search'] !== "") {
                    if (stripos($credit->ref_no, $filters['search']) !== false) {
                        $data[] = [
                            'id' => $credit->id,
                            'type' => 'vendor-credit',
                            'description' => $description,
                            'date' => date("m/d/Y", strtotime($credit->payment_date)),
                            'original_amount' => number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ','),
                            'open_balance' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)) + floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                            'payment' => number_format(floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                            'selected' => true
                        ];
                    }
                } else {
                    $data[] = [
                        'id' => $credit->id,
                        'type' => 'vendor-credit',
                        'description' => $description,
                        'date' => date("m/d/Y", strtotime($credit->payment_date)),
                        'original_amount' => number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ','),
                        'open_balance' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)) + floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                        'payment' => number_format(floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                        'selected' => true
                    ];
                }
            } else {
                $payment = $this->vendors_model->get_bill_payment_by_id($creditData['id'], logged('company_id'));

                $description = '<a href="#" class="text-decoration-none" data-id="'.$payment->id.'" data-type="bill-payment">Unapplied Payment ';
                $description .= $payment->check_no !== "" && !is_null($payment->check_no) ? '# '.$payment->check_no.' ' : '';
                $description .= '</a>';
                $description .= '('.date("m/d/Y", strtotime($payment->payment_date)).')';

                if ($filters['search'] !== "") {
                    if (stripos($payment->check_no, $filters['search']) !== false) {
                        $data[] = [
                            'id' => $payment->id,
                            'type' => 'bill-payment',
                            'description' => $description,
                            'date' => date("m/d/Y", strtotime($payment->payment_date)),
                            'original_amount' => number_format(floatval(str_replace(',', '', $payment->total_credits_amount)), 2, '.', ','),
                            'open_balance' => number_format(floatval(str_replace(',', '', $payment->available_credits_amount)) + floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                            'payment' => number_format(floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                            'selected' => true
                        ];
                    }
                } else {
                    $data[] = [
                        'id' => $payment->id,
                        'type' => 'bill-payment',
                        'description' => $description,
                        'date' => date("m/d/Y", strtotime($payment->payment_date)),
                        'original_amount' => number_format(floatval(str_replace(',', '', $payment->total_credits_amount)), 2, '.', ','),
                        'open_balance' => number_format(floatval(str_replace(',', '', $payment->available_credits_amount)) + floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                        'payment' => number_format(floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                        'selected' => true
                    ];
                }
            }
        }

        if (count($openCredits) > 0) {
            foreach ($openCredits as $credit) {
                $description = '<a href="#" class="text-decoration-none" data-id="'.$credit->id.'" data-type="vendor-credit">Vendor Credit ';
                $description .= $credit->ref_no !== "" && !is_null($credit->ref_no) ? '# '.$credit->ref_no.' ' : '';
                $description .= '</a>';
                $description .= '('.date("m/d/Y", strtotime($credit->payment_date)).')';

                $exist = array_filter($data, function($value, $key) use ($credit) {
                    return $value['type'] === 'vendor-credit' && $value['id'] === $credit->id;
                }, ARRAY_FILTER_USE_BOTH);

                if(count($exist) < 1) {
                    if ($filters['search'] !== "") {
                        if (stripos($credit->ref_no, $filters['search']) !== false) {
                            $data[] = [
                                'id' => $credit->id,
                                'description' => $description,
                                'type' => 'vendor-credit',
                                'date' => date("m/d/Y", strtotime($credit->payment_date)),
                                'original_amount' => number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ','),
                                'open_balance' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)), 2, '.', ','),
                                'payment' => '',
                                'selected' => false
                            ];
                        }
                    } else {
                        $data[] = [
                            'id' => $credit->id,
                            'description' => $description,
                            'type' => 'vendor-credit',
                            'date' => date("m/d/Y", strtotime($credit->payment_date)),
                            'original_amount' => number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ','),
                            'open_balance' => number_format(floatval(str_replace(',', '', $credit->remaining_balance)), 2, '.', ','),
                            'payment' => '',
                            'selected' => false
                        ];
                    }
                }
            }
        }

        if(count($paymentCredits) > 0) {
            foreach($paymentCredits as $paymentCredit)
            {
                $description = '<a href="#" class="text-decoration-none" data-id="'.$paymentCredit->id.'" data-type="bill-payment">Unapplied Payment ';
                $description .= $paymentCredit->check_no !== "" && !is_null($paymentCredit->check_no) ? '# '.$paymentCredit->check_no.' ' : '';
                $description .= '</a>';
                $description .= '('.date("m/d/Y", strtotime($paymentCredit->payment_date)).')';

                $exist = array_filter($data, function($value, $key) use ($paymentCredit) {
                    return $value['type'] === 'bill-payment' && $value['id'] === $paymentCredit->id;
                }, ARRAY_FILTER_USE_BOTH);

                if(count($exist) < 1 && $paymentCredit->id !== $billPayment->id) {
                    if ($filters['search'] !== "") {
                        if (stripos($paymentCredit->check_no, $filters['search']) !== false) {
                            $data[] = [
                                'id' => $paymentCredit->id,
                                'description' => $description,
                                'type' => 'bill-payment',
                                'date' => date("m/d/Y", strtotime($paymentCredit->payment_date)),
                                'original_amount' => number_format(floatval(str_replace(',', '', $paymentCredit->total_credits_amount)), 2, '.', ','),
                                'open_balance' => number_format(floatval(str_replace(',', '', $paymentCredit->available_credits_amount)) + floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                                'payment' => '',
                                'selected' => false
                            ];
                        }
                    } else {
                        $data[] = [
                            'id' => $paymentCredit->id,
                            'description' => $description,
                            'type' => 'bill-payment',
                            'date' => date("m/d/Y", strtotime($paymentCredit->payment_date)),
                            'original_amount' => number_format(floatval(str_replace(',', '', $paymentCredit->total_credits_amount)), 2, '.', ','),
                            'open_balance' => number_format(floatval(str_replace(',', '', $paymentCredit->available_credits_amount)) + floatval(str_replace(',', '', $creditData['amount'])), 2, '.', ','),
                            'payment' => '',
                            'selected' => false
                        ];
                    }
                }
            }
        }

        if(isset($filters['from']) && !is_null($filters['from'])) {
            $data = array_filter($data, function($credit, $key) use ($filters) {
                return strtotime($credit['date']) >= strtotime($filters['from']);
            }, ARRAY_FILTER_USE_BOTH);
        }

        if(isset($filters['to']) && !is_null($filters['to'])) {
            $data = array_filter($data, function($credit, $key) use ($filters) {
                return strtotime($credit['date']) <= strtotime($filters['to']);
            }, ARRAY_FILTER_USE_BOTH);
        }

        return $data;
    }

    public function get_payment_used_credits($billPaymentId)
    {
        $post = $this->input->post();

        $filters = [
            'from' => $post['from'] !== "" ? date("Y-m-d", strtotime($post['from'])) : null,
            'to' => $post['to'] !== "" ? date("Y-m-d", strtotime($post['to'])) : null,
            'bill_payment_id' => $billPaymentId,
            'payee_id' => $billPayment->payee_id,
            'search' => $post['search']
        ];

        $data = $this->get_credits($filters);

        echo json_encode($data);
    }

    public function update_transaction($transactionType, $transactionId)
    {
        $data = $this->input->post();

        switch ($transactionType) {
            case 'expense':
                $return = $this->update_expense($transactionId, $data);
            break;
            case 'check':
                $return = $this->update_check($transactionId, $data);
            break;
            case 'bill':
                $return = $this->update_bill($transactionId, $data);
            break;
            case 'purchase-order':
                $return = $this->update_purchase_order($transactionId, $data);
            break;
            case 'vendor-credit':
                $return = $this->update_vendor_credit($transactionId, $data);
            break;
            case 'credit-card-credit':
                $return = $this->update_credit_card_credit($transactionId, $data);
            break;
            case 'bill-payment':
                $return = $this->update_bill_payment($transactionId, $data);
            break;
            case 'credit-card-payment' :
                $return = $this->update_cc_payment($transactionId, $data);
            break;
            case 'deposit' :
                $return = $this->update_deposit($transactionId, $data);
            break;
            case 'transfer' :
                $return = $this->update_transfer($transactionId, $data);
            break;
            case 'journal' :
                $return = $this->update_journal($transactionId, $data);
            break;
            case 'inventory-qty-adjust' :
                $return = $this->update_quantity_adjustment($transactionId, $data);
            break;
            case 'inventory-starting-value' :
                $return = $this->update_starting_value_adjustment($transactionId, $data);
            break;
            case 'weekly-timesheet' :
                $return = $this->update_weekly_timesheet($transactionId, $data);
            break;
            case 'time-activity' : 
                $return = $this->update_time_activity($transactionId, $data);
            break;
            case 'receive-payment' :
                $return = $this->update_receive_payment($transactionId, $data);
            break;
            case 'credit-memo' :
                $return = $this->update_credit_memo($transactionId, $data);
            break;
            case 'sales-receipt' :
                $return = $this->update_sales_receipt($transactionId, $data);
            break;
            case 'refund-receipt' :
                $return = $this->update_refund_receipt($transactionId, $data);
            break;
            case 'delayed-credit' :
                $return = $this->update_delayed_credit($transactionId, $data);
            break;
            case 'delayed-charge' :
                $return = $this->update_delayed_charge($transactionId, $data);
            break;
            case 'invoice' :
                $return = $this->update_invoice($transactionId, $data);
            break;
            case 'standard-estimate' :
                $return = $this->update_standard_estimate($transactionId, $data);
            break;
            case 'option-estimate' :
                $return = $this->update_option_estimate($transactionId, $data);
            break;
            case 'bundle-estimate' :
                $return = $this->update_bundle_estimate($transactionId, $data);
            break;
            case 'billable-expense' :
                $return = $this->update_billable_expense($transactionId, $data);
            break;
        }

        echo json_encode($return);
    }

    private function update_expense($expenseId, $data)
    {
        $expense = $this->vendors_model->get_expense_by_id($expenseId, logged('company_id'));
        $payee = explode('-', $data['payee']);
        $expenseData = [
            'payee_type' => $payee[0],
            'payee_id' => $payee[1],
            'payment_account_id' => $data['expense_payment_account'],
            'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
            'payment_method_id' => $data['payment_method'],
            'ref_no' => $data['ref_no'] === "" ? null : $data['ref_no'],
            'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
            'memo' => $data['memo'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount']))
        ];

        $update = $this->vendors_model->update_expense($expenseId, $expenseData);

        if ($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('Expense', $expense->id);
            $tags = $this->tags_model->get_transaction_tags('Expense', $expense->id);
            $this->accounting_linked_transactions_model->unlink_all_from_linked_to('expense', $expenseId);

            if(!is_null($data['linked_transaction'])) {
                $linkedTransacsData = [];
                foreach($data['linked_transaction'] as $linkedTransac) {
                    $explode = explode('-', $linkedTransac);

                    $linkedTransacsData[] = [
                        'linked_to_type' => 'expense',
                        'linked_to_id' => $expenseId,
                        'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                        'linked_transaction_id' => $explode[1]
                    ];
                }

                $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Expense', 'tag_id' => $tag->id, 'transaction_id' => $expense->id]);
                    }
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Expense',
                        'transaction_id' => $expense->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Expense', 'attachment_id' => $attachment->id, 'linked_id' => $expense->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Expense',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $expenseId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Expense',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $expenseId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Expense', $expenseId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Expense', $expenseId);

            $paymentAcc = $this->chart_of_accounts_model->getById($data['expense_payment_account']);
            $paymentAccType = $this->account_model->getById($paymentAcc->account_id);
            if ($paymentAccType->account_name === 'Credit Card') {
                $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));
            } else {
                $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
            }
            $newBalance = number_format($newBalance, 2, '.', ',');

            $paymentAccData = [
                'id' => $paymentAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($paymentAccData);

            $accTransacData = [
                'account_id' => $paymentAcc->id,
                'transaction_type' => 'Expense',
                'transaction_id' => $expenseId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'type' => 'decrease',
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_categories('Expense', $expenseId, $data);
            $this->update_items('Expense', $expenseId, $data);
        }

        return [
            'data' => $expenseId,
            'success' => $update ? true : false,
            'message' => $update ? 'Update Successful!' : 'An unexpected error occured'
        ];
    }

    private function update_check($checkId, $data)
    {
        $check = $this->vendors_model->get_check_by_id($checkId, logged('company_id'));
        $payee = explode('-', $data['payee']);

        $checkData = [
            'payee_type' => $payee[0],
            'payee_id' => $payee[1],
            'bank_account_id' => $data['bank_account'],
            'mailing_address' => nl2br($data['mailing_address']),
            'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
            'check_no' => isset($data['print_later']) ? null : $data['check_no'] === '' ? null : $data['check_no'],
            'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
            'to_print' => $data['print_later'],
            'memo' => $data['memo'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount']))
        ];

        $update = $this->vendors_model->update_check($checkId, $checkData);

        if ($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('Check', $check->id);
            $tags = $this->tags_model->get_transaction_tags('Check', $check->id);
            $this->accounting_linked_transactions_model->unlink_all_from_linked_to('check', $checkId);

            if(!is_null($data['linked_transaction'])) {
                $linkedTransacsData = [];
                foreach($data['linked_transaction'] as $linkedTransac) {
                    $explode = explode('-', $linkedTransac);

                    $linkedTransacsData[] = [
                        'linked_to_type' => 'check',
                        'linked_to_id' => $checkId,
                        'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                        'linked_transaction_id' => $explode[1]
                    ];
                }

                $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Check', 'tag_id' => $tag->id, 'transaction_id' => $check->id]);
                    }
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Check',
                        'transaction_id' => $check->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Check', 'attachment_id' => $attachment->id, 'linked_id' => $check->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Check',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $checkId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Check',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $checkId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            $assignCheck = [
                'check_no' => $checkData['check_no'],
                'transaction_type' => 'check',
                'transaction_id' => $checkId,
                'payment_account_id' => $checkData['bank_account_id']
            ];

            if (!is_null($checkData['check_no']) && !is_null($check->check_no))
            {
                $this->accounting_assigned_checks_model->update_check_no($assignCheck);
            }
            elseif (is_null($check->check_no) && !is_null($checkData['check_no']))
            {
                $this->accounting_assigned_checks_model->assign_check_no($assignCheck);
            }
            elseif (!is_null($check->check_no) && is_null($checkData['check_no']))
            {
                $this->accounting_assigned_checks_model->unassign_check_no($assignCheck);
            }

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Check', $checkId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Check', $checkId);

            $bankAcc = $this->chart_of_accounts_model->getById($data['bank_account']);
            $newBalance = floatval(str_replace(',', '', $bankAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $bankAccData = [
                'id' => $bankAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($bankAccData);

            $accTransacData = [
                'account_id' => $bankAcc->id,
                'transaction_type' => 'Check',
                'transaction_id' => $checkId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'type' => 'decrease',
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_categories('Check', $checkId, $data);
            $this->update_items('Check', $checkId, $data);
        }

        return [
            'data' => $checkId,
            'success' => $update ? true : false,
            'message' => $update ? 'Update Successful!' : 'An unexpected error occured'
        ];
    }

    private function update_bill($billId, $data)
    {
        $bill = $this->vendors_model->get_bill_by_id($billId, logged('company_id'));
        $diff = floatval(str_replace(',', '', $bill->total_amount)) - floatval(str_replace(',', '', $bill->remaining_balance));
        $newTotal = floatval(str_replace(',', '', $data['total_amount'])) + $diff;

        $billData = [
            'vendor_id' => $data['vendor'],
            'mailing_address' => $data['mailing_address'],
            'term_id' => $data['term_id'],
            'bill_date' => date("Y-m-d", strtotime($data['bill_date'])),
            'due_date' => date("Y-m-d", strtotime($data['due_date'])),
            'bill_no' => $data['bill_no'] !== "" ? $data['bill_no'] : null,
            'permit_no' => $data['permit_number'] !== "" ? $data['permit_number'] : null,
            'memo' => $data['memo'],
            'remaining_balance' => floatval(str_replace(',', '', $data['total_amount'])) < 0 ? 0.00 : floatval(str_replace(',', '', $data['total_amount'])),
            'added_credits' => floatval(str_replace(',', '', $data['total_amount'])) < 0 ? floatval(str_replace('-', '', str_replace(',', '', $data['total_amount']))) : 0.00,
            'total_amount' => $newTotal,
            'status' => floatval(str_replace(',', '', $data['total_amount'])) <= 0 ? 2 : 1
        ];

        $update = $this->vendors_model->update_bill($billId, $billData);

        if ($update) {
            if($bill->vendor_id !== $data['vendor_id']) {
                $pVendor = $this->vendors_model->get_vendor_by_id($bill->vendor_id);

                $pVendorCredits = floatval(str_replace(',', '', $pVendor->vendor_credits)) - floatval(str_replace(',', '', $bill->added_credits));
                $pVendorData = [
                    'vendor_credits' => $pVendorCredits
                ];

                $this->vendors_model->updateVendor($bill->vendor_id, $pVendorData);
            }

            if(floatval(str_replace(',', '', $data['total_amount'])) < 0) {
                $vendor = $this->vendors_model->get_vendor_by_id($data['vendor_id']);

                $vendorCredits = floatval(str_replace(',', '', $vendor->vendor_credits)) - floatval(str_replace(',', '', $data['total_amount']));
                $vendorData = [
                    'vendor_credits' => $vendorCredits
                ];

                $this->vendors_model->updateVendor($data['vendor_id'], $vendorData);
            }

            $attachments = $this->accounting_attachments_model->get_attachments('Bill', $bill->id);
            $tags = $this->tags_model->get_transaction_tags('Bill', $bill->id);
            $this->accounting_linked_transactions_model->unlink_all_from_linked_to('bill', $billId);

            if(!is_null($data['linked_transaction'])) {
                $linkedTransacsData = [];
                foreach($data['linked_transaction'] as $linkedTransac) {
                    $explode = explode('-', $linkedTransac);

                    $linkedTransacsData[] = [
                        'linked_to_type' => 'bill',
                        'linked_to_id' => $billId,
                        'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                        'linked_transaction_id' => $explode[1]
                    ];
                }

                $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Bill', 'tag_id' => $tag->id, 'transaction_id' => $bill->id]);
                    }
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Bill',
                        'transaction_id' => $bill->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Bill', 'attachment_id' => $attachment->id, 'linked_id' => $bill->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Bill',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $billId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Bill',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $billId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Bill', $billId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Bill', $billId);

            $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
            $newBalance = floatval(str_replace(',', '', $apAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));

            $apAccData = [
                'id' => $apAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($apAccData);

            $accTransacData = [
                'account_id' => $apAcc->id,
                'transaction_type' => 'Bill',
                'transaction_id' => $billId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['bill_date'])),
                'type' => 'increase'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_categories('Bill', $billId, $data);
            $this->update_items('Bill', $billId, $data);
        }

        return [
            'data' => $billId,
            'success' => $update ? true : false,
            'message' => $update ? 'Update Successful!' : 'An unexpected error occured'
        ];
    }

    private function update_purchase_order($purchaseOrderId, $data)
    {
        $purchaseOrder = $this->vendors_model->get_purchase_order_by_id($purchaseOrderId, logged('company_id'));
        $diff = floatval(str_replace(',', '', $purchaseOrder->total_amount)) - floatval(str_replace(',', '', $purchaseOrder->remaining_balance));

        $purchOrder = [
            'vendor_id' => $data['vendor_id'],
            'email' => $data['email'],
            'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
            'mailing_address' => nl2br($data['mailing_address']),
            'customer_id' => $data['customer'],
            'shipping_address' => nl2br($data['shipping_address']),
            'purchase_order_date' => date("Y-m-d", strtotime($data['purchase_order_date'])),
            'ship_via' => $data['ship_via'],
            'message_to_vendor' => $data['message_to_vendor'],
            'memo' => $data['memo'],
            'remaining_balance' => floatval(str_replace(',', '', $data['total_amount'])) - $diff,
            'total_amount' => floatval(str_replace(',', '', $data['total_amount']))
        ];

        $update = $this->vendors_model->update_purchase_order($purchaseOrderId, $purchOrder);

        if ($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('Purchase Order', $purchaseOrder->id);
            $tags = $this->tags_model->get_transaction_tags('Purchase Order', $purchaseOrder->id);

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Purchase Order', 'tag_id' => $tag->id, 'transaction_id' => $purchaseOrder->id]);
                    }
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Purchase Order',
                        'transaction_id' => $purchaseOrder->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Purchase Order', 'attachment_id' => $attachment->id, 'linked_id' => $purchaseOrder->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Purchase Order',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $purchaseOrderId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Purchase Order',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $purchaseOrderId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Purchase Order', $purchaseOrderId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Purchase Order', $purchaseOrderId);

            $this->update_categories('Purchase Order', $purchaseOrderId, $data);
            $this->update_items('Purchase Order', $purchaseOrderId, $data);
        }

        return [
            'data' => $purchaseOrderId,
            'success' => $update ? true : false,
            'message' => $update ? 'Update Successful!' : 'An unexpected error occured'
        ];
    }

    private function update_vendor_credit($vendorCreditId, $data)
    {
        $vendorCredit = $this->vendors_model->get_vendor_credit_by_id($vendorCreditId, logged('company_id'));
        $diff = floatval($vendorCredit->total_amount) - floatval($vendorCredit->remaining_balance);
        $remainingBal = floatval(str_replace(',', '', $data['total_amount'])) - $diff;

        $vCredit = [
            'vendor_id' => $data['vendor_id'],
            'mailing_address' => $data['mailing_address'],
            'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
            'ref_no' => $data['ref_no'] === "" ? null : $data['ref_no'],
            'permit_no' => $data['permit_number'] === "" ? null : $data['permit_number'],
            'memo' => $data['memo'],
            'remaining_balance' => $remainingBal,
            'total_amount' => floatval(str_replace(',', '', $data['total_amount']))
        ];

        $update = $this->vendors_model->update_vendor_credit($vendorCreditId, $vCredit);

        if ($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('Vendor Credit', $vendorCredit->id);
            $tags = $this->tags_model->get_transaction_tags('Vendor Credit', $vendorCredit->id);

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Vendor Credit', 'tag_id' => $tag->id, 'transaction_id' => $vendorCredit->id]);
                    }
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Vendor Credit',
                        'transaction_id' => $vendorCredit->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Vendor Credit', 'attachment_id' => $attachment->id, 'linked_id' => $vendorCredit->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Vendor Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $vendorCreditId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Vendor Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $vendorCreditId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            if ($data['vendor_id'] !== $vendorCredit->vendor_id) {
                $newVendor = $this->vendors_model->get_vendor_by_id($data['vendor_id']);

                if ($newVendor->vendor_credits === null & $newVendor->vendor_credits === "") {
                    $vendorCredits = floatval(str_replace(',', '', $data['total_amount']));
                } else {
                    $vendorCredits = floatval(str_replace(',', '', $data['total_amount'])) + floatval(str_replace(',', '', $newVendor->vendor_credits));
                }

                $vendorData = [
                    'vendor_credits' => floatval(str_replace(',', '', $vendorCredits))
                ];

                $this->vendors_model->updateVendor($newVendor->id, $vendorData);

                $oldVendor = $this->vendors_model->get_vendor_by_id($vendorCredit->vendor_id);

                if ($oldVendor->vendor_credits === null & $oldVendor->vendor_credits === "") {
                    $vendorCredits = floatval(str_replace(',', '', $data['total_amount']));
                } else {
                    $vendorCredits = floatval(str_replace(',', '', $oldVendor->vendor_credits)) - floatval(str_replace(',', '', $vendorCredit->total_amount));
                }

                $vendorData = [
                    'vendor_credits' => floatval(str_replace(',', '', $vendorCredits))
                ];

                $this->vendors_model->updateVendor($oldVendor->id, $vendorData);
            }

            if ($data['total_amount'] !== $vendorCredit->total_amount && $data['vendor_id'] === $vendorCredit->vendor_id) {
                $vendor = $this->vendors_model->get_vendor_by_id($data['vendor_id']);

                $vendorCredits = floatval(str_replace(',', '', $vendor->vendor_credits)) - floatval(str_replace(',', '', $vendorCredit->total_amount));
                $vendorCredits = $vendorCredits + floatval(str_replace(',', '', $data['total_amount']));

                $vendorData = [
                    'vendor_credits' => floatval(str_replace(',', '', $vendorCredits))
                ];

                $this->vendors_model->updateVendor($vendor->id, $vendorData);
            }

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Vendor Credit', $vendorCredit->id);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Vendor Credit', $vendorCredit->id);

            $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
            $balance = floatval(str_replace(',', '', $apAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));

            $apAccData = [
                'id' => $apAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $balance))
            ];

            $this->chart_of_accounts_model->updateBalance($apAccData);

            $accTransacData = [
                'account_id' => $apAcc->id,
                'transaction_type' => 'Vendor Credit',
                'transaction_id' => $vendorCreditId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'type' => 'decrease'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_categories('Vendor Credit', $vendorCreditId, $data);
            $this->update_items('Vendor Credit', $vendorCreditId, $data);
        }

        return [
            'data' => $vendorCreditId,
            'success' => $update ? true : false,
            'message' => $update ? 'Update Successful!' : 'An unexpected error occured'
        ];
    }

    private function update_credit_card_credit($ccCreditId, $data)
    {
        $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($ccCreditId, logged('company_id'));
        $payee = explode('-', $data['payee']);

        $creditData = [
            'payee_type' => $payee[0],
            'payee_id' => $payee[1],
            'bank_credit_account_id' => $data['bank_credit_account'],
            'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
            'ref_no' => $data['ref_no'] === "" ? null : $data['ref_no'],
            'memo' => $data['memo'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount']))
        ];

        $update = $this->vendors_model->update_credit_card_credit($ccCreditId, $creditData);

        if ($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('CC Credit', $ccCredit->id);
            $tags = $this->tags_model->get_transaction_tags('CC Credit', $ccCredit->id);

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'CC Credit', 'tag_id' => $tag->id, 'transaction_id' => $ccCredit->id]);
                    }
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'CC Credit',
                        'transaction_id' => $ccCredit->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'CC Credit', 'attachment_id' => $attachment->id, 'linked_id' => $ccCredit->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'CC Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $ccCreditId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'CC Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $ccCreditId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('CC Credit', $ccCreditId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('CC Credit', $ccCreditId);

            $creditAcc = $this->chart_of_accounts_model->getById($data['bank_credit_account']);

            $newBalance = floatval(str_replace(',', '', $creditAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $creditAccData = [
                'id' => $creditAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($creditAccData);

            $accTransacData = [
                'account_id' => $creditAcc->id,
                'transaction_type' => 'CC Credit',
                'transaction_id' => $creditId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'type' => 'increase'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_categories('Credit Card Credit', $ccCreditId, $data);
            $this->update_items('Credit Card Credit', $ccCreditId, $data);
        }

        return [
            'data' => $ccCreditId,
            'success' => $update ? true : false,
            'message' => $update ? 'Update Successful!' : 'An unexpected error occured'
        ];
    }

    private function revert_bill_payment($billPaymentId)
    {
        $billPayment = $this->vendors_model->get_bill_payment_by_id($billPaymentId);
        $appliedCredits = json_decode($billPayment->vendor_credits_applied, true);
        $payee = $this->vendors_model->get_vendor_by_id($billPayment->payee_id);

        if(!is_null($appliedCredits)) {
            foreach ($appliedCredits as $index => $creditData) {
                $amount = floatval(str_replace(',', '', $creditData['amount']));
    
                $vendorData = [
                    'vendor_credits' => floatval(str_replace(',', '', $payee->vendor_credits)) + $amount
                ];
    
                $this->vendors_model->updateVendor($payee->id, $vendorData);

                if($creditdata['credit-type'] === 'vendor-credit') {
                    $vCredit = $this->vendors_model->get_vendor_credit_by_id($creditData['id'], logged('company_id'));
                    $balance = floatval(str_replace(',', '', $vCredit->remaining_balance));
                    $remainingBal = $balance + $amount;

                    $vCreditData = [
                        'status' => 1,
                        'remaining_balance' => floatval(str_replace(',', '', $remainingBal))
                    ];

                    $this->vendors_model->update_vendor_credit($vCredit->id, $vCreditData);
                } else {
                    $payment = $this->vendors_model->get_bill_payment_by_id($creditData['id'], logged('company_id'));
                    $balance = floatval(str_replace(',', '', $payment->available_credits_amount));
                    $remainingBal = $balance + $amount;

                    $creditData = [
                        'available_credits_amount' => floatval(str_replace(',', '', $remainingBal))
                    ];

                    $this->vendors_model->update_bill_payment($payment->id, $creditData);
                }
            }
        }

        $paymentItems = $this->vendors_model->get_bill_payment_items($billPaymentId);

        foreach ($paymentItems as $paymentItem) {
            $bill = $this->expenses_model->get_bill_data($paymentItem->bill_id);

            $remainingBal = floatval(str_replace(',', '', $bill->remaining_balance)) + floatval(str_replace(',', '', $paymentItem->total_amount));
            $billData = [
                'status' => 1,
                'remaining_balance' => floatval(str_replace(',', '', $remainingBal))
            ];

            $this->expenses_model->update_bill_data($bill->id, $billData);
        }

        $this->vendors_model->delete_bill_payment_items($billPaymentId);

        $paymentAcc = $this->chart_of_accounts_model->getById($billPayment->payment_account_id);
        $paymentAccType = $this->account_model->getById($paymentAcc->account_id);

        if ($paymentAccType->account_name === 'Credit Card') {
            $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) - floatval(str_replace(',', '', $billPayment->total_amount));
        } else {
            $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) + floatval(str_replace(',', '', $billPayment->total_amount));
        }

        $paymentAccData = [
            'id' => $paymentAcc->id,
            'company_id' => logged('company_id'),
            'balance' => floatval(str_replace(',', '', $newBalance))
        ];

        $this->chart_of_accounts_model->updateBalance($paymentAccData);

        $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
        $newBalance = floatval(str_replace(',', '', $apAcc->balance)) + floatval(str_replace(',', '', $billPayment->total_amount));

        $apAccData = [
            'id' => $apAcc->id,
            'company_id' => logged('company_id'),
            'balance' => floatval(str_replace(',', '', $newBalance))
        ];

        $this->chart_of_accounts_model->updateBalance($apAccData);

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Bill Payment', $billPaymentId);
    }

    public function update_bill_payment($billPaymentId, $data)
    {
        $this->revert_bill_payment($billPaymentId);
        $billPayment = $this->vendors_model->get_bill_payment_by_id($billPaymentId);

        $paymentTotal = floatval(str_replace(',', '', $data['payment_amount']));
        $vendor = $this->vendors_model->get_vendor_by_id($data['vendor']);
        $newVCredit = floatval($vendor->vendor_credits);

        if(!is_null($data['credits'])) {
            $appliedCredits = [];
            $linkedTransacsData = [];
            if(isset($data['credits']) && count($data['credits']) > 0) {
                foreach ($data['credits'] as $index => $credit) {
                    if($data['credit_type'][$index] === 'vendor-credit') {
                        $vCredit = $this->vendors_model->get_vendor_credit_by_id($credit, logged('company_id'));
                        $balance = floatval(str_replace(',', '', $vCredit->remaining_balance));
                        $subtracted = floatval(str_replace(',', '', $data['credit_payment'][$index]));
                        $remainingBal = $balance - $subtracted;

                        $vCreditData = [
                            'status' => $remainingBal === 0.00 ? 2 : 1,
                            'remaining_balance' => floatval(str_replace(',', '', $remainingBal))
                        ];

                        $this->vendors_model->update_vendor_credit($vCredit->id, $vCreditData);

                        $appliedCredits[] = [
                            'credit-type' => 'vendor-credit',
                            'id' => $credit,
                            'amount' => $subtracted
                        ];

                        $linkedTransacsData[] = [
                            'linked_transaction_type' => 'vendor-credit',
                            'linked_transaction_id' => $vCredit->id
                        ];
                    } else {
                        $payment = $this->vendors_model->get_bill_payment_by_id($credit, logged('company_id'));
                        $balance = floatval(str_replace(',', '', $payment->available_credits_amount));
                        $subtracted = floatval(str_replace(',', '', $data['credit_payment'][$index]));
                        $remainingBal = $balance - $subtracted;
        
                        $creditData = [
                            'available_credits_amount' => floatval(str_replace(',', '', $remainingBal))
                        ];

                        $this->vendors_model->update_bill_payment($payment->id, $creditData);

                        $appliedCredits[] = [
                            'credit-type' => 'bill-payment',
                            'id' => $credit,
                            'amount' => $subtracted
                        ];

                        $linkedTransacsData[] = [
                            'linked_transaction_type' => 'bill-payment',
                            'linked_transaction_id' => $payment->id
                        ];
                    }

                    $newVCredit -= floatval(str_replace(',', '', $data['credit_payment'][$index]));
                }
            }
        }

        $billPaymentData = [
            'payee_id' => $data['vendor'],
            'payment_account_id' => $data['payment_account'],
            'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
            'check_no' => is_null($data['print_later']) && $data['ref_no'] !== '' ? $data['ref_no'] : null,
            'to_print_check_no' => $data['print_later'],
            'total_amount' => floatval(str_replace(',', '', $paymentTotal)),
            'fixed_total' => $data['fixed_total'],
            'vendor_credits_applied' => count($appliedCredits) > 0 ? json_encode($appliedCredits) : null,
            'amount_to_apply' => $data['amount_to_apply'],
            'total_credits_amount' => $data['amount_to_credit'],
            'available_credits_amount' => $data['amount_to_credit'],
            'status' => 1
        ];

        $update = $this->vendors_model->update_bill_payment($billPaymentId, $billPaymentData);

        if ($update) {
            if(floatval($data['amount_to_credit']) > 0) {
                $newVCredit += floatval($data['amount_to_credit']);
            }

            $vendorData = [
                'vendor_credits' => $newVCredit
            ];

            $this->vendors_model->updateVendor($vendor->id, $vendorData);

            $attachments = $this->accounting_attachments_model->get_attachments('Bill Payment', $billPayment->id);

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Bill Payment', 'attachment_id' => $attachment->id, 'linked_id' => $billPayment->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Bill Payment',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $billPaymentId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Bill Payment',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $billPaymentId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            $paymentAcc = $this->chart_of_accounts_model->getById($data['payment_account']);
            $paymentAccType = $this->account_model->getById($paymentAcc->account_id);

            if ($paymentAccType->account_name === 'Credit Card') {
                $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));
            } else {
                $newBalance = floatval(str_replace(',', '', $paymentAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $paymentAccData = [
                'id' => $paymentAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($paymentAccData);

            $accTransacData = [
                'account_id' => $paymentAcc->id,
                'transaction_type' => 'Bill Payment',
                'transaction_id' => $billPaymentId,
                'amount' => floatval(str_replace(',', '', $paymentTotal)),
                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'type' => 'decrease'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $apAcc = $this->chart_of_accounts_model->get_accounts_payable_account(logged('company_id'));
            $newBalance = floatval(str_replace(',', '', $apAcc->balance)) - floatval(str_replace(',', '', $paymentTotal));

            $apAccData = [
                'id' => $apAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($apAccData);

            $accTransacData = [
                'account_id' => $apAcc->id,
                'transaction_type' => 'Bill Payment',
                'transaction_id' => $billPaymentId,
                'amount' => floatval(str_replace(',', '', $paymentTotal)),
                'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                'type' => 'decrease'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            foreach($linkedTransacsData as $index => $linkedData) {
                $linkedTransacsData[$index]['linked_to_type'] = 'bill-payment';
                $linkedTransacsData[$index]['linked_to_id'] = $billPaymentId;
            }

            $paymentItems = [];
            foreach ($data['bills'] as $index => $bill) {
                $paymentItems[] = [
                    'bill_payment_id' => $billPaymentId,
                    'bill_id' => $bill,
                    'credit_applied_amount' => null,
                    'payment_amount' => floatval(str_replace(',', '', $data['bill_payment'][$index])),
                    'total_amount' => floatval(str_replace(',', '', $data['bill_payment'][$index]))
                ];

                $bill = $this->expenses_model->get_bill_data($bill);

                if (floatval(str_replace(',', '', $data['bill_payment'][$index])) === floatval(str_replace(',', '', $bill->remaining_balance))) {
                    $billData = [
                        'remaining_balance' => 0.00,
                        'status' => 2
                    ];
                } else {
                    $remainingBal = floatval(str_replace(',', '', $bill->remaining_balance)) - floatval(str_replace(',', '', $data['bill_payment'][$index]));
                    $billData = [
                        'remaining_balance' => floatval(str_replace(',', '', $remainingBal))
                    ];
                }

                $this->expenses_model->update_bill_data($bill->id, $billData);

                $linkedTransacsData[] = [
                    'linked_to_type' => 'bill-payment',
                    'linked_to_id' => $billPaymentId,
                    'linked_transaction_id' => $bill->id,
                    'linked_transaction_type' => 'bill'
                ];
            }

            $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
            $this->expenses_model->insert_bill_payment_items($paymentItems);
        }

        return [
            'data' => $billPaymentId,
            'success' => $update ? true : false,
            'message' => $update ? 'Update Successful!' : 'An unexpected error occured'
        ];
    }

    private function update_categories($transactionType, $transactionId, $data)
    {
        $categories = $this->expenses_model->get_transaction_categories($transactionId, $transactionType);

        if ($data['expense_account'] !== null) {
            foreach($data['expense_account'] as $index => $value)
            {
                $linkedTransacCat = $data['category_linked'][$index] !== '' ? explode('-', $data['category_linked'][$index]) : null;

                $categoryDetail = [
                    'expense_account_id' => $value,
                    'category' => $data['category'][$index],
                    'description' => $data['description'][$index],
                    'amount' => $data['category_amount'][$index],
                    'billable' => $data['category_billable'][$index],
                    'markup_percentage' => $data['category_markup'][$index],
                    'tax' => $data['category_tax'][$index],
                    'customer_id' => $data['category_customer'][$index],
                    'linked_transaction_type' => !is_null($linkedTransacCat) ? $linkedTransacCat[0] : null,
                    'linked_transaction_id' => !is_null($linkedTransacCat) ? $linkedTransacCat[1] : null,
                    'linked_transaction_category_id' => !is_null($linkedTransacCat) ? $data['transac_category_id'][$index] : null
                ];

                $key =  array_search($value, array_column($categories, 'expense_account_id'));
                if($transactionType === 'Purchase Order' && $key !== false) {
                    $categoryDetail['received'] = $categories[$key]->received;
                }

                if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '' && !in_array($transactionType, ['Vendor Credit', 'Credit Card Credit', 'Purchase Order'])) {
                    $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($data['transac_category_id'][$index]);

                    $received = floatval(str_replace(',', '', $linkedCat->received)) + floatval(str_replace(',', '', $data['category_amount'][$index]));

                    $categoryDetail = [
                        'received' => floatval(str_replace(',', '', $received))
                    ];

                    $this->vendors_model->update_transaction_category_details($data['transac_category_id'][$index], $categoryDetail);

                    $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacCat[1], logged('company_id'));
                    $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval(str_replace(',', '', $data['category_amount'][$index]));

                    $purchOrderData = [
                        'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                        'status' => $remainingBal > 0 ? 1 : 2
                    ];

                    $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                }

                if (!is_null($categories[$index])) {
                    $this->vendors_model->update_transaction_category_details($categories[$index]->id, $categoryDetail);

                    $categoryDetailId = $categories[$index]->id;
                } else {
                    $categoryDetail['transaction_type'] = $transactionType;
                    $categoryDetail['transaction_id'] = $transactionId;

                    $categoryDetailId = $this->expenses_model->insert_vendor_transaction_category($categoryDetail);
                }

                $expenseAcc = $this->chart_of_accounts_model->getById($value);
                $expenseAccType = $this->account_model->getById($expenseAcc->account_id);

                switch($transactionType) {
                    case 'Expense' :
                        if ($expenseAccType->account_name === 'Credit Card') {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                        } else {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                        }

                        $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                        $accTransacType = 'increase';
                        $transacType = 'Expense';
                    break;
                    case 'Check' :
                        if ($expenseAccType->account_name === 'Credit Card') {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                        } else {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                        }

                        $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                        $accTransacType = 'increase';
                        $transacType = 'Check';
                    break;
                    case 'Bill' :
                        if ($expenseAccType->account_name === 'Credit Card') {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                        } else {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                        }

                        $accTransacDate = date("Y-m-d", strtotime($data['bill_date']));
                        $accTransacType = 'increase';
                        $transacType = 'Bill';
                    break;
                    case 'Vendor Credit' :
                        if ($expenseAccType->account_name === 'Credit Card') {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                        } else {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                        }

                        $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                        $accTransacType = 'decrease';
                        $transacType = 'Vendor Credit';
                    break;
                    case 'Credit Card Credit' :
                        if ($expenseAccType->account_name === 'Credit Card') {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) + floatval($data['category_amount'][$index]);
                        } else {
                            $newBalance = floatval(str_replace(',', '', $expenseAcc->balance)) - floatval($data['category_amount'][$index]);
                        }

                        $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                        $accTransacType = 'decrease';
                        $transacType = 'CC Credit';
                    break;
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $expenseAccData = [
                    'id' => $expenseAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($expenseAccData);

                $accTransacData = [
                    'account_id' => $expenseAcc->id,
                    'transaction_type' => $transacType,
                    'transaction_id' => $transactionId,
                    'amount' => floatval($data['category_amount'][$index]),
                    'transaction_date' => $accTransacDate,
                    'type' => $accTransacType,
                    'is_category' => 1,
                    'child_id' => $categoryDetailId
                ];

                $this->accounting_account_transactions_model->create($accTransacData);
            }
        }

        if (count($categories) > 0) {
            foreach ($categories as $index => $category) {
                $key = array_search($category->expense_account_id, $data['expense_account']);
                if($transactionType === 'Purchase Order' && $key === false) {
                    $linked = $this->expenses_model->get_categories_by_linked_data('purchase_order', $transactionId, $category->id);

                    foreach($linked as $li) {
                        $linkedData = [
                            'linked_transaction_type' => null,
                            'linked_transaction_id' => null,
                            'linked_transaction_category_id' => null
                        ];

                        $this->vendors_model->update_transaction_category_details($li->id, $linkedData);
                    }
                }

                if(!is_null($category->linked_transaction_type) && !is_null($category->linked_transaction_id) && !in_array($transactionType, ['Vendor Credit', 'Credit Card Credit', 'Purchase Order'])) {
                    $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($category->linked_transaction_category_id);

                    $received = floatval(str_replace(',', '', $linkedCat->received)) - floatval(str_replace(',', '', $category->amount));

                    $categoryDetail = [
                        'received' => floatval(str_replace(',', '', $received))
                    ];

                    $this->vendors_model->update_transaction_category_details($category->linked_transaction_category_id, $categoryDetail);

                    $purchOrder = $this->vendors_model->get_purchase_order_by_id($category->linked_transaction_id, logged('company_id'));
                    $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) + floatval(str_replace(',', '', $category->amount));

                    $purchOrderData = [
                        'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                        'status' => $remainingBal > 0 ? 1 : 2
                    ];

                    $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                }

                if($data['expense_account'] === null || $data['expense_account'][$index] === null) {
                    $this->vendors_model->delete_transaction_category($category->id, $transactionType);
                }
            }
        }
    }

    private function update_items($transactionType, $transactionId, $data)
    {
        $items = $this->expenses_model->get_transaction_items($transactionId, $transactionType);

        if ($data['item'] !== null) {
            foreach($data['item'] as $index => $value)
            {
                $item = $this->items_model->getByID($value);
                $linkedTransacItem = $data['item_linked'][$index] !== '' ? explode('-', $data['item_linked'][$index]) : null;

                $itemDetails = [
                    'item_id' => $value,
                    'location_id' => $data['location'][$index],
                    'quantity' => $data['quantity'][$index],
                    'rate' => $data['item_amount'][$index],
                    'discount' => $data['discount'][$index],
                    'tax' => $data['item_tax'][$index],
                    'total' => floatval(str_replace(',', '', $data['item_total'][$index])),
                    'linked_transaction_type' => !is_null($linkedTransacItem) ? $linkedTransacItem[0] : null,
                    'linked_transaction_id' => !is_null($linkedTransacItem) ? $linkedTransacItem[1] : null,
                    'linked_transaction_item_id' => !is_null($linkedTransacItem) ? $data['transac_item_id'][$index] : null
                ];

                $key =  array_search($value, array_column($items, 'item_id'));
                if($transactionType === 'Purchase Order' && $key !== false) {
                    $itemDetails['received'] = $items[$key]->received;
                }

                if(isset($data['linked_transaction']) && $data['category_linked'][$index] !== '' && !in_array($transactionType, ['Vendor Credit', 'Credit Card Credit', 'Purchase Order'])) {
                    $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($data['transac_item_id'][$index]);

                    $received = floatval(str_replace(',', '', $linkedCat->received)) + floatval(str_replace(',', '', $data['item_total'][$index]));

                    $itemDetails = [
                        'received' => floatval(str_replace(',', '', $received))
                    ];

                    $this->vendors_model->update_transaction_item($data['transac_item_id'][$index], $itemDetail);

                    $purchOrder = $this->vendors_model->get_purchase_order_by_id($linkedTransacItem[1], logged('company_id'));
                    $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval(str_replace(',', '', $data['item_total'][$index]));

                    $purchOrderData = [
                        'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                        'status' => $remainingBal > 0 ? 1 : 2
                    ];

                    $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                }

                if (!is_null($items[$index])) {
                    $this->vendors_model->update_transaction_item($items[$index]->id, $itemDetails);
                    $itemDetailId = $items[$index]->id;
                } else {
                    $itemDetails['transaction_type'] = $transactionType;
                    $itemDetails['transaction_id'] = $transactionId;

                    $itemDetailId = $this->expenses_model->insert_vendor_transaction_item($itemDetails);
                }

                $itemAccDetails = $this->items_model->getItemAccountingDetails($value);

                if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                    $location = $this->items_model->getItemLocation($data['location'][$index], $value);

                    switch($transactionType) {
                        case 'Expense' :
                            $newQty = intval($location->qty) + intval($data['quantity'][$index]);
                        break;
                        case 'Check' :
                            $newQty = intval($location->qty) + intval($data['quantity'][$index]);
                        break;
                        case 'Bill' :
                            $newQty = intval($location->qty) + intval($data['quantity'][$index]);
                        break;
                        case 'Vendor Credit' :
                            $newQty = intval($location->qty) - intval($data['quantity'][$index]);
                        break;
                        case 'Credit Card Credit' :
                            $newQty = intval($location->qty) - intval($data['quantity'][$index]);
                        break;
                    }

                    if($transactionType !== 'Purchase Order') {
                        $this->items_model->updateLocationQty($data['location'][$index], $value, $newQty);
                    } else {
                        $newQtyPO = intval($itemAccDetails->qty_po) + intval($data['quantity'][$index]);

                        $this->items_model->updateItemAccountingDetails(['qty_po' => $newQtyPO], $value);
                    }
                }

                if ($itemAccDetails) {
                    if($item->type === 'Product' || $item->type === 'product' || $item->type === 'Inventory' || $item->type === 'inventory') {
                        $account = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                        $accType = $this->account_model->getById($account->account_id);
                        switch($transactionType) {
                            case 'Expense' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'increase';
                                $transacType = 'Expense';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));
                                $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                            break;
                            case 'Check' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'increase';
                                $transacType = 'Check';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));
                                $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                            break;
                            case 'Bill' :
                                $accTransacDate = date("Y-m-d", strtotime($data['bill_date']));
                                $accTransacType = 'increase';
                                $transacType = 'Bill';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));
                                $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                            break;
                            case 'Vendor Credit' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'decrease';
                                $transacType = 'Vendor Credit';

                                if(floatval($item->cost) !== floatval($data['item_amount'][$index])) {
                                    $totalCost = floatval($item->cost) * floatval($data['quantity'][$index]);
                                    $cost = floatval(str_replace(',', '', $data['item_total'][$index])) - $totalCost;

                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $cost;

                                    $accountData = [
                                        'id' => $account->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($accountData);

                                    $accTransacData = [
                                        'account_id' => $account->id,
                                        'transaction_type' => 'Vendor Credit',
                                        'transaction_id' => $vendorCreditId,
                                        'amount' => $cost,
                                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                        'type' => 'increase',
                                        'is_item_category' => 1,
                                        'child_id' => $itemDetailId
                                    ];

                                    $this->accounting_account_transactions_model->create($accTransacData);

                                    $account->balance = $newBalance;
                                }

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));
                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - $amount;
                                }
                            break;
                            case 'Credit Card Credit' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'decrease';
                                $transacType = 'CC Credit';

                                if(floatval($item->cost) !== floatval($data['item_amount'][$index])) {
                                    $totalCost = floatval($item->cost) * floatval($data['quantity'][$index]);
                                    $cost = floatval(str_replace(',', '', $data['item_total'][$index])) - $totalCost;

                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $cost;

                                    $accountData = [
                                        'id' => $account->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];

                                    $this->chart_of_accounts_model->updateBalance($accountData);

                                    $accTransacData = [
                                        'account_id' => $account->id,
                                        'transaction_type' => 'Vendor Credit',
                                        'transaction_id' => $vendorCreditId,
                                        'amount' => $cost,
                                        'transaction_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                        'type' => 'increase',
                                        'is_item_category' => 1,
                                        'child_id' => $itemDetailId
                                    ];

                                    $this->accounting_account_transactions_model->create($accTransacData);

                                    $account->balance = $newBalance;
                                }

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));
                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - $amount;
                                }
                            break;
                        }
                    } else {
                        $account = $this->chart_of_accounts_model->getById($itemAccDetails->expense_account_id);
                        $accType = $this->account_model->getById($account->account_id);

                        switch($transactionType) {
                            case 'Expense' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'increase';
                                $transacType = 'Expense';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));

                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - $amount;
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                                }
                            break;
                            case 'Check' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'increase';
                                $transacType = 'Check';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));

                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - $amount;
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                                }
                            break;
                            case 'Bill' :
                                $accTransacDate = date("Y-m-d", strtotime($data['bill_date']));
                                $accTransacType = 'increase';
                                $transacType = 'Bill';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));

                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - $amount;
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                                }
                            break;
                            case 'Vendor Credit' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'decrease';
                                $transacType = 'Vendor Credit';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));

                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - $amount;
                                }
                            break;
                            case 'Credit Card Credit' :
                                $accTransacDate = date("Y-m-d", strtotime($data['payment_date']));
                                $accTransacType = 'decrease';
                                $transacType = 'CC Credit';

                                $amount = floatval(str_replace(',', '', $data['item_total'][$index]));

                                if ($accType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) + $amount;
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $account->balance)) - $amount;
                                }
                            break;
                        }
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $accountData = [
                        'id' => $account->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($accountData);

                    $accTransacData = [
                        'account_id' => $account->id,
                        'transaction_type' => $transacType,
                        'transaction_id' => $transactionId,
                        'amount' => $amount,
                        'transaction_date' => $accTransacDate,
                        'type' => $accTransacType,
                        'is_item_category' => 1,
                        'child_id' => $id
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                }
            }
        }

        if (count($items) > 0) {
            foreach ($items as $index => $item) {
                $key = array_search($item->item_id, $data['item']);
                if($transactionType === 'Purchase Order' && $key === false) {
                    $linked = $this->expenses_model->get_items_by_linked_data('purchase_order', $transactionId, $item->id);

                    foreach($linked as $li) {
                        $linkedData = [
                            'linked_transaction_type' => null,
                            'linked_transaction_id' => null,
                            'linked_transaction_item_id' => null
                        ];

                        $this->vendors_model->update_transaction_item($li->id, $linkedData);
                    }
                }

                if(!is_null($item->linked_transaction_type) && !is_null($item->linked_transaction_id) && !in_array($transactionType, ['Vendor Credit', 'Credit Card Credit', 'Purchase Order'])) {
                    $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($item->linked_transaction_item_id);

                    $received = floatval(str_replace(',', '', $linkedCat->received)) - floatval(str_replace(',', '', $item->total));

                    $itemDetail = [
                        'received' => floatval(str_replace(',', '', $received))
                    ];

                    $this->vendors_model->update_transaction_item($item->linked_transaction_item_id, $itemDetail);

                    $purchOrder = $this->vendors_model->get_purchase_order_by_id($item->linked_transaction_id, logged('company_id'));
                    $remainingBal = floatval(str_replace(',', '', $purchOrder->remaining_balance)) - floatval(str_replace(',', '', $item->total));

                    $purchOrderData = [
                        'remaining_balance' => floatval(str_replace(',', '', $remainingBal)),
                        'status' => $remainingBal > 0 ? 1 : 2
                    ];

                    $this->vendors_model->update_purchase_order($purchOrder->id, $purchOrderData);
                }

                $itemAccDetails = $this->items_model->getItemAccountingDetails($item->item_id);
                $location = $this->items_model->getItemLocation($item->location_id, $item->item_id);

                switch ($transactionType) {
                    case 'Expense':
                        $newQty = intval($location->qty) - intval($item->quantity);
                    break;
                    case 'Check':
                        $newQty = intval($location->qty) - intval($item->quantity);
                    break;
                    case 'Bill':
                        $newQty = intval($location->qty) - intval($item->quantity);
                    break;
                    case 'Purchase Order':
                        $newQty = intval($itemAccDetails->qty_po) - intval($item->quantity);

                        $this->items_model->updateItemAccountingDetails(['qty_po' => $newQty], $item->item_id);
                    break;
                    case 'Vendor Credit':
                        $newQty = intval($location->qty) + intval($item->quantity);
                    break;
                    case 'Credit Card Credit':
                        $newQty = intval($location->qty) + intval($item->quantity);
                    break;
                }

                if ($transactionType !== 'Purchase Order') {
                    $this->items_model->updateLocationQty($item->location_id, $item->item_id, $newQty);
                }

                if ($data['item'] === null || $data['item'][$index] === null) {
                    $this->vendors_model->delete_transaction_item($item->id, $transactionType);
                }
            }
        }
    }
    
    private function update_cc_payment($paymentId, $data)
    {
        $this->form_validation->set_rules('credit_card_account', 'Credit Card', 'required');
        $this->form_validation->set_rules('amount', 'Amount', 'required');
        $this->form_validation->set_rules('payment_date', 'Date of Payment', 'required');
        $this->form_validation->set_rules('bank_account', 'Date of Payment', 'required');

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $payment = $this->accounting_pay_down_credit_card_model->get_by_id($paymentId);

            $updateData = [
                'credit_card_id' => $data['credit_card_account'],
                'payee_id' => $data['payee'],
                'amount' => $data['amount'],
                'date' => date('Y-m-d', strtotime($data['payment_date'])),
                'bank_account_id' => $data['bank_account'],
                'memo' => $data['memo'],
            ];

            $update = $this->accounting_pay_down_credit_card_model->update($paymentId, $updateData);

            if ($update) {
                $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('CC Payment', $paymentId);

                foreach($accountTransacs as $transac)
                {
                    $account = $this->chart_of_accounts_model->getById($transac->account_id);
                    $accountType = $this->account_model->getById($account->account_id);

                    if($accountType->account_name === 'Credit Card') {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                    } else {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $accData = [
                        'id' => $account->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];

                    $this->chart_of_accounts_model->updateBalance($accData);
                }

                $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('CC Payment', $paymentId);

                // REVERT OLD
                $attachments = $this->accounting_attachments_model->get_attachments('CC Payment', $payment->id);

                if(count($attachments) > 0) {
                    foreach($attachments as $attachment) {
                        if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                            $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'CC Payment', 'attachment_id' => $attachment->id, 'linked_id' => $payment->id]);
                            $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                        }
                    }
                }

                // NEW
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                            return $v->id === $attachmentId;
                        }, ARRAY_FILTER_USE_BOTH);

                        if(count($link) > 0) {
                            $attachmentData = [
                                'type' => 'CC Payment',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $payment->id,
                                'order_no' => $order
                            ];

                            $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                        } else {
                            $linkAttachmentData = [
                                'type' => 'CC Payment',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $payment->id,
                                'order_no' => $order
                            ];
        
                            $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                        }

                        $order++;
                    }
                }

                $creditAcc = $this->chart_of_accounts_model->getById($data['credit_card_account']);

                $newBalance = floatval(str_replace(',', '', $creditAcc->balance)) - floatval(str_replace(',', '', $data['amount']));
                $newBalance = number_format($newBalance, 2, '.', ',');

                $this->chart_of_accounts_model->updateBalance(['id' => $creditAcc->id, 'company_id' => logged('company_id'), 'balance' => floatval(str_replace(',', '', $newBalance))]);

                $accTransacData = [
                    'account_id' => $creditAcc->id,
                    'transaction_type' => 'CC Payment',
                    'transaction_id' => $payDownId,
                    'amount' => floatval(str_replace(',', '', $data['amount'])),
                    'transaction_date' => date('Y-m-d', strtotime($data['payment_date'])),
                    'type' => 'increase'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                $bankAcc = $this->chart_of_accounts_model->getById($data['bank_account']);

                $newBalance = floatval(str_replace(',', '', $bankAcc->balance)) - floatval(str_replace(',', '', $data['amount']));
                $newBalance = number_format($newBalance, 2, '.', ',');

                $this->chart_of_accounts_model->updateBalance(['id' => $bankAcc->id, 'company_id' => logged('company_id'), 'balance' => floatval(str_replace(',', '', $newBalance))]);

                $accTransacData = [
                    'account_id' => $bankAcc->id,
                    'transaction_type' => 'CC Payment',
                    'transaction_id' => $payDownId,
                    'amount' => floatval(str_replace(',', '', $data['amount'])),
                    'transaction_date' => date('Y-m-d', strtotime($data['payment_date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);
            }

            $return['data'] = $paymentId;
            $return['success'] = $update ? true : false;
            $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';
        }

        return $return;
    }

    private function update_deposit($depositId, $data)
    {
        $this->form_validation->set_rules('bank_account', 'Bank Account', 'required');

        if ($data['cash_back_amount'] !== "") {
            $this->form_validation->set_rules('cash_back_account', 'Cash back account', 'required|differs[bank_account]');
        }

        if (isset($data['funds_account']) && isset($data['amount'])) {
            $this->form_validation->set_rules('funds_account[]', 'Account', 'required');
            $this->form_validation->set_rules('amount[]', 'Amount', 'required');
        }

        if (!isset($data['template_name'])) {
            $this->form_validation->set_rules('date', 'Date', 'required');
        } else {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['account']) && !isset($data['amount'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one line item.';
        } else {
            $deposit = $this->accounting_bank_deposit_model->getById($depositId, logged('company_id'));

            $totalAmount = array_sum(array_map(function ($item) {
                return floatval(str_replace(',', '', $item));
            }, $data['amount']));

            $totalAmount = $totalAmount - floatval(str_replace(',', '', $data['cash_back_amount']));

            $depositData = [
                'company_id' => logged('company_id'),
                'account_id' => $data['bank_account'],
                'date' => isset($data['template_name']) ? null : date('Y-m-d', strtotime($data['date'])),
                'total_amount' => floatval(str_replace(',', '', $totalAmount)),
                'cash_back_account_id' => floatval(str_replace(',', '', $data['cash_back_amount'])) > 0.00 ? $data['cash_back_account'] : null,
                'cash_back_memo' => $data['cash_back_memo'],
                'cash_back_amount' => $data['cash_back_amount'],
                'memo' => $data['memo'],
                'recurring' => isset($data['template_name']) ? 1 : null,
            ];

            $update = $this->accounting_bank_deposit_model->update($depositId, $depositData);

            if ($update) {
                // REVERT OLD
                $attachments = $this->accounting_attachments_model->get_attachments('Deposit', $deposit->id);
                $tags = $this->tags_model->get_transaction_tags('Deposit', $deposit->id);

                if(count($tags) > 0) {
                    foreach($tags as $key => $tag) {
                        if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                            $this->tags_model->unlink_tag(['transaction_type' => 'Deposit', 'tag_id' => $tag->id, 'transaction_id' => $deposit->id]);
                        }
                    }
                }
    
                if(isset($data['tags']) && is_array($data['tags'])) {
                    $order = 1;
                    foreach($data['tags'] as $key => $tagId) {
                        $linkTagData = [
                            'transaction_type' => 'Deposit',
                            'transaction_id' => $deposit->id,
                            'tag_id' => $tagId,
                            'order_no' => $order
                        ];
    
                        if($tags[$key] === null) {
                            $linkTagId = $this->tags_model->link_tag($linkTagData);
                        } else {
                            $updateOrder = $this->tags_model->update_link($linkTagData);
                        }
    
                        $order++;
                    }
                }

                if(count($attachments) > 0) {
                    foreach($attachments as $attachment) {
                        if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                            $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Deposit', 'attachment_id' => $attachment->id, 'linked_id' => $deposit->id]);
                            $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                        }
                    }
                }

                // NEW
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                            return $v->id === $attachmentId;
                        }, ARRAY_FILTER_USE_BOTH);

                        if(count($link) > 0) {
                            $attachmentData = [
                                'type' => 'Deposit',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $depositId,
                                'order_no' => $order
                            ];

                            $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                        } else {
                            $linkAttachmentData = [
                                'type' => 'Deposit',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $depositId,
                                'order_no' => $order
                            ];
        
                            $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                        }

                        $order++;
                    }
                }

                $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Deposit', $depositId);

                foreach($accountTransacs as $transac)
                {
                    $account = $this->chart_of_accounts_model->getById($transac->account_id);
                    $accountType = $this->account_model->getById($account->account_id);

                    if($accountType->account_name === 'Credit Card') {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                    } else {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $accData = [
                        'id' => $account->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];
        
                    $this->chart_of_accounts_model->updateBalance($accData);
                }

                $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Deposit', $depositId);

                $funds = $this->accounting_bank_deposit_model->getFunds($depositId);

                $fundsData = [];
                foreach ($data['funds_account'] as $key => $value) {
                    $receivedFrom = explode('-', $data['received_from'][$key]);

                    $fundsData = [
                        'bank_deposit_id' => $depositId,
                        'received_from_key' => $receivedFrom[0],
                        'received_from_id' => $receivedFrom[1],
                        'received_from_account_id' => $value,
                        'description' => $data['description'][$key],
                        'payment_method' => $data['payment_method'][$key],
                        'ref_no' => $data['reference_no'][$key],
                        'amount' => $data['amount'][$key]
                    ];

                    if(!is_null($funds[$key])) {
                        $this->accounting_bank_deposit_model->update_fund($funds[$key]->id, $depositId, $fundsData);
                    } else {
                        $this->accounting_bank_deposit_model->insert_fund($fundsData);
                    }

                    if (!isset($data['template_name'])) {
                        $account = $this->chart_of_accounts_model->getById($value);

                        $accountBalance = $account->account_id !== "7" ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $data['amount'][$key])) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $data['amount'][$key]));
                        $accountBalance = number_format($accountBalance, 2, '.', ',');
                        $accountData = [
                            'id' => $value,
                            'company_id' => logged('company_id'),
                            'balance' => floatval(str_replace(',', '', $accountBalance))
                        ];
                        $withdraw = $this->chart_of_accounts_model->updateBalance($accountData);

                        $accTransacData = [
                            'account_id' => $account->id,
                            'transaction_type' => 'Deposit',
                            'transaction_id' => $depositId,
                            'amount' => floatval(str_replace(',', '', $data['amount'][$key])),
                            'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                            'type' => 'decrease',
                            'is_category' => 1,
                            'child_id' => $fundId
                        ];
        
                        $this->accounting_account_transactions_model->create($accTransacData);
                    }
                }

                foreach($funds as $index => $fund) {
                    if($data['funds_account'][$index] === null) {
                        $this->accounting_bank_deposit_model->delete_fund_by_id($fund->id);
                    }
                }

                if (!isset($data['template_name'])) {
                    // NEW
                    $depositToAcc = $this->chart_of_accounts_model->getById($data['bank_account']);
                    $depositData = [
                        'id' => $depositToAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $depositToAcc->balance)) + floatval(str_replace(',', '', $totalAmount))
                    ];
                    $this->chart_of_accounts_model->updateBalance($depositData);

                    $accTransacData = [
                        'account_id' => $depositToAcc->id,
                        'transaction_type' => 'Deposit',
                        'transaction_id' => $depositId,
                        'amount' => floatval(str_replace(',', '', $totalAmount)),
                        'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                        'type' => 'increase'
                    ];
    
                    $this->accounting_account_transactions_model->create($accTransacData);

                    if ($data['cash_back_amount'] !== "") {
                        $cashBackAccount = $this->chart_of_accounts_model->getById($data['cash_back_account']);
                        $cashBackData = [
                            'id' => $cashBackAccount->id,
                            'company_id' => logged('company_id'),
                            'balance' => $cashBackAccount->account_id !== "7" ? floatval(str_replace(',', '', $cashBackAccount->balance) )+ floatval(str_replace(',', '', $data['cash_back_amount'])) : floatval(str_replace(',', '', $cashBackAccount->balance)) - floatval(str_replace(',', '', $data['cash_back_amount']))
                        ];

                        $cashBack = $this->chart_of_accounts_model->updateBalance($cashBackData);

                        $accTransacData = [
                            'account_id' => $cashBackAccount->id,
                            'transaction_type' => 'Deposit',
                            'transaction_id' => $depositId,
                            'amount' => floatval(str_replace(',', '', $data['cash_back_amount'])),
                            'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                            'type' => 'increase'
                        ];
        
                        $this->accounting_account_transactions_model->create($accTransacData);
                    }
                }
            }

            $return['data'] = $depositId;
            $return['success'] = $update ? true : false;
            $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';
        }

        return $return;
    }

    private function update_transfer($transferId, $data)
    {
        $this->form_validation->set_rules('transfer_from_account', 'Transfer From Account', 'required');
        $this->form_validation->set_rules('transfer_to_account', 'Transfer To Account', 'required|differs[transfer_from_account]');
        $this->form_validation->set_rules('transfer_amount', 'Amount', 'required');

        if (isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('date', 'Date', 'required|date');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } else {
            $transfer = $this->accounting_transfer_funds_model->getById($transferId, logged('company_id'));

            $transferData = [
                'transfer_from_account_id' => $data['transfer_from_account'],
                'transfer_to_account_id' => $data['transfer_to_account'],
                'transfer_amount' => $data['transfer_amount'],
                'transfer_date' => isset($data['date']) ? date('Y-m-d', strtotime($data['date'])) : null,
                'transfer_memo' => $data['memo'],
                'recurring' => isset($data['template_name']) ? 1 : null,
            ];

            $update = $this->accounting_transfer_funds_model->update($transferId, $transferData);

            if ($update) {
                // REVERT OLD
                $attachments = $this->accounting_attachments_model->get_attachments('Transfer', $transfer->id);

                if(count($attachments) > 0) {
                    foreach($attachments as $attachment) {
                        if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                            $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Transfer', 'attachment_id' => $attachment->id, 'linked_id' => $transfer->id]);
                            $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                        }
                    }
                }

                $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Transfer', $transferId);

                foreach($accountTransacs as $transac)
                {
                    $account = $this->chart_of_accounts_model->getById($transac->account_id);
                    $accountType = $this->account_model->getById($account->account_id);

                    if($accountType->account_name === 'Credit Card') {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                    } else {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $accData = [
                        'id' => $account->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];
        
                    $this->chart_of_accounts_model->updateBalance($accData);
                }

                $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Transfer', $transferId);

                // NEW
                $transferFromAcc = $this->chart_of_accounts_model->getById($data['transfer_from_account']);
                $transferToAcc = $this->chart_of_accounts_model->getById($data['transfer_to_account']);

                $transferFromBal = $transferFromAcc->account_id !== "7" ? floatval(str_replace(',', '', $transferFromAcc->balance)) - floatval(str_replace(',', '', $data['transfer_amount'])) : floatval(str_replace(',', '', $transferFromAcc->balance)) + floatval(str_replace(',', '', $data['transfer_amount']));
                $transferToBal = $transferToAcc->account_id !== "7" ? floatval(str_replace(',', '', $transferToAcc->balance)) + floatval(str_replace(',', '', $data['transfer_amount'])) : floatval(str_replace(',', '', $transferToAcc->balance)) - floatval(str_replace(',', '', $data['transfer_amount']));

                $transferFromBal = number_format($transferFromBal, 2, '.', ',');
                $transferToBal = number_format($transferToBal, 2, '.', ',');

                $transferFromAccData = [
                    'id' => $transferFromAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $transferFromBal))
                ];
                $transferToAccData = [
                    'id' => $transferToAcc->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $transferToBal))
                ];

                $this->chart_of_accounts_model->updateBalance($transferFromAccData);
                $this->chart_of_accounts_model->updateBalance($transferToAccData);

                $accTransacData = [
                    'account_id' => $transferFromAcc->id,
                    'transaction_type' => 'Transfer',
                    'transaction_id' => $transferId,
                    'amount' => floatval(str_replace(',', '', $data['transfer_amount'])),
                    'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                    'type' => 'decrease'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                $accTransacData = [
                    'account_id' => $transferToAcc->id,
                    'transaction_type' => 'Transfer',
                    'transaction_id' => $transferId,
                    'amount' => floatval(str_replace(',', '', $data['transfer_amount'])),
                    'transaction_date' => date('Y-m-d', strtotime($data['date'])),
                    'type' => 'increase'
                ];

                $this->accounting_account_transactions_model->create($accTransacData);

                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                            return $v->id === $attachmentId;
                        }, ARRAY_FILTER_USE_BOTH);

                        if(count($link) > 0) {
                            $attachmentData = [
                                'type' => 'Transfer',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $transferId,
                                'order_no' => $order
                            ];

                            $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                        } else {
                            $linkAttachmentData = [
                                'type' => 'Transfer',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $transferId,
                                'order_no' => $order
                            ];
        
                            $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                        }

                        $order++;
                    }
                }
            }

            $return['data'] = $transferId;
            $return['success'] = $update ? true : false;
            $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';
        }

        return $return;
    }

    private function update_journal($journalId, $data)
    {
        if (isset($data['template_name'])) {
            $this->form_validation->set_rules('template_name', 'Template Name', 'required');
            $this->form_validation->set_rules('recurring_type', 'Recurring Type', 'required');

            if ($data['recurring_type'] !== 'unscheduled') {
                $this->form_validation->set_rules('recurring_interval', 'Recurring interval', 'required');

                if ($data['recurring_interval'] !== 'daily') {
                    if ($data['recurring_interval'] === 'monthly') {
                        $this->form_validation->set_rules('recurring_week', 'Recurring week', 'required');
                    } elseif ($data['recurring_interval'] === 'yearly') {
                        $this->form_validation->set_rules('recurring_month', 'Recurring month', 'required');
                    }

                    $this->form_validation->set_rules('recurring_day', 'Recurring day', 'required');
                }
                if ($data['recurring_interval'] !== 'yearly') {
                    $this->form_validation->set_rules('recurr_every', 'Recurring interval', 'required');
                }
                $this->form_validation->set_rules('end_type', 'Recurring end type', 'required');

                if ($data['end_type'] === 'by') {
                    $this->form_validation->set_rules('end_date', 'Recurring end date', 'required');
                } elseif ($data['end_type'] === 'after') {
                    $this->form_validation->set_rules('max_occurence', 'Recurring max occurence', 'required');
                }
            }
        } else {
            $this->form_validation->set_rules('journal_date', 'Date', 'required');
            $this->form_validation->set_rules('journal_no', 'Journal No.', 'required');
        }

        $totalDebit = array_sum(array_map(function ($item) {
            return $item;
        }, $data['debits']));

        $totalCredit = array_sum(array_map(function ($item) {
            return $item;
        }, $data['credits']));

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (isset($data['journal_entry_accounts']) && count($data['journal_entry_accounts']) < 2 || !isset($data['journal_entry_accounts'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'You must fill out at least two detail lines.';
        } elseif ($totalDebit !== $totalCredit) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please balance debits and credits.';
        } else {
            $journalData = [
                'journal_no' => (!isset($data['template_name'])) ? $data['journal_no'] : null,
                'journal_date' => (!isset($data['template_name'])) ? date('Y-m-d', strtotime($data['journal_date'])) : null,
                'memo' => $data['memo'],
                'recurring' => isset($data['template_name']) ? 1 : null
            ];

            $update = $this->accounting_journal_entries_model->update($journalId, $journalData);

            if ($update) {
                $journal = $this->accounting_journal_entries_model->getById($journalId, logged('company_id'));

                // REVERT OLD
                $attachments = $this->accounting_attachments_model->get_attachments('Journal', $journal->id);

                if(count($attachments) > 0) {
                    foreach($attachments as $attachment) {
                        if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                            $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Journal', 'attachment_id' => $attachment->id, 'linked_id' => $journal->id]);
                            $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                        }
                    }
                }

                $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Journal', $journalId);

                foreach($accountTransacs as $transac)
                {
                    $account = $this->chart_of_accounts_model->getById($transac->account_id);
                    $accountType = $this->account_model->getById($account->account_id);

                    if($accountType->account_name === 'Credit Card') {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                    } else {
                        $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                    }

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $accData = [
                        'id' => $account->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];
        
                    $this->chart_of_accounts_model->updateBalance($accData);
                }

                $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Journal', $journalId);

                $entries = $this->accounting_journal_entries_model->getEntries($journalId);

                $this->accounting_journal_entries_model->deleteEntries($journalId);

                // NEW
                if (isset($data['attachments']) && is_array($data['attachments'])) {
                    $order = 1;
                    foreach ($data['attachments'] as $attachmentId) {
                        $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                            return $v->id === $attachmentId;
                        }, ARRAY_FILTER_USE_BOTH);

                        if(count($link) > 0) {
                            $attachmentData = [
                                'type' => 'Journal',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $journalId,
                                'order_no' => $order
                            ];

                            $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                        } else {
                            $linkAttachmentData = [
                                'type' => 'Journal',
                                'attachment_id' => $attachmentId,
                                'linked_id' => $journalId,
                                'order_no' => $order
                            ];
        
                            $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                        }

                        $order++;
                    }
                }

                $entryItems = [];
                foreach ($data['journal_entry_accounts'] as $key => $value) {
                    $name = explode('-', $data['names'][$key]);
    
                    $entryItem = [
                        'journal_entry_id' => $journalId,
                        'account_id' => $value,
                        'debit' => $data['debits'][$key],
                        'credit' => $data['credits'][$key],
                        'description' => $data['descriptions'][$key],
                        'name_key' => $name[0],
                        'name_id' => $name[1]
                    ];

                    if(!is_null($entries[$key])) {
                        $entryItem['created_at'] = $entries[$key]->created_at;
                    }

                    $entryItemId = $this->accounting_journal_entries_model->insertEntryItem($entryItem);

                    $account = $this->chart_of_accounts_model->getById($value);
                    if($account->account_id !== "7" && $account->account_id !== "6") {
                        $newBalance = floatval($account->balance) - floatval($data['credits'][$key]);
                        $newBalance = $newBalance + floatval($data['debits'][$key]);
                    } else {
                        $newBalance = floatval($account->balance) + floatval($data['credits'][$key]);
                        $newBalance = $newBalance - floatval($data['debits'][$key]);
                    }

                    $type = floatval($data['debits'][$key]) > 0 && floatval($data['credits'][$key]) < 1 ? 'increase' : 'decrease';

                    $newBalance = number_format($newBalance, 2, '.', ',');

                    $accountData = [
                        'id' => $account->id,
                        'company_id' => logged('company_id'),
                        'balance' => $newBalance
                    ];

                    $this->chart_of_accounts_model->updateBalance($accountData);

                    $accTransacData = [
                        'account_id' => $account->id,
                        'transaction_type' => 'Journal',
                        'transaction_id' => $journalId,
                        'amount' => floatval($data['debits'][$key]) + floatval($data['credits'][$key]),
                        'transaction_date' => date("Y-m-d", strtotime($data['journal_date'])),
                        'type' => $type,
                        'child_id' => $entryItemId
                    ];

                    $this->accounting_account_transactions_model->create($accTransacData);
                }

                // $entryItemsId = $this->accounting_journal_entries_model->insertEntryItems($entryItems);
            }

            $return['data'] = $journalId;
            $return['success'] = $update ? true : false;
            $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';
        }

        return $return;
    }

    private function update_quantity_adjustment($adjustmentId, $data)
    {
        $this->form_validation->set_rules('adjustment_date', 'Date', 'required');
        $this->form_validation->set_rules('reference_no', 'Reference No.', 'required');
        $this->form_validation->set_rules('inventory_adj_account', 'Inventory Adjustment Account', 'required');

        if (isset($data['product']) && isset($data['new_qty']) && isset($data['change_in_qty']) && isset($data['location'])) {
            $this->form_validation->set_rules('product[]', 'Product', 'required');
            $this->form_validation->set_rules('location[]', 'Location', 'required');
            $this->form_validation->set_rules('new_qty[]', 'New Quantity', 'required');
            $this->form_validation->set_rules('change_in_qty[]', 'Change in Quantity', 'required');
        }

        if(isset($data['adjusted_product'])) {
            $this->form_validation->set_rules('adjusted_product[]', 'Adjusted Product', 'required');
            $this->form_validation->set_rules('adjusted_location[]', 'Adjusted Location', 'required');
            $this->form_validation->set_rules('adjusted_change_in_qty[]', 'Adjusted Change in Quantity', 'required');
        }

        $return = [];

        if ($this->form_validation->run() === false) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Error';
        } elseif (!isset($data['product']) && !isset($data['new_qty']) && !isset($data['change_in_qty'])) {
            $return['data'] = null;
            $return['success'] = false;
            $return['message'] = 'Please enter at least one inventory item.';
        } else {
            $total = 0.00;
            foreach ($data['product'] as $key => $value) {
                $item = $this->items_model->getItemById($value)[0];
                $startingValAdj = $this->starting_value_model->get_by_item_id($value);

                if(!is_null($startingValAdj)) {
                    $total += floatval(str_replace(',', '', $data['change_in_qty'][$key])) * floatval(str_replace(',', '', $startingValAdj->initial_cost));
                } else {
                    $total += floatval(str_replace(',', '', $data['change_in_qty'][$key])) *  floatval(str_replace(',', '', $item->cost));
                }
            }

            foreach($data['adjusted_product'] as $key => $value) {
                $item = $this->items_model->getItemById($value)[0];
                $startingValAdj = $this->starting_value_model->get_by_item_id($value);

                if(!is_null($startingValAdj)) {
                    $total += floatval(str_replace(',', '', $data['adjusted_change_in_qty'][$key])) * floatval(str_replace(',', '', $startingValAdj->initial_cost));
                } else {
                    $total += floatval(str_replace(',', '', $data['adjusted_change_in_qty'][$key])) *  floatval(str_replace(',', '', $item->cost));
                }
            }

            $data['transaction_id'] = $adjustmentId;
            $revert = $this->revert_inventory_qty_adjustment($data);

            if ($revert) {
                $adjustmentData = [
                    'adjustment_no' => $data['reference_no'],
                    'adjustment_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                    'inventory_adjustment_account_id' => $data['inventory_adj_account'],
                    'memo' => $data['memo'],
                    'total_amount' => floatval(str_replace(',', '', $total)),
                ];

                $update = $this->accounting_inventory_qty_adjustments_model->update($adjustmentId, $adjustmentData);

                if ($update) {
                    $adjustmentProducts = [];
                    $locationData = [];
                    foreach ($data['product'] as $key => $value) {
                        $adjustmentProducts[] = [
                            'adjustment_id' => $adjustmentId,
                            'product_id' => $value,
                            'location_id' => $data['location'][$key],
                            'new_quantity' => $data['new_qty'][$key],
                            'change_in_quantity' => $data['change_in_qty'][$key]
                        ];
    
                        $locationData[] = [
                            'id' => $data['location'][$key],
                            'qty' => $data['new_qty'][$key]
                        ];
    
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($value);
                        $startingValAdj = $this->starting_value_model->get_by_item_id($value);
                        $item = $this->items_model->getItemById($value)[0];
    
                        if(!is_null($startingValAdj)) {
                            $amount = floatval(str_replace(',', '', $data['change_in_qty'][$key])) * floatval(str_replace(',', '', $startingValAdj->initial_cost));
                        } else {
                            $amount = floatval(str_replace(',', '', $data['change_in_qty'][$key])) *  floatval(str_replace(',', '', $item->cost));
                        }
    
                        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + $amount;
                        $newBalance = number_format($newBalance, 2, '.', ',');
    
                        $invAssetAccData = [
                            'id' => $invAssetAcc->id,
                            'company_id' => logged('company_id'),
                            'balance' => floatval(str_replace(',', '', $newBalance))
                        ];
    
                        $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                        $accTransacData = [
                            'account_id' => $invAssetAcc->id,
                            'transaction_type' => 'Inventory Qty Adjust',
                            'transaction_id' => $adjustmentId,
                            'amount' => $amount,
                            'transaction_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                            'type' => 'increase',
                            'is_item_category' => 1
                        ];
        
                        $this->accounting_account_transactions_model->create($accTransacData);
                    }

                    $adjustedProducts = $this->accounting_inventory_qty_adjustments_model->get_adjusted_products($adjustmentId);
                    foreach($data['adjusted_product'] as $key => $value) {
                        $adjustmentProducts[] = [
                            'adjustment_id' => $adjustmentId,
                            'product_id' => $value,
                            'location_id' => $data['location'][$key],
                            'new_quantity' => $data['new_qty'][$key],
                            'change_in_quantity' => $data['change_in_qty'][$key]
                        ];

                        $location = $this->items_model->getItemLocation($data['adjusted_location'][$key], $value);
                        $locationData[] = [
                            'id' => $data['adjusted_location'][$key],
                            'qty' => intval($location->qty) + intval($data['adjusted_change_in_qty'][$key])
                        ];

                        $itemAccDetails = $this->items_model->getItemAccountingDetails($value);
                        $startingValAdj = $this->starting_value_model->get_by_item_id($value);
                        $item = $this->items_model->getItemById($value)[0];
    
                        if(!is_null($startingValAdj)) {
                            $amount = floatval(str_replace(',', '', $data['change_in_qty'][$key])) * floatval(str_replace(',', '', $startingValAdj->initial_cost));
                        } else {
                            $amount = floatval(str_replace(',', '', $data['change_in_qty'][$key])) *  floatval(str_replace(',', '', $item->cost));
                        }
    
                        $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + $amount;
                        $newBalance = number_format($newBalance, 2, '.', ',');
    
                        $invAssetAccData = [
                            'id' => $invAssetAcc->id,
                            'company_id' => logged('company_id'),
                            'balance' => floatval(str_replace(',', '', $newBalance))
                        ];
    
                        $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                        $accTransacData = [
                            'account_id' => $invAssetAcc->id,
                            'transaction_type' => 'Inventory Qty Adjust',
                            'transaction_id' => $adjustmentId,
                            'amount' => $amount,
                            'transaction_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                            'type' => 'increase',
                            'is_item_category' => 1
                        ];
        
                        $this->accounting_account_transactions_model->create($accTransacData);
                    }
    
                    $adjustQuantity = $this->items_model->updateBatchLocations($locationData);
                    $adjustmentProdId = $this->accounting_inventory_qty_adjustments_model->insertAdjProduct($adjustmentProducts);
    
                    $adjustmentAcc = $this->chart_of_accounts_model->getById($data['inventory_adj_account']);
                    $newBalance = floatval(str_replace(',', '', $adjustmentAcc->balance)) - $total;
                    $newBalance = number_format($newBalance, 2, '.', ',');
    
                    $adjustmentAccData = [
                        'id' => $adjustmentAcc->id,
                        'company_id' => logged('company_id'),
                        'balance' => floatval(str_replace(',', '', $newBalance))
                    ];
    
                    $this->chart_of_accounts_model->updateBalance($adjustmentAccData);

                    $accTransacData = [
                        'account_id' => $adjustmentAcc->id,
                        'transaction_type' => 'Inventory Qty Adjust',
                        'transaction_id' => $adjustmentId,
                        'amount' => $total,
                        'transaction_date' => date('Y-m-d', strtotime($data['adjustment_date'])),
                        'type' => 'decrease'
                    ];
    
                    $this->accounting_account_transactions_model->create($accTransacData);
                }
            }

            $return['data'] = $adjustmentId;
            $return['success'] = $update ? true : false;
            $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';
        }

        return $return;
    }

    private function update_starting_value_adjustment($adjustmentId, $data)
    {
        $startingValAdjustment = $this->starting_value_model->get_by_id($adjustmentId);

        $startValueAdjData = [
            'ref_no' => $this->input->post('ref_no'),
            'location_id' => $this->input->post('location'),
            'initial_qty' => $this->input->post('initial_qty_on_hand'),
            'as_of_date' => date('Y-m-d', strtotime($this->input->post('as_of_date'))),
            'initial_cost' => floatval(str_replace(',', '', $this->input->post('initial_cost'))),
            'inv_adj_account' => $this->input->post('inventory_adj_account'),
            'memo' => $this->input->post('memo'),
            'total_amount' => floatval(str_replace(',', '', $this->input->post('initial_qty_on_hand'))) * floatval(str_replace(',', '', $this->input->post('initial_cost'))),
        ];

        $update = $this->starting_value_model->update($startingValAdjustment->id, $startValueAdjData);

        if($update) {
            // REVERT PREVIOUS ADJUSTMENT
            $locationId = $startingValAdjustment->location_id;
            $location = $this->items_model->getItemLocation($locationId, $item_id);
            $quantity = intval($location->qty) - intval($startingValAdjustment->initial_qty);
            $quantity = intval($location->initial_qty) + $quantity;
            $locationDetails = [
                'qty' => $quantity
            ];

            $condition = ['id' => $locationId, 'item_id' => $item_id, 'company_id' => logged('company_id')];
            $updateLocation = $this->items_model->updateLocationDetails($locationDetails, $condition);

            $adjustmentAcc = $this->chart_of_accounts_model->getById($startingValAdjustment->inv_adj_account);
            $newBalance = floatval(str_replace(',', '', $adjustmentAcc->balance)) + floatval(str_replace(',', '', $startingValAdjustment->total_amount));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $adjustmentAccData = [
                'id' => $adjustmentAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($adjustmentAccData);

            $itemAccDetails = $this->items_model->getItemAccountingDetails($item_id);
            $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
            $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - floatval(str_replace(',', '', $startingValAdjustment->total_amount));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $invAssetAccData = [
                'id' => $invAssetAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($invAssetAccData);

            // MAKE THE ADJUSTMENT UPDATE
            $locationId = $startValueAdjData['location_id'];
            $location = $this->items_model->getItemLocation($locationId, $item_id);
            $quantity = intval($location->qty) - intval($location->initial_qty);
            $quantity = intval($startValueAdjData['initial_qty']) + $quantity;
            $locationDetails = [
                'qty' => $quantity
            ];

            // Update initial quantity and quantity of item in items_has_storage_loc table
            $condition = ['id' => $locationId, 'item_id' => $item_id, 'company_id' => logged('company_id')];
            $updateLocation = $this->items_model->updateLocationDetails($locationDetails, $condition);

            $adjustmentAcc = $this->chart_of_accounts_model->getById($startValueAdjData['inv_adj_account']);
            $newBalance = floatval(str_replace(',', '', $adjustmentAcc->balance)) - floatval(str_replace(',', '', $startValueAdjData['total_amount']));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $adjustmentAccData = [
                'id' => $adjustmentAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($adjustmentAccData);

            $itemAccDetails = $this->items_model->getItemAccountingDetails($item_id);
            $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
            $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + floatval(str_replace(',', '', $startValueAdjData['total_amount']));
            $newBalance = number_format($newBalance, 2, '.', ',');

            $invAssetAccData = [
                'id' => $invAssetAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($invAssetAccData);
        }

        $return['data'] = $adjustmentId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_weekly_timesheet($timeSheetId, $data)
    {
        $name = explode('-', $data['person_tracking']);
        $weekDate = explode('-', $data['week_dates']);
        $weekStartDate = strtotime($weekDate[0]);
        $weekEndDate = strtotime($weekDate[1]);
        $timesheetSettings = $this->accounting_timesheet_settings_model->get_by_company_id(logged('company_id'));

        $timeSheet = $this->accounting_weekly_timesheet_model->get_by_id($timeSheetId);
        $update = $this->accounting_weekly_timesheet_model->update($timeSheetId, ['status' => 1]);

        $timeActivityData = [
            'name_key' => $timeSheet->name_type,
            'name_id' => $timeSheet->name_id,
            'start_date' => date("Y-m-d", strtotime($timeSheet->week_start_date)),
            'end_date' => date("Y-m-d", strtotime($timeSheet->week_end_date))
        ];
        $timeActivities = $this->accounting_weekly_timesheet_model->get_timesheet_activities($timeActivityData);
        $ids = array_map(function($activity) {
            return $activity->id;
        }, $timeActivities);

        if($update) {
            $delete = $this->accounting_single_time_activity_model->delete_multiple_by_id($ids);
            $row = 1;
            foreach ($data['customer'] as $key => $value) {
                $count = 0;
                if ($value !== '') {
                    foreach (json_decode($data['hours'][$key], true) as $day => $hours) {
                        if ($hours !== "" && $hours !== "00:00") {
                            $timeActData = [
                                'company_id' => logged('company_id'),
                                'date' => date('Y-m-d', strtotime($weekDate[0]." +$count days")),
                                'name_key' => $name[0],
                                'name_id' => $name[1],
                                'customer_id' => $value,
                                'service_id' => $timesheetSettings->service === "1" ? $data['service'][$key] : null,
                                'billable' => $timesheetSettings->billable === "1" ? $data['billable'][$key] : 0,
                                'hourly_rate' => $timesheetSettings->billable === "1" ? floatval(str_replace(',', '', $data['hourly_rate'][$key])) : null,
                                'taxable' => $timesheetSettings->billable === "1" ? $data['taxable'][$key] : 0,
                                'time' => $hours,
                                'description' => $data['description'][$key],
                                'status' => 1
                            ];

                            $timeActivityId = $this->accounting_single_time_activity_model->create($timeActData);
                        }

                        $count++;
                    }

                    $row++;
                }
            }
        }

        $return['data'] = $timeSheetId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    public function update_time_activity($activityid, $data)
    {
        $timesheetSettings = $this->accounting_timesheet_settings_model->get_by_company_id(logged('company_id'));
        $name = explode('-', $data['name']);

        if(isset($data['start_end_time'])) {
            $startTime = strtotime($data['start_time']);
            $endTime = strtotime($data['end_time']);
            $break = strtotime($data['time'] === '' ? "00:00" : $data['time']);
            $duration = date("H:i:s", (($endTime - $startTime) - $break));
        } else {
            $duration = date("H:i:s", strtotime($data['time']));
        }
        $hms = explode(":", $duration);
        $totalTime = $hms[0].":".$hms[1].":".$hms[2];

        $timeActData = [
            'company_id' => logged('company_id'),
            'date' => date('Y-m-d', strtotime($data['date'])),
            'name_key' => $name[0],
            'name_id' => $name[1],
            'customer_id' => $data['customer'],
            'service_id' => $timesheetSettings->service === "1" || is_null($timesheetSettings) ? $data['service'] : null,
            'billable' => $timesheetSettings->billable === "1" && isset($data['billable']) || is_null($timesheetSettings) && isset($data['billable']) ? 1 : 0,
            'hourly_rate' => $timesheetSettings->billable === "1" && isset($data['billable']) || is_null($timesheetSettings) && isset($data['billable']) ? floatval(str_replace(',', '', $data['hourly_rate'])) : null,
            'taxable' => $timesheetSettings->billable === "1" && isset($data['billable']) && isset($data['taxable']) || is_null($timesheetSettings) && isset($data['billable']) && isset($data['taxable']) ? 1 : 0,
            'start_time' => isset($data['start_end_time']) ? $data['start_time'] : null,
            'end_time' => isset($data['start_end_time']) ? $data['end_time'] : null,
            'break_duration' => isset($data['start_end_time']) ? $data['time'] : null,
            'time' => $totalTime,
            'description' => $data['description'],
        ];

        $update = $this->accounting_single_time_activity_model->update($activityid, $timeActData);

        $return['data'] = $activityid;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_receive_payment($paymentId, $data)
    {
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);

        $paymentData = [
            'customer_id' => $data['customer'],
            'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
            'payment_method' => $data['payment_method'],
            'ref_no' => $data['ref_no'],
            'deposit_to' => $data['deposit_to_account'],
            'amount_received' => floatval(str_replace(',', '', $data['received_amount'])),
            'amount_to_credit' => floatval(str_replace(',', '', $data['amount_to_credit'])),
            'amount_to_apply' => floatval(str_replace(',', '', $data['amount_to_apply'])),
            'credit_balance' => floatval(str_replace(',', '', $data['amount_to_credit'])),
            'memo' => $data['memo']
        ];

        $update = $this->accounting_receive_payment_model->updateReceivePayment($paymentId, $paymentData);

        if($update) {
            // REVERT
            $oldDepositToAcc = $this->chart_of_accounts_model->getById($payment->deposit_to);
            $oldDepositToAccType = $this->account_model->getById($oldDepositToAcc->account_id);

            if ($oldDepositToAccType->account_name === 'Credit Card') {
                $newBalance = floatval(str_replace(',', '', $oldDepositToAcc->balance)) + floatval(str_replace(',', '', $payment->amount_received));
            } else {
                $newBalance = floatval(str_replace(',', '', $oldDepositToAcc->balance)) - floatval(str_replace(',', '', $payment->amount_received));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $oldDepositToAccData = [
                'id' => $oldDepositToAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($oldDepositToAccData);

            $attachments = $this->accounting_attachments_model->get_attachments('Payment', $payment->id);

            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Payment', 'attachment_id' => $attachment->id, 'linked_id' => $payment->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            $invoices = $this->accounting_receive_payment_model->get_payment_invoices($payment->id);
            $credits = $this->accounting_receive_payment_model->get_payment_credits($payment->id);

            foreach($invoices as $paymentInvoice) {
                $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($paymentInvoice->invoice_id);

                $balance = floatval(str_replace(',', '', $invoice->balance)) + floatval(str_replace(',', '', $paymentInvoice->payment_amount));

                if(floatval(str_replace(',', '', $invoice->grand_total)) === $balance) {
                    $status = 'Schedule';
                }

                if(floatval(str_replace(',', '', $invoice->grand_total)) > $balance) {
                    $status = 'Partially Paid';
                }

                $invoiceData = [
                    'balance' => floatval(str_replace(',', '', $balance)),
                    'status' => isset($status) ? $status : $invoice->status
                ];
                $this->accounting_invoices_model->updateInvoices($invoiceId, $invoiceData);

                $paymentRecordData = [
                    'company_id' => logged('company_id'),
                    'customer_id' => $payment->customer_id,
                    'invoice_amount' => floatval(str_replace(',', '', $paymentInvoice->payment_amount)),
                    'payment_date' => date("Y-m-d", strtotime($payment->payment_date)),
                    'payment_method' => is_null($payment->payment_method) || $payment->payment_method === '' ? 'cash' : $payment->payment_method,
                    'invoice_number' => $invoice->invoice_number
                ];
                $this->payment_records_model->delete_payment_record($paymentRecordData);

                $this->accounting_receive_payment_model->delete_payment_invoice($paymentInvoice->id);
            }

            foreach($credits as $paymentCredit) {
                $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($paymentCredit->credit_memo_id);

                $balance = floatval(str_replace(',', '', $creditMemo->balance)) + floatval(str_replace(',', '', $paymentCredit->payment_amount));

                $creditMemoData = [
                    'balance' => floatval(str_replace(',', '', $balance))
                ];
                $this->accounting_credit_memo_model->updateCreditMemo($creditMemo->id, $creditMemoData);

                $this->accounting_receive_payment_model->delete_payment_credit($paymentCredit->id);
            }

            // NEW
            $depositToAcc = $this->chart_of_accounts_model->getById($data['deposit_to_account']);
            $depositToAccType = $this->account_model->getById($depositToAcc->account_id);

            if ($depositToAccType->account_name === 'Credit Card') {
                $newBalance = floatval(str_replace(',', '', $depositToAcc->balance)) - floatval(str_replace(',', '', $data['received_amount']));
            } else {
                $newBalance = floatval(str_replace(',', '', $depositToAcc->balance)) + floatval(str_replace(',', '', $data['received_amount']));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $depositToAccData = [
                'id' => $depositToAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($depositToAccData);

            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Payment',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $paymentId,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Payment',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $paymentId,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            $paymentCredits = [];
            $paymentInvoices = [];
            if(isset($data['credits'])) {
                foreach($data['credits'] as $key => $transaction) {
                    $transaction = explode('_', $transaction);

                    switch($transaction[0]) {
                        case 'credit-memo' :
                            $paymentCredits[] = [
                                'receive_payment_id' => $paymentId,
                                'credit_memo_id' => $transaction[1],
                                'payment_amount' => floatval(str_replace(',', '', $data['credit_payment'][$key]))
                            ];

                            $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($transaction[1]);
                            $balance = floatval(str_replace(',', '', $creditMemo->balance)) - floatval(str_replace(',', '', $data['credit_payment'][$key]));

                            $creditMemoData = [
                                'balance' => floatval(str_replace(',', '', $balance))
                            ];
                            $this->accounting_credit_memo_model->updateCreditMemo($creditMemo->id, $creditMemoData);
                        break;
                        case 'unapplied-payment' :
                            $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($transaction[1]);
                            $balance = floatval(str_replace(',', '', $payment->credit_balance)) - floatval(str_replace(',', '', $data['credit_payment'][$key]));

                            $paymentData = [
                                'credit_balance' => floatval(str_replace(',', '', $balance))
                            ];

                            $this->accounting_receive_payment_model->update_receive_payment_details($payment->id, $paymentData);

                            $creditPayment = floatval(str_replace(',', '', $data['credit_payment'][$key]));
                            for($i = count($data['invoice']) - 1; $creditPayment > 0; $i--) {
                                $invoiceId = $data['invoice'][$i];
                                $invoicePayment = $data['payment'][$i];

                                if(floatval(str_replace(',', '', $invoicePayment)) > $creditPayment) {
                                    $paymentAmount = floatval(str_replace(',', '', $creditPayment));
                                    $data['payment'][$i] = floatval(str_replace(',', '', $invoicePayment)) - $creditPayment;
                                    $creditPayment = 0.00;
                                } else {
                                    $paymentAmount = floatval(str_replace(',', '', $invoicePayment));
                                    $data['payment'][$i] = 0.00;
                                    $creditPayment -= floatval(str_replace(',', '', $invoicePayment));
                                }

                                $paymentInvoices[] = [
                                    'receive_payment_id' => $payment->id,
                                    'invoice_id' => $invoiceId,
                                    'payment_amount' => floatval(str_replace(',', '', $paymentAmount))
                                ];

                                $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($invoiceId);
                                $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);

                                $paymentAmounts = array_column($paymentRecords, 'invoice_amount');
                                $totalPayment = array_sum($paymentAmounts);

                                $balance = floatval(str_replace(',', '', $invoice->grand_total)) - floatval(str_replace(',', '', $totalPayment));
                                $balance -= floatval(str_replace(',', '', $data['payment'][$i]));

                                if($balance === 0.00) {
                                    $status = 'Paid';
                                } else {
                                    if(floatval(str_replace(',', '', $invoice->grand_total)) > $balance) {
                                        $status = 'Partially Paid';
                                    }
                                }

                                $invoiceData = [
                                    'balance' => floatval(str_replace(',', '', $balance)),
                                    'status' => isset($status) ? $status : $invoice->status
                                ];
                                $this->accounting_invoices_model->updateInvoices($invoiceId, $invoiceData);

                                $this->payment_records_model->create([
                                    'user_id' => logged('id'),
                                    'company_id' => logged('company_id'),
                                    'customer_id' => $data['customer'],
                                    'invoice_amount' => floatval(str_replace(',', '', $data['payment'][$i])),
                                    'invoice_tip' => 0.00,
                                    'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
                                    'payment_method' => !is_null($data['payment_method']) ? $data['payment_method'] : 'cash',
                                    'invoice_number' => $invoice->invoice_number,
                                    'reference_number' => '',
                                    'notes' => ''
                                ]);

                                if(floatval(str_replace(',', '', $data['payment'][$i])) === 0) {
                                    unset($data['invoice'][$i]);
                                    unset($data['payment'][$i]);
                                }
                            }
                        break;
                    }
                }
            }

            if(count($paymentCredits) > 0) {
                $this->accounting_receive_payment_model->add_payment_credits($paymentCredits);
            }

            if(isset($data['invoice'])) {
                foreach($data['invoice'] as $key => $invoiceId) {
                    $paymentInvoices[] = [
                        'receive_payment_id' => $paymentId,
                        'invoice_id' => $invoiceId,
                        'payment_amount' => floatval(str_replace(',', '', $data['payment'][$key]))
                    ];

                    $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($invoiceId);
                    $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);

                    $paymentAmounts = array_column($paymentRecords, 'invoice_amount');
                    $totalPayment = array_sum($paymentAmounts);

                    $balance = floatval(str_replace(',', '', $invoice->grand_total)) - floatval(str_replace(',', '', $totalPayment));
                    $balance -= floatval(str_replace(',', '', $data['payment'][$key]));

                    if($balance === 0.00) {
                        $status = 'Paid';
                    } else {
                        if(floatval($invoice->grand_total) > $balance) {
                            $status = 'Partially Paid';
                        }
                    }

                    $invoiceData = [
                        'balance' => floatval(str_replace(',', '', $balance)),
                        'status' => isset($status) ? $status : $invoice->status
                    ];
                    $this->accounting_invoices_model->updateInvoices($invoiceId, $invoiceData);

                    $this->payment_records_model->create([
                        'user_id' => logged('id'),
                        'company_id' => logged('company_id'),
                        'customer_id' => $data['customer'],
                        'invoice_amount' => floatval(str_replace(',', '', $data['payment'][$key])),
                        'invoice_tip' => 0.00,
                        'payment_date' => date("Y-m-d", strtotime($data['payment_date'])),
                        'payment_method' => !is_null($data['payment_method']) ? $data['payment_method'] : 'cash',
                        'invoice_number' => $invoice->invoice_number,
                        'reference_number' => '',
                        'notes' => ''
                    ]);
                }
            }

            if(count($paymentInvoices) > 0) {
                $this->accounting_receive_payment_model->add_payment_invoices($paymentInvoices);
            }
        }

        $return['data'] = $paymentId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_credit_memo($creditMemoId, $data)
    {
        $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($creditMemoId);
        $diff = floatval(str_replace(',', '', $creditMemo->total_amount)) - floatval(str_replace(',', '', $creditMemo->balance));

        $creditMemoData = [
            'customer_id' => $data['customer'],
            'email' => $data['email'],
            'send_later' => !isset($data['template_name']) ? $data['send_later'] : null,
            'credit_memo_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['credit_memo_date'])) : null,
            'billing_address' => nl2br($data['billing_address']),
            'location_of_sale' => $data['location_of_sale'],
            'po_number' => $data['purchase_order_no'],
            'sales_rep' => $data['sales_rep'],
            'message_credit_memo' => $data['message_credit_memo'],
            'message_on_statement' => $data['message_on_statement'],
            'adjustment_name' => $data['adjustment_name'],
            'adjustment_value' => $data['adjustment_value'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
            'balance' => floatval(str_replace(',', '', $diff)) + floatval(str_replace(',', '', $data['total_amount'])),
            'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
            'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
            'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
        ];

        $update = $this->accounting_credit_memo_model->updateCreditMemo($creditMemo->id, $creditMemoData);

        if($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('Credit Memo', $creditMemo->id);
            $tags = $this->tags_model->get_transaction_tags('Credit Memo', $creditMemo->id);

            // OLD
            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Credit Memo', 'attachment_id' => $attachment->id, 'linked_id' => $creditMemo->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Credit Memo', 'tag_id' => $tag->id, 'transaction_id' => $creditMemo->id]);
                    }
                }
            }

            // NEW
            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Credit Memo',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $creditMemo->id,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Credit Memo',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $creditMemo->id,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Credit Memo',
                        'transaction_id' => $creditMemo->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Credit Memo', $creditMemoId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Credit Memo', $creditMemoId);

            $arAcc = $this->chart_of_accounts_model->get_accounts_receivable_account(logged('company_id'));
            $newBalance = floatval(str_replace(',', '', $arAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));

            $arAccData = [
                'id' => $arAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($arAccData);

            $accTransacData = [
                'account_id' => $arAcc->id,
                'transaction_type' => 'Credit Memo',
                'transaction_id' => $creditMemoId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['credit_memo_date'])),
                'type' => 'decrease'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_customer_transaction_items('Credit Memo', $creditMemo->id, $data);
        }

        $return['data'] = $creditMemoId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_sales_receipt($salesReceiptId, $data)
    {
        $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($salesReceiptId);

        $salesReceiptdata = [
            'customer_id' => $data['customer'],
            'email' => $data['email'],
            'send_later' => !isset($data['template_name']) ? $data['send_later'] : null,
            'billing_address' => nl2br($data['billing_address']),
            'sales_receipt_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['sales_receipt_date'])) : null,
            'location_of_sale' => $data['location_of_sale'],
            'po_number' => $data['purchase_order_no'],
            'sales_rep' => $data['sales_rep'],
            'payment_method' => $data['payment_method'],
            'reference_no' => $data['ref_no'],
            'deposit_to_account' => $data['deposit_to_account'],
            'message_sales_receipt' => $data['message_sales_receipt'],
            'message_on_statement' => $data['message_on_statement'],
            'adjustment_name' => $data['adjustment_name'],
            'adjustment_value' => $data['adjustment_value'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
            'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
            'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
            'discount_total' => floatval(str_replace(',', '', $data['discount_total']))
        ];

        $update = $this->accounting_sales_receipt_model->updateSalesReceipt($salesReceipt->id, $salesReceiptdata);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Sales Receipt', $salesReceiptId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Sales Receipt', $salesReceiptId);

            $attachments = $this->accounting_attachments_model->get_attachments('Sales Receipt', $salesReceipt->id);
            $tags = $this->tags_model->get_transaction_tags('Sales Receipt', $salesReceipt->id);

            // OLD
            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Sales Receipt', 'attachment_id' => $attachment->id, 'linked_id' => $salesReceipt->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Sales Receipt', 'tag_id' => $tag->id, 'transaction_id' => $salesReceipt->id]);
                    }
                }
            }

            // NEW
            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Sales Receipt',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $salesReceipt->id,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Sales Receipt',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $salesReceipt->id,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Sales Receipt',
                        'transaction_id' => $salesReceipt->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            $depositAcc = $this->chart_of_accounts_model->getById($data['deposit_to_account']);
            $depositAccType = $this->account_model->getById($depositAcc->account_id);

            if ($depositAccType->account_name === 'Credit Card') {
                $newBalance = floatval(str_replace(',', '', $depositAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
            } else {
                $newBalance = floatval(str_replace(',', '', $depositAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $depositAccData = [
                'id' => $depositAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($depositAccData);

            $accTransacData = [
                'account_id' => $depositAcc->id,
                'transaction_type' => 'Sales Receipt',
                'transaction_id' => $salesReceiptId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['sales_receipt_date'])),
                'type' => 'increase'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_customer_transaction_items('Sales Receipt', $salesReceipt->id, $data);
        }

        $return['data'] = $salesReceiptId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_refund_receipt($refundReceiptId, $data)
    {
        $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($refundReceiptId);

        $refundReceiptData = [
            'customer_id' => $data['customer'],
            'email' => $data['email'],
            'billing_address' => nl2br($data['billing_address']),
            'refund_receipt_date' => !isset($data['template_name']) ? date("Y-m-d", strtotime($data['refund_receipt_date'])) : null,
            'location_of_sale' => $data['location_of_sale'],
            'po_number' => $data['purchase_order_no'],
            'sales_rep' => $data['sales_rep'],
            'payment_method' => $data['payment_method'],
            'refund_from_account' => $data['refund_from_account'],
            'check_no' => !is_null($data['print_later']) ? null : $data['check_no'],
            'print_later' => $data['print_later'],
            'message_refund_receipt' => $data['message_refund_receipt'],
            'message_on_statement' => $data['message_on_statement'],
            'adjustment_name' => $data['adjustment_name'],
            'adjustment_value' => $data['adjustment_value'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
            'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
            'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
            'discount_total' => floatval(str_replace(',', '', $data['discount_total']))
        ];

        $update = $this->accounting_refund_receipt_model->updateRefundReceipt($refundReceipt->id, $refundReceiptData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Refund Receipt', $refundReceiptId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Refund Receipt', $refundReceiptId);

            $attachments = $this->accounting_attachments_model->get_attachments('Refund Receipt', $refundReceipt->id);
            $tags = $this->tags_model->get_transaction_tags('Refund Receipt', $refundReceipt->id);

            // OLD
            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Refund Receipt', 'attachment_id' => $attachment->id, 'linked_id' => $refundReceipt->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Refund Receipt', 'tag_id' => $tag->id, 'transaction_id' => $refundReceipt->id]);
                    }
                }
            }

            // NEW
            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Refund Receipt',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $refundReceipt->id,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Refund Receipt',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $refundReceipt->id,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Refund Receipt',
                        'transaction_id' => $refundReceipt->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            $refundAcc = $this->chart_of_accounts_model->getById($data['refund_from_account']);
            $refundAccType = $this->account_model->getById($refundAcc->account_id);

            if ($refundAccType->account_name === 'Credit Card') {
                $newBalance = floatval(str_replace(',', '', $refundAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));
            } else {
                $newBalance = floatval(str_replace(',', '', $refundAcc->balance)) - floatval(str_replace(',', '', $data['total_amount']));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $refundAccData = [
                'id' => $refundAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($refundAccData);

            $accTransacData = [
                'account_id' => $refundAcc->id,
                'transaction_type' => 'Refund Receipt',
                'transaction_id' => $refundReceiptId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['refund_receipt_date'])),
                'type' => 'decrease'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $this->update_customer_transaction_items('Refund Receipt', $refundReceipt->id, $data);
        }

        $return['data'] = $refundReceiptId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_delayed_credit($delayedCreditId, $data)
    {
        $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($delayedCreditId);

        $delayedCreditData = [
            'customer_id' => $data['customer'],
            'delayed_credit_date' => date("Y-m-d", strtotime($data['delayed_credit_date'])),
            'memo' => $data['memo'],
            'adjustment_name' => $data['adjustment_name'],
            'adjustment_value' => $data['adjustment_value'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
            'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
            'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
            'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
        ];

        $update = $this->accounting_delayed_credit_model->updateDelayedCredit($delayedCredit->id, $delayedCreditData);

        if($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('Delayed Credit', $delayedCredit->id);
            $tags = $this->tags_model->get_transaction_tags('Delayed Credit', $delayedCredit->id);

            // OLD
            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Delayed Credit', 'attachment_id' => $attachment->id, 'linked_id' => $delayedCredit->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Delayed Credit', 'tag_id' => $tag->id, 'transaction_id' => $delayedCredit->id]);
                    }
                }
            }

            // NEW
            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Delayed Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $delayedCredit->id,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Delayed Credit',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $delayedCredit->id,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Delayed Credit',
                        'transaction_id' => $delayedCredit->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            $this->update_customer_transaction_items('Delayed Credit', $delayedCredit->id, $data);
        }

        $return['data'] = $delayedCreditId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_delayed_charge($delayedChargeId, $data)
    {
        $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($delayedChargeId);

        $delayedChargeData = [
            'customer_id' => $data['customer'],
            'delayed_charge_date' => date("Y-m-d", strtotime($data['delayed_charge_date'])),
            'memo' => $data['memo'],
            'adjustment_name' => $data['adjustment_name'],
            'adjustment_value' => $data['adjustment_value'],
            'total_amount' => floatval(str_replace(',', '', $data['total_amount'])),
            'subtotal' => floatval(str_replace(',', '', $data['subtotal'])),
            'tax_total' => floatval(str_replace(',', '', $data['tax_total'])),
            'discount_total' => floatval(str_replace(',', '', $data['discount_total'])),
        ];

        $update = $this->accounting_delayed_charge_model->updateDelayedCharge($delayedCharge->id, $delayedChargeData);

        if($update) {
            $attachments = $this->accounting_attachments_model->get_attachments('Delayed Charge', $delayedCharge->id);
            $tags = $this->tags_model->get_transaction_tags('Delayed Charge', $delayedCharge->id);

            // OLD
            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Delayed Charge', 'attachment_id' => $attachment->id, 'linked_id' => $delayedCharge->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Delayed Charge', 'tag_id' => $tag->id, 'transaction_id' => $delayedCharge->id]);
                    }
                }
            }

            // NEW
            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Delayed Charge',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $delayedCharge->id,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Delayed Charge',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $delayedCharge->id,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Delayed Charge',
                        'transaction_id' => $delayedCharge->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            $this->update_customer_transaction_items('Delayed Charge', $delayedCharge->id, $data);
        }

        $return['data'] = $delayedChargeId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_invoice($invoiceId, $data)
    {
        $invoice = $this->invoice_model->getinvoice($invoiceId);

        if ($data['credit_card_payments'] == 1) {
            $credit_card = 'Credit Card';
        } else {
            $credit_card = '0';
        }

        if ($data['bank_transfer'] == 1) {
            $bank_transfer = 'Bank Transfer';
        } else {
            $bank_transfer = '0';
        }

        if ($data['instapay'] == 1) {
            $instapay = 'Instapay';
        } else {
            $instapay = '0';
        }

        if ($data['check'] == 1) {
            $check = 'Check';
        } else {
            $check = '0';
        }

        if ($data['cash'] == 1) {
            $cash = 'Cash';
        } else {
            $cash = '0';
        }

        if ($data['deposit'] == 1) {
            $deposit = 'Deposit';
        } else {
            $deposit = '0';
        }

        $diff = floatval(str_replace(',', '', $invoice->grand_total)) - floatval(str_replace(',', '', $invoice->balance));
        $balance = floatval(str_replace(',', '', $data['total_amount'])) - floatval(str_replace(',', '', $diff));

        $invoiceData = [
            'customer_id' => $data['customer'],
            'job_location' => $data['job_location'],
            'job_name' => $data['job_name'],
            'work_order_number' => $data['job_no'],
            'purchase_order' => $data['purchase_order_no'],
            'invoice_number' => $data['invoice_no'],
            'date_issued' => date("Y-m-d", strtotime($data['date_issued'])),
            'due_date' => date("Y-m-d", strtotime($data['due_date'])),
            'status' => $data['status'],
            'customer_email' => $data['customer_email'],
            'billing_address' => nl2br($data['billing_address']),
            'shipping_to_address' => nl2br($data['shipping_to']),
            'ship_via' => $data['ship_via'],
            'shipping_date' => date("Y-m-d", strtotime($data['shipping_date'])),
            'tracking_number' => $data['tracking_no'],
            'terms' => $data['terms'],
            'location_scale' => $data['location_of_sale'],
            'attachments' => json_encode($data['attachments']),
            'tags' => json_encode($data['tags']),
            'total_due' => floatval(str_replace(',', '', $data['total_amount'])),
            'balance' => floatval(str_replace(',', '', $balance)),
            'deposit_request' => $data['deposit_amount'],
            'deposit_request_type' => $data['deposit_request_type'],
            'payment_methods' => $credit_card.','.$bank_transfer.','.$instapay.','.$check.','.$cash.','.$deposit,
            'message_to_customer' => $data['message_to_customer'],
            'terms_and_conditions' => $data['terms_and_conditions'],
            'sub_total' => floatval(str_replace(',', '', $data['subtotal'])),
            'taxes' => floatval(str_replace(',', '', $data['tax_total'])),
            'adjustment_name' => $data['adjustment_name'],
            'adjustment_value' => $data['adjustment_value'],
            'grand_total' => floatval(str_replace(',', '', $data['total_amount'])),
        ];

        $update = $this->invoice_model->update_invoice($invoiceId, $invoiceData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Invoice', $invoiceId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Invoice', $invoiceId);

            $arAcc = $this->chart_of_accounts_model->get_accounts_receivable_account(logged('company_id'));
            $newBalance = floatval(str_replace(',', '', $arAcc->balance)) + floatval(str_replace(',', '', $data['total_amount']));

            $arAccData = [
                'id' => $arAcc->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($arAccData);

            $accTransacData = [
                'account_id' => $arAcc->id,
                'transaction_type' => 'Invoice',
                'transaction_id' => $invoiceId,
                'amount' => floatval(str_replace(',', '', $data['total_amount'])),
                'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                'type' => 'increase'
            ];

            $this->accounting_account_transactions_model->create($accTransacData);

            $attachments = $this->accounting_attachments_model->get_attachments('Invoice', $invoice->id);
            $tags = $this->tags_model->get_transaction_tags('Invoice', $invoice->id);
            $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('invoice', $invoiceId);

            // OLD
            if(count($attachments) > 0) {
                foreach($attachments as $attachment) {
                    if(!isset($data['attachments']) || !in_array($attachment->id, $data['attachments'])) {
                        $attachmentLink = $this->accounting_attachments_model->get_attachment_link(['type' => 'Invoice', 'attachment_id' => $attachment->id, 'linked_id' => $invoice->id]);
                        $this->accounting_attachments_model->unlink_attachment($attachmentLink->id);
                    }
                }
            }

            if(count($tags) > 0) {
                foreach($tags as $key => $tag) {
                    if(!isset($data['tags']) || !isset($data['tags'][$key])) {
                        $this->tags_model->unlink_tag(['transaction_type' => 'Invoice', 'tag_id' => $tag->id, 'transaction_id' => $invoice->id]);
                    }
                }
            }

            if(count($linkedTransactions) > 0) {
                foreach($linkedTransactions as $linkedData) {
                    if($linkedData->linked_transaction_type === 'delayed-credit') {
                        $creditData = [
                            'status' => 1
                        ];

                        $creditUpdate = $this->accounting_delayed_credit_model->updateDelayedCredit($linkedData->linked_transaction_id, $creditData);
                    } else {
                        $chargeData = [
                            'status' => 1
                        ];

                        $chargeUpdate = $this->accounting_delayed_charge_model->updateDelayedCharge($linkedData->linked_transaction_id, $chargeData);
                    }

                    $this->accounting_linked_transactions_model->unlink($linkedData->id);
                }
            }

            // NEW
            if (isset($data['attachments']) && is_array($data['attachments'])) {
                $order = 1;
                foreach ($data['attachments'] as $attachmentId) {
                    $link = array_filter($attachments, function($v, $k) use ($attachmentId) {
                        return $v->id === $attachmentId;
                    }, ARRAY_FILTER_USE_BOTH);

                    if(count($link) > 0) {
                        $attachmentData = [
                            'type' => 'Invoice',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $invoice->id,
                            'order_no' => $order
                        ];

                        $updateOrder = $this->accounting_attachments_model->update_order($attachmentData);
                    } else {
                        $linkAttachmentData = [
                            'type' => 'Invoice',
                            'attachment_id' => $attachmentId,
                            'linked_id' => $invoice->id,
                            'order_no' => $order
                        ];
    
                        $linkedId = $this->accounting_attachments_model->link_attachment($linkAttachmentData);
                    }

                    $order++;
                }
            }

            if(isset($data['tags']) && is_array($data['tags'])) {
                $order = 1;
                foreach($data['tags'] as $key => $tagId) {
                    $linkTagData = [
                        'transaction_type' => 'Invoice',
                        'transaction_id' => $invoice->id,
                        'tag_id' => $tagId,
                        'order_no' => $order
                    ];

                    if($tags[$key] === null) {
                        $linkTagId = $this->tags_model->link_tag($linkTagData);
                    } else {
                        $updateOrder = $this->tags_model->update_link($linkTagData);
                    }

                    $order++;
                }
            }

            $invoiceItems = $this->invoice_model->get_invoice_items($invoice->id);
            $this->invoice_model->delete_items($invoice->id);

            $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('invoice', $invoice->id);

            if(count($linkedTransactions) > 0) {
                foreach($linkedTransactions as $linkedTransac) {
                    if($linkedTransac->linked_transaction_type === 'delayed_credit') {
                        $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($linkedTransac->linked_transaction_id);

                        $creditData = [
                            'status' => 1
                        ];

                        $creditUpdate = $this->accounting_delayed_credit_model->updateDelayedCredit($delayedCredit->id, $creditData);
                    } else {
                        $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($linkedTransac->linked_transaction_id);

                        $chargeData = [
                            'status' => 1
                        ];

                        $chargeUpdate = $this->accounting_delayed_charge_model->updateDelayedCharge($delayedCharge->id, $chargeData);
                    }

                    $this->accounting_linked_transactions_model->unlink($linkedTransac->id);
                }
            }

            if(!is_null($data['linked_transaction'])) {
                $linkedTransacsData = [];
                foreach($data['linked_transaction'] as $linkedTransac) {
                    $explode = explode('-', $linkedTransac);
    
                    if($explode[0] === 'delayed_credit') {
                        $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($explode[1]);
    
                        $creditData = [
                            'status' => 2
                        ];

                        $creditUpdate = $this->accounting_delayed_credit_model->updateDelayedCredit($delayedCredit->id, $creditData);
                    } else {
                        $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($explode[1]);
    
                        $chargeData = [
                            'status' => 2
                        ];
    
                        $chargeUpdate = $this->accounting_delayed_charge_model->updateDelayedCharge($delayedCharge->id, $chargeData);
                    }

                    $linkedTransacsData[] = [
                        'linked_to_type' => 'invoice',
                        'linked_to_id' => $invoiceId,
                        'linked_transaction_type' => str_replace('_', '-', $explode[0]),
                        'linked_transaction_id' => $explode[1]
                    ];
                }

                $this->accounting_linked_transactions_model->insert_by_batch($linkedTransacsData);
            }

            foreach($data['item'] as $key => $input) {
                $linkedTransaction = $data['item_linked'][$key] !== '' ? explode('-', $data['item_linked'][$key]) : null;

                $explode = explode('-', $input);

                if($explode[0] === 'package') {
                    $package = $this->items_model->get_package_by_id($explode[1]);
                    $packageItems = $this->items_model->get_package_items($explode[1]);

                    $pItemDetails = [];
                    foreach($packageItems as $i => $packageItem) {
                        $pItem = $this->items_model->getItemById($packageItem->item_id)[0];
                        $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);

                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $packageItems[$i]->balance_change = floatval(str_replace(',', '', $pItem->cost)) * floatval(str_replace(',', '', $totalQty));
                        } else {
                            $packageItems[$i]->balance_change = floatval(str_replace(',', '', $item->price)) * floatval(str_replace(',', '', $totalQty));
                        }
                    }

                    $balanceChange = null;
                } else {
                    $item = $this->items_model->getItemById($explode[1])[0];

                    if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                        $balanceChange = floatval(str_replace(',', '', $item->cost));
                    } else {
                        $balanceChange = floatval(str_replace(',', '', $data['item_total'][$key]));
                    }
                }

                $invoiceItem = [
                    'invoice_id' => $invoice->id,
                    'items_id' => $explode[0] === 'item' ? $explode[1] : '',
                    'location_id' => $data['location'][$key],
                    'qty' => $data['quantity'][$key],
                    'package_id' => $explode[0] === 'package' ? $explode[1] : '',
                    'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                    'cost' => $data['item_amount'][$key],
                    'tax' => $data['item_tax'][$key],
                    'discount' => $data['discount'][$key],
                    'total' => floatval(str_replace(',', '', $data['item_total'][$key])),
                    'tax_rate_used' => $data['item_tax'][$key],
                    'linked_transaction_type' => !is_null($linkedTransaction) ? $linkedTransaction[0] : null,
                    'linked_transaction_id' => !is_null($linkedTransaction) ? $linkedTransaction[1] : null,
                    'linked_transaction_item_id' => !is_null($linkedTransaction) ? $data['transac_item_id'][$key] : null,
                    'amount_balance_change' => floatval(str_replace(',', '', $balanceChange))
                ];

                if(!is_null($invoiceItems[$key])) {
                    $invoiceItem['date_created'] = date("Y-m-d H:i:s" , strtotime($invoiceItems->date_created));
                }

                $addInvoiceItem = $this->invoice_model->add_invoice_items($invoiceItem);

                if($explode[0] === 'item') {
                    $item = $this->items_model->getItemById($explode[1])[0];
                    $itemAccDetails = $this->items_model->getItemAccountingDetails($explode[1]);

                    if ($itemAccDetails) {
                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $location = $this->items_model->getItemLocation($data['location'][$key], $explode[1]);
                            $newQty = intval($location->qty) - intval($data['quantity'][$key]);
                            $this->items_model->updateLocationQty($data['location'][$key], $explode[1], $newQty);

                            $amount = floatval(str_replace(',', '', $item->cost)) * floatval($data['quantity'][$key]);

                            $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                            $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - $amount;
                            $newBalance = number_format($newBalance, 2, '.', ',');

                            $invAssetAccData = [
                                'id' => $invAssetAcc->id,
                                'company_id' => logged('company_id'),
                                'balance' => floatval(str_replace(',', '', $newBalance))
                            ];

                            $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                            $accTransacData = [
                                'account_id' => $invAssetAcc->id,
                                'transaction_type' => 'Invoice',
                                'transaction_id' => $invoiceId,
                                'amount' => $amount,
                                'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                'type' => 'decrease',
                                'is_item_category' => 1,
                                'child_id' => $addInvoiceItem
                            ];

                            $this->accounting_account_transactions_model->create($accTransacData);
                        } else {
                            $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                            $incomeAccType = $this->account_model->getById($incomeAcc->account_id);

                            $amount = floatval($data['item_amount'][$key]) * floatval($data['quantity'][$key]);

                            if ($incomeAccType->account_name === 'Credit Card') {
                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                            } else {
                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                            }
                            $newBalance = number_format($newBalance, 2, '.', ',');

                            $incomeAccData = [
                                'id' => $incomeAcc->id,
                                'company_id' => logged('company_id'),
                                'balance' => floatval(str_replace(',', '', $newBalance))
                            ];

                            $this->chart_of_accounts_model->updateBalance($incomeAccData);

                            $accTransacData = [
                                'account_id' => $incomeAcc->id,
                                'transaction_type' => 'Invoice',
                                'transaction_id' => $invoiceId,
                                'amount' => $amount,
                                'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                'type' => 'decrease',
                                'is_item_category' => 1,
                                'child_id' => $addInvoiceItem
                            ];

                            $this->accounting_account_transactions_model->create($accTransacData);
                        }
                    }
                } else {
                    $package = $this->items_model->get_package_by_id($explode[1]);

                    foreach($packageItems as $packageItem) {
                        $item = $this->items_model->getItemById($packageItem->item_id)[0];
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                        $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);

                        if ($itemAccDetails) {
                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $location = $this->items_model->get_first_location($packageItem->item_id);
                                $newQty = intval($location->qty) - intval($totalQty);
                                $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);

                                $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                $totalAmount = floatval(str_replace(',', '', $item->cost)) * floatval(str_replace(',', '', $totalQty));
                                $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - floatval(str_replace(',', '', $totalAmount));
                                $newBalance = number_format($newBalance, 2, '.', ',');

                                $invAssetAccData = [
                                    'id' => $invAssetAcc->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];

                                $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                $accTransacData = [
                                    'account_id' => $invAssetAcc->id,
                                    'transaction_type' => 'Invoice',
                                    'transaction_id' => $invoiceId,
                                    'amount' => floatval(str_replace(',', '', $totalAmount)),
                                    'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                    'type' => 'decrease',
                                    'is_item_category' => 1,
                                    'is_in_package' => 1,
                                    'child_id' => $addInvoiceItem
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            } else {
                                $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                $incomeAccType = $this->account_model->getById($incomeAcc->account_id);
                                $totalAmount = floatval(str_replace(',', '', $item->price)) * floatval(str_replace(',', '', $totalQty));

                                if ($incomeAccType->account_name === 'Credit Card') {
                                    $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval(str_replace(',', '', $totalAmount));
                                } else {
                                    $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval(str_replace(',', '', $totalAmount));
                                }
                                $newBalance = number_format($newBalance, 2, '.', ',');

                                $incomeAccData = [
                                    'id' => $incomeAcc->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];

                                $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                $accTransacData = [
                                    'account_id' => $incomeAcc->id,
                                    'transaction_type' => 'Invoice',
                                    'transaction_id' => $invoiceId,
                                    'amount' => floatval(str_replace(',', '', $totalAmount)),
                                    'transaction_date' => date("Y-m-d", strtotime($data['date_issued'])),
                                    'type' => 'decrease',
                                    'is_item_category' => 1,
                                    'is_in_package' => 1,
                                    'child_id' => $addInvoiceItem
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            }
                        }
                    }
                }
            }

            foreach($invoiceItems as $invoiceItem) {
                if(!in_array($invoiceItem->items_id, ['0', null, '']) && in_array($invoiceItem->package_id, ['0', null, ''])) {
                    $item = $this->items_model->getItemById($invoiceItem->items_id)[0];
                    $itemAccDetails = $this->items_model->getItemAccountingDetails($invoiceItem->items_id);

                    if ($itemAccDetails) {
                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $location = $this->items_model->getItemLocation($invoiceItem->location_id, $invoiceItem->items_id);
                            $newQty = intval($location->qty) + intval($invoiceItem->qty);
                            $this->items_model->updateLocationQty($invoiceItem->location_id, $invoiceItem->items_id, $newQty);
                        }
                    }
                } else {
                    $package = $this->items_model->get_package_by_id($invoiceItem->package_id);
                    $packageItems = json_decode($invoiceItem->package_item_details, true);

                    foreach($packageItems as $packageItem) {
                        $item = $this->items_model->getItemById($packageItem['item_id'])[0];
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem['item_id']);
                        $totalQty = intval($packageItem['quantity']) * intval($invoiceItem->qty);

                        if ($itemAccDetails) {
                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $location = $this->items_model->get_first_location($packageItem['item_id']);
                                $newQty = intval($location->qty) + intval($totalQty);
                                $this->items_model->updateLocationQty($location->id, $packageItem['item_id'], $newQty);
                            }
                        }
                    }
                }
            }
        }

        $return['data'] = $invoiceId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_standard_estimate($estimateId, $data)
    {
        $estimate = $this->estimate_model->getEstimate($estimateId);
        $company_id  = getLoggedCompanyID();
        $user_id  = getLoggedUserID();

        $new_data = array(
            'id' => $estimateId,
            'customer_id' => $data['customer'],
            'job_location' => $data['job_location'],
            'job_name' => $data['job_name'],
            'estimate_number' => $estimate->estimate_number,
            'estimate_date' => date("Y-m-d", strtotime($data['estimate_date'])),
            'expiry_date' => date("Y-m-d", strtotime($data['expiry_date'])),
            'purchase_order_number' => $data['purchase_order_no'],
            'status' => $data['estimate_status'],
            'estimate_type' => 'Standard',
            'type' => $data['estimate_type'],
            'attachments' => 'testing',
            'deposit_request' => $data['deposit_request'],
            'deposit_amount' => $data['deposit_amount'],
            'customer_message' => $data['customer_message'],
            'terms_conditions' => $data['terms_conditions'],
            'instructions' => $data['instructions'],
            'sub_total' => $data['subtotal'],
            'grand_total' => $data['total_amount'],
            'tax1_total' => $data['tax_total'],
            'adjustment_name' => $data['adjustment_name'],
            'adjustment_value' => $data['adjustment_value'],
            'markup_type' => '$',
            'markup_amount' => $data['markup_input_form']
        );

        $update = $this->estimate_model->update_estimate($new_data);

        if($update) {
            $delete = $this->estimate_model->delete_items($estimateId);

            $a = $data['item'];
            $quantity = $data['quantity'];
            $price = $data['item_amount'];
            $tax = $data['item_tax'];
            $gtotal = $data['item_total'];

            $i = 0;
            foreach($a as $row){
                $itemData['items_id'] = str_replace('item-', '', $a[$i]);
                $itemData['qty'] = $quantity[$i];
                $itemData['cost'] = $price[$i];
                $itemData['tax'] = $tax[$i];
                $itemData['total'] = $gtotal[$i];
                $itemData['estimates_id '] = $estimateId;
                $estimateItemId = $this->estimate_model->add_estimate_items($itemData);
                $i++;
            }
        }

        $return['data'] = $estimateId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_option_estimate($estimateId, $data)
    {
        $company_id  = getLoggedCompanyID();
        $user_id  = getLoggedUserID();

        $new_data = array(
            'id' => $estimateId,
            'customer_id' => $data['customer'],
            'job_location' => $data['job_location'],
            'job_name' => $data['job_name'],
            'estimate_date' => date("Y-m-d", strtotime($data['estimate_date'])),
            'expiry_date' => date("Y-m-d", strtotime($data['expiry_date'])),
            'purchase_order_number' => $data['purchase_order_no'],
            'status' => $data['estimate_status'],
            'estimate_type' => 'Option',
            'type' => $data['estimate_type'],
            'attachments' => 'testing',
            'deposit_request' => $data['deposit_request'],
            'deposit_amount' => $data['deposit_amount'],
            'customer_message' => $data['customer_message'],
            'terms_conditions' => $data['terms_conditions'],
            'instructions' => $data['instructions'],
            'option_message' => $data['option_1_message'],
            'option2_message' => $data['option_2_message'],
            'option1_total' => $data['table_1_total'],
            'option2_total' => $data['table_2_total'],
            'tax1_total' => $data['table_1_taxes'],
            'tax2_total' => $data['table_2_taxes'],
            'sub_total' => $data['table_1_subtotal'],
            'sub_total2' => $data['table_2_subtotal']
        );

        $update = $this->estimate_model->update_estimateOptions($new_data);

        if($update) {
            $delete = $this->estimate_model->delete_items($estimateId);

            $a = $data['table_1_item'];
            $quantity = $data['table_1_quantity'];
            $price = $data['table_1_item_amount'];
            $tax = $data['table_1_item_tax'];
            $discount = $data['table_1_discount'];
            $total = $data['table_1_item_total'];

            $i = 0;
            foreach($a as $row){
                $itemData['items_id']       = $a[$i];
                $itemData['qty']            = $quantity[$i];
                $itemData['cost']           = $price[$i];
                $itemData['tax']            = $tax[$i];
                $itemData['discount']       = $discount[$i];
                $itemData['total']          = $total[$i];
                $itemData['estimate_type']  = 'Option';
                $itemData['estimates_id ']  = $estimateId;
                $itemData['bundle_option_type'] = '1';
                $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                $i++;
            }

            $a2 = $data['table_2_item'];
            $quantity2 = $data['table_2_quantity'];
            $price2 = $data['table_2_item_amount'];
            $tax2 = $data['table_2_item_tax'];
            $discount2 = $data['table_2_discount'];
            $total2 = $data['table_2_item_total'];

            $i2 = 0;
            foreach($a2 as $row2){
                $itemData['items_id']       = $a2[$i2];
                $itemData['qty']            = $quantity2[$i2];
                $itemData['cost']           = $price2[$i2];
                $itemData['tax']            = $tax2[$i2];
                $itemData['discount']       = $discount2[$i2];
                $itemData['total']          = $total2[$i2];
                $itemData['estimate_type']  = 'Option';
                $itemData['estimates_id ']  = $estimateId;
                $itemData['bundle_option_type'] = '2';
                $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                $i2++;
            }
        }

        $return['data'] = $estimateId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_bundle_estimate($estimateId, $data)
    {
        $new_data = array(
            'id' => $estimateId,
            'customer_id' => $data['customer'],
            'job_location' => $data['job_location'],
            'job_name' => $data['job_name'],
            'estimate_date' => date("Y-m-d", strtotime($data['estimate_date'])),
            'expiry_date' => date("Y-m-d", strtotime($data['expiry_date'])),
            'purchase_order_number' => $data['purchase_order_number'],
            'status' => $data['estimate_status'],
            'estimate_type' => 'Bundle',
            'type' => $data['estimate_type'],
            'attachments' => 'testing',
            'deposit_request' => $data['deposit_request'],
            'deposit_amount' => $data['deposit_amount'],
            'customer_message' => $data['customer_message'],
            'terms_conditions' => $data['terms_conditions'],
            'instructions' => $data['instructions'],
            'bundle1_message' => $data['bundle_1_message'],
            'bundle2_message' => $data['bundle_2_message'],
            'bundle_discount' => $data['table_2_adjustment'],
            'deposit_request' => '$',
            'deposit_amount' => $data['adjustment_input'],
            'bundle1_total' => $data['table_1_total'],
            'bundle2_total' => $data['table_2_total'],
            'sub_total' => $data['table_1_subtotal'],
            'sub_total2' => $data['table_2_subtotal'],
            'tax1_total' => $data['table_1_taxes'],
            'tax2_total' => $data['table_2_taxes'],
            'adjustment_name' => $data['table_1_adjustment_name'],
            'adjustment_value' => $data['table_1_adjustment'],
            'markup_type' => '$',
            'markup_amount' => $data['markup_input_form']
        );

        $update = $this->estimate_model->update_estimateBundle($new_data);

        if($update) {
            $delete2 = $this->estimate_model->delete_items($estimateId);

            $a = $data['table_1_item'];
            $quantity = $data['table_1_quantity'];
            $price = $data['table_1_item_amount'];
            $tax = $data['table_1_item_tax'];
            $discount = $data['table_1_discount'];
            $total = $data['table_1_item_total'];

            $i = 0;
            foreach($a as $row){
                $itemData['items_id']       = $a[$i];
                $itemData['qty']            = $quantity[$i];
                $itemData['cost']           = $price[$i];
                $itemData['tax']            = $tax[$i];
                $itemData['discount']       = $discount[$i];
                $itemData['total']          = $total[$i];
                $itemData['estimate_type']  = 'Bundle';
                $itemData['estimates_id ']  = $estimateId;
                $itemData['bundle_option_type'] = '1';
                $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                $i++;
            }

            $a2 = $data['table_2_item'];
            $quantity2 = $data['table_2_quantity'];
            $price2 = $data['table_2_item_amount'];
            $tax2 = $data['table_2_item_tax'];
            $discount2 = $data['table_2_discount'];
            $total2 = $data['table_2_item_total'];

            $i2 = 0;
            foreach($a2 as $row2){
                $itemData['items_id']       = $a2[$i2];
                $itemData['qty']            = $quantity2[$i2];
                $itemData['cost']           = $price2[$i2];
                $itemData['tax']            = $tax2[$i2];
                $itemData['discount']       = $discount2[$i2];
                $itemData['total']          = $total2[$i2];
                $itemData['estimate_type']  = 'Bundle';
                $itemData['estimates_id ']  = $estimateId;
                $itemData['bundle_option_type'] = '2';
                $addQuery2 = $this->estimate_model->add_estimate_details($itemData);
                $i2++;
            }
        }

        $return['data'] = $estimateId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_billable_expense($categoryId, $data)
    {
        $category = $this->expenses_model->get_vendor_transaction_category_by_id($categoryId);

        $categoryData = [
            'expense_account_id' => $data['expense_account'],
            'markup_account_id' => $data['markup_account']
        ];

        $update = $this->vendors_model->update_transaction_category_details($category->id, $categoryData);

        if($update) {
            if($category->expense_account_id !== $data['expense_account']) {
                $transactionType = $category->transaction_type === 'Credit Card Credit' ? 'CC Credit' : $category->transaction_type;
                $filter = [
                    'transaction_type' => $transactionType,
                    'transaction_id' => $category->transaction_id,
                    'account_id' => $category->expense_account_id,
                    'child_id' => $category->id,
                    'is_category' => 1,
                    'is_item_category' => null
                ];
                $accountTransaction = $this->accounting_account_transactions_model->get_transaction_with_custom_filter($filter);
    
                $account = $this->chart_of_accounts_model->getById($accountTransaction->account_id);
                $accountType = $this->account_model->getById($account->account_id);
    
                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $accountTransaction->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $accountTransaction->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $accountTransaction->amount));
                } else {
                    $newBalance = $accountTransaction->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $accountTransaction->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $accountTransaction->amount));
                }
    
                $newBalance = number_format($newBalance, 2, '.', ',');
    
                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($accData);
    
                $transacData = [
                    'account_id' => $data['expense_account']
                ];
                $this->accounting_account_transactions_model->update_transaction($accountTransaction->id, $transacData);
    
                $newAccount = $this->chart_of_accounts_model->getById($data['expense_account']);
                $newAccountType = $this->account_model->getById($newAccount->account_id);
    
                if($newAccountType->account_name === 'Credit Card') {
                    $newBalance = $accountTransaction->type === 'increase' ? floatval(str_replace(',', '', $newAccount->balance)) - floatval(str_replace(',', '', $accountTransaction->amount)) : floatval(str_replace(',', '', $newAccount->balance)) + floatval(str_replace(',', '', $accountTransaction->amount));
                } else {
                    $newBalance = $accountTransaction->type === 'increase' ? floatval(str_replace(',', '', $newAccount->balance)) + floatval(str_replace(',', '', $accountTransaction->amount)) : floatval(str_replace(',', '', $newAccount->balance)) - floatval(str_replace(',', '', $accountTransaction->amount));
                }
    
                $newBalance = number_format($newBalance, 2, '.', ',');
    
                $newAccData = [
                    'id' => $newAccount->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];
    
                $this->chart_of_accounts_model->updateBalance($newAccData);
            }
        }

        $return['data'] = $categoryId;
        $return['success'] = $update ? true : false;
        $return['message'] = $update ? 'Update Successful!' : 'An unexpected error occured';

        return $return;
    }

    private function update_customer_transaction_items($transactionType, $transactionId, $data)
    {
        $items = $this->accounting_credit_memo_model->get_customer_transaction_items($transactionType, $transactionId);
        $this->accounting_credit_memo_model->delete_customer_transaction_items($transactionType, $transactionId);

        $newItems = [];
        if(!is_null($data['item'])) {
            foreach($data['item'] as $key => $input) {
                $explode = explode('-', $input);

                if($explode[0] === 'package') {
                    $packageItems = $this->items_model->get_package_items($explode[1]);
                }

                $itemData = [
                    'transaction_type' => $transactionType,
                    'transaction_id' => $transactionId,
                    'item_id' => $explode[0] === 'item' ? $explode[1] : null,
                    'package_id' => $explode[0] === 'package' ? $explode[1] : null,
                    'package_item_details' => $explode[0] === 'package' ? json_encode($packageItems) : null,
                    'location_id' => $data['location'][$key],
                    'quantity' => $data['quantity'][$key],
                    'price' => $data['item_amount'][$key],
                    'discount' => $data['discount'][$key],
                    'tax' => $data['item_tax'][$key],
                    'total' => floatval(str_replace(',', '', $data['item_total'][$key]))
                ];

                if(!is_null($items[$key])) {
                    $itemData['created_at'] = date("Y-m-d H:i:s", strtotime($items[$key]->created_at));
                }

                $itemId = $this->accounting_credit_memo_model->insert_transaction_item($itemData);

                if($transactionType !== 'Delayed Credit' && $transactionType !== 'Delayed Charge') {
                    if($explode[0] === 'item') {
                        $item = $this->items_model->getItemById($explode[1])[0];
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($explode[1]);

                        if ($itemAccDetails) {
                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $location = $this->items_model->getItemLocation($data['location'][$key], $explode[1]);
                                $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);

                                $amount = floatval(str_replace(',', '', $item->cost)) * floatval($data['quantity'][$key]);

                                switch($transactionType) {
                                    case 'Credit Memo' :
                                        $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                        $accTransacType = 'increase';
                                        $newQty = intval($location->qty) + intval($data['quantity'][$key]);
                                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + $amount;
                                    break;
                                    case 'Sales Receipt' :
                                        $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                        $accTransacType = 'decrease';
                                        $newQty = intval($location->qty) - intval($data['quantity'][$key]);
                                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - $amount;
                                    break;
                                    case 'Refund Receipt' :
                                        $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                        $accTransacType = 'increase';
                                        $newQty = intval($location->qty) + intval($data['quantity'][$key]);
                                        $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + $amount;
                                    break;
                                }
                                $newBalance = number_format($newBalance, 2, '.', ',');

                                $invAssetAccData = [
                                    'id' => $invAssetAcc->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];
    
                                $this->items_model->updateLocationQty($data['location'][$key], $explode[1], $newQty);
                                $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                $accTransacData = [
                                    'account_id' => $invAssetAcc->id,
                                    'transaction_type' => $transactionType,
                                    'transaction_id' => $transactionId,
                                    'amount' => $amount,
                                    'transaction_date' => $accTransacDate,
                                    'type' => $accTransacType,
                                    'is_item_category' => 1,
                                    'child_id' => $itemId
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            } else {
                                $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                $incomeAccType = $this->account_model->getById($incomeAcc->account_id);
    
                                $amount = floatval($data['item_amount'][$key]) * floatval($data['quantity'][$key]);

                                switch($transactionType) {
                                    case 'Credit Memo' :
                                        $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                        $accTransacType = 'decrease';
                                        if ($incomeAccType->account_name === 'Credit Card') {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                                        } else {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                                        }
                                    break;
                                    case 'Sales Receipt' :
                                        $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                        $accTransacType = 'decrease';
                                        if ($incomeAccType->account_name === 'Credit Card') {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                                        } else {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                                        }
                                    break;
                                    case 'Refund Receipt' :
                                        $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                        $accTransacType = 'increase';
                                        if ($incomeAccType->account_name === 'Credit Card') {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - $amount;
                                        } else {
                                            $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + $amount;
                                        }
                                    break;
                                }
                                $newBalance = number_format($newBalance, 2, '.', ',');
    
                                $incomeAccData = [
                                    'id' => $incomeAcc->id,
                                    'company_id' => logged('company_id'),
                                    'balance' => floatval(str_replace(',', '', $newBalance))
                                ];
    
                                $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                $accTransacData = [
                                    'account_id' => $incomeAcc->id,
                                    'transaction_type' => $transactionType,
                                    'transaction_id' => $transactionId,
                                    'amount' => $amount,
                                    'transaction_date' => $accTransacDate,
                                    'type' => $accTransacType,
                                    'is_item_category' => 1,
                                    'child_id' => $itemId
                                ];
    
                                $this->accounting_account_transactions_model->create($accTransacData);
                            }
                        }
                    } else {
                        $package = $this->items_model->get_package_by_id($explode[1]);
    
                        foreach($packageItems as $packageItem) {
                            $item = $this->items_model->getItemById($packageItem->item_id)[0];
                            $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                            $totalQty = intval($packageItem->quantity) * intval($data['quantity'][$key]);
    
                            if ($itemAccDetails) {
                                if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                    $location = $this->items_model->get_first_location($packageItem->item_id);
    
                                    $invAssetAcc = $this->chart_of_accounts_model->getById($itemAccDetails->inv_asset_acc_id);
                                    $totalAmount = floatval(str_replace(',', '', $item->cost)) * floatval(str_replace(',', '', $totalQty));
    
                                    switch($transactionType) {
                                        case 'Credit Memo' :
                                            $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                            $accTransacType = 'increase';
                                            $newQty = intval($location->qty) + intval($totalQty);
                                            $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + floatval(str_replace(',', '', $totalAmount));
                                        break;
                                        case 'Sales Receipt' :
                                            $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                            $accTransacType = 'decrease';
                                            $newQty = intval($location->qty) - intval($totalQty);
                                            $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) - floatval(str_replace(',', '', $totalAmount));
                                        break;
                                        case 'Refund Receipt' :
                                            $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                            $accTransacType = 'increase';
                                            $newQty = intval($location->qty) + intval($totalQty);
                                            $newBalance = floatval(str_replace(',', '', $invAssetAcc->balance)) + floatval(str_replace(',', '', $totalAmount));
                                        break;
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');
    
                                    $invAssetAccData = [
                                        'id' => $invAssetAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];
    
                                    $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);
                                    $this->chart_of_accounts_model->updateBalance($invAssetAccData);

                                    $accTransacData = [
                                        'account_id' => $invAssetAcc->id,
                                        'transaction_type' => $transactionType,
                                        'transaction_id' => $transactionId,
                                        'amount' => $amount,
                                        'transaction_date' => $accTransacDate,
                                        'type' => $accTransacType,
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
        
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                } else {
                                    $incomeAcc = $this->chart_of_accounts_model->getById($itemAccDetails->income_account_id);
                                    $incomeAccType = $this->account_model->getById($incomeAcc->account_id);
                                    $totalAmount = floatval(str_replace(',', '', $item->price)) * floatval(str_replace(',', '', $totalQty));
    
                                    switch($transactionType) {
                                        case 'Credit Memo' :
                                            $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                            $accTransacType = 'decrease';
                                            if ($incomeAccType->account_name === 'Credit Card') {
                                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval(str_replace(',', '', $totalAmount));
                                            } else {
                                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval(str_replace(',', '', $totalAmount));
                                            }
                                        break;
                                        case 'Sales Receipt' :
                                            $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                            $accTransacType = 'decrease';
                                            if ($incomeAccType->account_name === 'Credit Card') {
                                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval(str_replace(',', '', $totalAmount));
                                            } else {
                                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval(str_replace(',', '', $totalAmount));
                                            }
                                        break;
                                        case 'Refund Receipt' :
                                            $accTransacDate = date("Y-m-d", strtotime($data['credit_memo_date']));
                                            $accTransacType = 'increase';
                                            if ($incomeAccType->account_name === 'Credit Card') {
                                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) - floatval(str_replace(',', '', $totalAmount));
                                            } else {
                                                $newBalance = floatval(str_replace(',', '', $incomeAcc->balance)) + floatval(str_replace(',', '', $totalAmount));
                                            }
                                        break;
                                    }
                                    $newBalance = number_format($newBalance, 2, '.', ',');
    
                                    $incomeAccData = [
                                        'id' => $incomeAcc->id,
                                        'company_id' => logged('company_id'),
                                        'balance' => floatval(str_replace(',', '', $newBalance))
                                    ];
    
                                    $this->chart_of_accounts_model->updateBalance($incomeAccData);

                                    $accTransacData = [
                                        'account_id' => $incomeAcc->id,
                                        'transaction_type' => $transactionType,
                                        'transaction_id' => $transactionId,
                                        'amount' => $amount,
                                        'transaction_date' => $accTransacDate,
                                        'type' => $accTransacType,
                                        'is_item_category' => 1,
                                        'child_id' => $itemId
                                    ];
        
                                    $this->accounting_account_transactions_model->create($accTransacData);
                                }
                            }
                        }
                    }
                }
            }
        }

        if($transactionType !== 'Delayed Credit' && $transactionType !== 'Delayed Charge') {
            foreach($items as $transactionItem) {
                if(!in_array($transactionItem->item_id, ['0', null, '']) && in_array($transactionItem->package_id, ['0', null, ''])) {
                    $item = $this->items_model->getItemById($transactionItem->item_id)[0];
                    $itemAccDetails = $this->items_model->getItemAccountingDetails($transactionItem->item_id);
    
                    if ($itemAccDetails) {
                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $location = $this->items_model->getItemLocation($transactionItem->location_id, $transactionItem->item_id);
    
                            switch($transactionType) {
                                case 'Credit Memo' :
                                    $newQty = intval($location->qty) - intval($transactionItem->quantity);
                                break;
                                case 'Sales Receipt' :
                                    $newQty = intval($location->qty) + intval($transactionItem->quantity);
                                break;
                                case 'Refund Receipt' :
                                    $newQty = intval($location->qty) - intval($transactionItem->quantity);
                                break;
                            }
    
                            $this->items_model->updateLocationQty($transactionItem->location_id, $transactionItem->item_id, $newQty);
                        }
                    }
                } else {
                    $package = $this->items_model->get_package_by_id($transactionItem->package_id);
                    $packageItems = json_decode($transactionItem->package_item_details);
    
                    foreach($packageItems as $packageItem) {
                        $item = $this->items_model->getItemById($packageItem->item_id)[0];
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                        $totalQty = intval($packageItem->quantity) * intval($transactionItem->quantity);
    
                        if ($itemAccDetails) {
                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $location = $this->items_model->get_first_location($packageItem->item_id);
    
                                switch($transactionType) {
                                    case 'Credit Memo' :
                                        $newQty = intval($location->qty) - intval($totalQty);
                                    break;
                                    case 'Sales Receipt' :
                                        $newQty = intval($location->qty) + intval($totalQty);
                                    break;
                                    case 'Refund Receipt' :
                                        $newQty = intval($location->qty) - intval($totalQty);
                                    break;
                                }
                                $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);
                            }
                        }
                    }
                }
            }
        }
    }

    public function get_attachment_file_path($attachmentId)
    {
        $attachment = $this->accounting_attachments_model->getById($attachmentId);

        echo '/uploads/accounting/attachments/'.$attachment->stored_name;
    }

    public function get_attachment($attachmentId)
    {
        $attachment = $this->accounting_attachments_model->getById($attachmentId);

        echo json_encode($attachment);
    }

    public function get_existing_attachments_modal($type)
    {
        $this->page_data['type'] = $type;
        $this->load->view('v2/includes/accounting/modal_forms/attachments_modal', $this->page_data);
        // $this->load->view('accounting/modals/attachments_modal', $this->page_data);
    }

    public function attach($type, $linkedId)
    {
        $attachmentId = $this->input->post('id');
        $attachment = $this->accounting_attachments_model->getById($attachmentId);

        switch ($type) {
            case 'expense':
                $linkedType = 'Expense';
            break;
            case 'check':
                $linkedType = 'Check';
            break;
            case 'bill':
                $linkedType = 'Bill';
            break;
            case 'bill-payment':
                $linkedType = 'Bill Payment';
            break;
            case 'purchase-order':
                $linkedType = 'Purchase Order';
            break;
            case 'vendor-credit':
                $linkedType = 'Vendor Credit';
            break;
            case 'credit-card-credit':
                $linkedType = 'CC Credit';
            break;
            case 'vendor' :
                $linkedType = 'Vendor';
            break;
        }

        $attachments = $this->accounting_attachments_model->get_attachments($linkedType, $linkedId);

        $attachmentData = [
            'type' => $linkedType,
            'attachment_id' => $attachmentId,
            'linked_id' => $linkedId,
            'order_no' => count($attachments) + 1
        ];

        $attach = $this->accounting_attachments_model->link_attachment($attachmentData);

        echo json_encode(['data' => $attachmentId, 'success' => $attach ? true : false]);
    }

    public function load_recent_transactions()
    {
        $type = $this->input->get('type');
        $start = 0;
        $length = 10;
        $data = [];

        switch($type) {
            case 'expenses' :
                $transactions = $this->expenses_model->get_company_expense_transactions(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $expense) {
                    $paymentAcc = $this->chart_of_accounts_model->getById($expense->payment_account_id);
                    $paymentAccType = $this->account_model->getById($paymentAcc->account_id);

                    switch ($expense->payee_type) {
                        case 'vendor':
                            $payee = $this->vendors_model->get_vendor_by_id($expense->payee_id);
                            $payeeName = $payee->display_name;
                        break;
                        case 'customer':
                            $payee = $this->accounting_customers_model->get_by_id($expense->payee_id);
                            $payeeName = $payee->first_name . ' ' . $payee->last_name;
                        break;
                        case 'employee':
                            $payee = $this->users_model->getUser($expense->payee_id);
                            $payeeName = $payee->FName . ' ' . $payee->LName;
                        break;
                    }

                    $amount = '$'.number_format(floatval(str_replace(',', '', $expense->total_amount)), 2, '.', ',');
                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $expense->id,
                            'type' => $paymentAccType->account_name !== 'Credit Card' ? 'Expense' : 'Credit Card Expense',
                            'date' => date("m/d/Y", strtotime($expense->payment_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'checks' :
                $transactions = $this->expenses_model->get_company_check_transactions(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $check) {
                    switch ($check->payee_type) {
                        case 'vendor':
                            $payee = $this->vendors_model->get_vendor_by_id($check->payee_id);
                            $payeeName = $payee->display_name;
                        break;
                        case 'customer':
                            $payee = $this->accounting_customers_model->get_by_id($check->payee_id);
                            $payeeName = $payee->first_name . ' ' . $payee->last_name;
                        break;
                        case 'employee':
                            $payee = $this->users_model->getUser($check->payee_id);
                            $payeeName = $payee->FName . ' ' . $payee->LName;
                        break;
                    }

                    $amount = '$'.number_format(floatval(str_replace(',', '', $check->total_amount)), 2, '.', ',');
                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $check->id,
                            'type' => !in_array($check->check_no, ['', null, '0']) ? 'Check No.'.$check->check_no : 'Check',
                            'date' => date("m/d/Y", strtotime($check->payment_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'bills' :
                $transactions = $this->expenses_model->get_company_bill_transactions(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $bill) {
                    $payee = $this->vendors_model->get_vendor_by_id($bill->vendor_id);
                    $payeeName = $payee->display_name;

                    $amount = '$'.number_format(floatval(str_replace(',', '', $bill->total_amount)), 2, '.', ',');
                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $bill->id,
                            'type' => !in_array($bill->bill_no, ['', null, '0']) ? 'Bill No.'.$bill->bill_no : 'Bill',
                            'date' => date("m/d/Y", strtotime($bill->bill_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'purchase-orders' :
                $transactions = $this->expenses_model->get_company_purch_order_transactions(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $purchaseOrder) {
                    $payee = $this->vendors_model->get_vendor_by_id($purchaseOrder->vendor_id);
                    $payeeName = $payee->display_name;

                    $amount = '$'.number_format(floatval(str_replace(',', '', $purchaseOrder->total_amount)), 2, '.', ',');
                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $purchaseOrder->id,
                            'type' => !in_array($purchaseOrder->purchase_order_no, ['', null, '0']) ? 'Purchase Order No.'.$purchaseOrder->purchase_order_no : 'Purchase Order',
                            'date' => date("m/d/Y", strtotime($purchaseOrder->purchase_order_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'vendor-credits' :
                $transactions = $this->expenses_model->get_company_vendor_credit_transactions(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $vCredit) {
                    $payee = $this->vendors_model->get_vendor_by_id($vCredit->vendor_id);
                    $payeeName = $payee->display_name;

                    $amount = '$'.number_format(floatval(str_replace(',', '', $vCredit->total_amount)), 2, '.', ',');
                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $vCredit->id,
                            'type' => !in_array($vCredit->ref_no, ['', null, '0']) ? 'Vendor Credit No.'.$vCredit->ref_no : 'Vendor Credit',
                            'date' => date("m/d/Y", strtotime($vCredit->payment_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'cc-credits' :
                $transactions = $this->expenses_model->get_company_cc_credit_transactions(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $ccCredit) {
                    switch ($ccCredit->payee_type) {
                        case 'vendor':
                            $payee = $this->vendors_model->get_vendor_by_id($ccCredit->payee_id);
                            $payeeName = $payee->display_name;
                        break;
                        case 'customer':
                            $payee = $this->accounting_customers_model->get_by_id($ccCredit->payee_id);
                            $payeeName = $payee->first_name . ' ' . $payee->last_name;
                        break;
                        case 'employee':
                            $payee = $this->users_model->getUser($ccCredit->payee_id);
                            $payeeName = $payee->FName . ' ' . $payee->LName;
                        break;
                    }

                    $amount = '$'.number_format(floatval(str_replace(',', '', $ccCredit->total_amount)), 2, '.', ',');
                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $ccCredit->id,
                            'type' => !in_array($ccCredit->ref_no, ['', null, '0']) ? 'Credit Card Credit No.'.$ccCredit->ref_no : 'Credit Card Credit',
                            'date' => date("m/d/Y", strtotime($ccCredit->payment_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'deposits' :
                $transactions = $this->accounting_bank_deposit_model->get_company_deposits(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $deposit) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $deposit->total_amount)), 2, '.', ',');

                    $funds = $this->accounting_bank_deposit_model->getFunds($deposit->id);
                    $flag = true;

                    foreach($funds as $fund) {
                        if($fund->received_from_key !== $funds[0]->received_from_key && $fund->received_from_id !== $funds[0]->received_from_id) {
                            $flag = false;
                            break;
                        }
                    }

                    if($flag) {
                        switch($funds[0]->received_from_key) {
                            case 'vendor':
                                $payee = $this->vendors_model->get_vendor_by_id($funds[0]->received_from_id);
                                $payeeName = $payee->display_name;
                            break;
                            case 'customer':
                                $payee = $this->accounting_customers_model->get_by_id($funds[0]->received_from_id);
                                $payeeName = $payee->first_name . ' ' . $payee->last_name;
                            break;
                            case 'employee':
                                $payee = $this->users_model->getUser($funds[0]->received_from_id);
                                $payeeName = $payee->FName . ' ' . $payee->LName;
                            break;
                        }
                    } else {
                        $payeeName = '';
                    }

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $deposit->id,
                            'type' => 'Deposit',
                            'date' => date("m/d/Y", strtotime($deposit->date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'transfers' :
                $transactions = $this->accounting_transfer_funds_model->get_company_transfers(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $transfer) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $transfer->transfer_amount)), 2, '.', ',');

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $transfer->id,
                            'type' => 'Transfer',
                            'date' => date("m/d/Y", strtotime($transfer->transfer_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => ''
                        ];
                    }
                }
            break;
            case 'journal-entries' :
                $transactions = $this->accounting_journal_entries_model->get_company_journal_entries(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $entry) {
                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $entry->id,
                            'type' => !in_array($entry->journal_no, ['', null, '0']) ? 'Journal Entry No.'.$entry->journal_no : 'Journal Entry',
                            'date' => date("m/d/Y", strtotime($entry->journal_date)),
                            'amount' => '',
                            'name' => ''
                        ];
                    }
                }
            break;
            case 'qty-adjustments' :
                $transactions = $this->accounting_inventory_qty_adjustments_model->get_company_quantity_adjustments(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $adjustment) {
                    $adjusted = $this->accounting_inventory_qty_adjustments_model->get_adjusted_products($adjustment->id);

                    if(count($adjusted) > 1) {
                        $name = 'Multiple items';
                    } else {
                        $name = $this->items_model->getItemById($adjusted[0]->product_id)[0]->title;
                    }

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $adjustment->id,
                            'type' => 'Inventory Qty Adjust No.'.$adjustment->adjustment_no,
                            'date' => date("m/d/Y", strtotime($adjustment->adjustment_date)),
                            'amount' => '',
                            'name' => $name
                        ];
                    }
                }
            break;
            case 'cc-payments' :
                $transactions = $this->accounting_pay_down_credit_card_model->get_company_cc_payments(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $payment) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $payment->amount)), 2, '.', ',');
                    $payee = $this->vendors_model->get_vendor_by_id($payment->payee_id);
                    $payeeName = $payee->display_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $payment->id,
                            'type' => 'Credit Card Payment',
                            'date' => date("m/d/Y", strtotime($payment->date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $payeeName
                        ];
                    }
                }
            break;
            case 'time-activities' :
                $transactions = $this->accounting_single_time_activity_model->get_company_time_activities(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $activity) {
                    if($activity->billable === "1") {
                        $hms = explode(":", $activity->time);
                        $totalTime = ($hms[0] + ($hms[1]/60) + ($hms[2]/3600));

                        $amount = floatval(str_replace(',', '', $activity->hourly_rate)) * $totalTime;
                        $amount = '$'.number_format(floatval(str_replace(',', '', $amount)), 2, '.', ',');

                        $customer = $this->accounting_customers_model->get_by_id($activity->customer_id);
                        $name = $customer->first_name . ' ' . $customer->last_name;

                        if(count($data) < 10) {
                            $data[] = [
                                'id' => $activity->id,
                                'type' => 'Time Charge',
                                'date' => date("m/d/Y", strtotime($activity->date)),
                                'amount' => str_replace('$-', '-$', $amount),
                                'name' => $name
                            ];
                        }
                    }
                }
            break;
            case 'receive-payments' :
                $transactions = $this->accounting_receive_payment_model->get_company_receive_payments(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $payment) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $payment->amount_received)), 2, '.', ',');
                    $customer = $this->accounting_customers_model->get_by_id($payment->customer_id);
                    $name = $customer->first_name . ' ' . $customer->last_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $payment->id,
                            'type' => !in_array($payment->ref_no, ['', null, '0']) ? 'Payment No.'.$payment->ref_no : 'Payment',
                            'date' => date("m/d/Y", strtotime($payment->payment_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $name
                        ];
                    }
                }
            break;
            case 'credit-memos' :
                $transactions = $this->accounting_credit_memo_model->get_company_credit_memos(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $credit) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ',');
                    $customer = $this->accounting_customers_model->get_by_id($credit->customer_id);
                    $name = $customer->first_name . ' ' . $customer->last_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $credit->id,
                            'type' => !in_array($credit->ref_no, ['', null, '0']) ? 'Credit Memo No.'.$credit->ref_no : 'Credit Memo',
                            'date' => date("m/d/Y", strtotime($credit->credit_memo_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $name
                        ];
                    }
                }
            break;
            case 'sales-receipts' :
                $transactions = $this->accounting_sales_receipt_model->get_company_sales_receipts(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $receipt) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $receipt->total_amount)), 2, '.', ',');
                    $customer = $this->accounting_customers_model->get_by_id($receipt->customer_id);
                    $name = $customer->first_name . ' ' . $customer->last_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $receipt->id,
                            'type' => !in_array($receipt->ref_no, ['', null, '0']) ? 'Sales Receipt No.'.$receipt->ref_no : 'Sales Receipt',
                            'date' => date("m/d/Y", strtotime($receipt->sales_receipt_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $name
                        ];
                    }
                }
            break;
            case 'refund-receipts' :
                $transactions = $this->accounting_refund_receipt_model->get_company_refund_receipts(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $receipt) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $receipt->total_amount)), 2, '.', ',');
                    $customer = $this->accounting_customers_model->get_by_id($receipt->customer_id);
                    $name = $customer->first_name . ' ' . $customer->last_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $receipt->id,
                            'type' => !in_array($receipt->ref_no, ['', null, '0']) ? 'Refund Receipt No.'.$receipt->ref_no : 'Refund Receipt',
                            'date' => date("m/d/Y", strtotime($receipt->refund_receipt_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $name
                        ];
                    }
                }
            break;
            case 'delayed-credits' :
                $transactions = $this->accounting_delayed_credit_model->get_company_delayed_credits(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $credit) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $credit->total_amount)), 2, '.', ',');
                    $customer = $this->accounting_customers_model->get_by_id($credit->customer_id);
                    $name = $customer->first_name . ' ' . $customer->last_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $credit->id,
                            'type' => !in_array($credit->ref_no, ['', null, '0']) ? 'Delayed Credit No.'.$credit->ref_no : 'Delayed Credit',
                            'date' => date("m/d/Y", strtotime($credit->delayed_credit_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $name
                        ];
                    }
                }
            break;
            case 'delayed-charges' :
                $transactions = $this->accounting_delayed_charge_model->get_company_delayed_charges(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->created_at) > strtotime($a->created_at);
                });

                foreach($transactions as $charge) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $charge->total_amount)), 2, '.', ',');
                    $customer = $this->accounting_customers_model->get_by_id($charge->customer_id);
                    $name = $customer->first_name . ' ' . $customer->last_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $charge->id,
                            'type' => !in_array($charge->ref_no, ['', null, '0']) ? 'Delayed Charge No.'.$charge->ref_no : 'Delayed Charge',
                            'date' => date("m/d/Y", strtotime($charge->delayed_charge_date)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $name
                        ];
                    }
                }
            break;
            case 'invoices' :
                $transactions = $this->invoice_model->get_company_invoices(['company_id' => logged('company_id')]);
                usort($transactions, function($a, $b) {
                    return strtotime($b->date_created) > strtotime($a->date_created);
                });

                $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));
                foreach($transactions as $invoice) {
                    $amount = '$'.number_format(floatval(str_replace(',', '', $invoice->grand_total)), 2, '.', ',');
                    $customer = $this->accounting_customers_model->get_by_id($invoice->customer_id);
                    $name = $customer->first_name . ' ' . $customer->last_name;

                    if(count($data) < 10) {
                        $data[] = [
                            'id' => $invoice->id,
                            'type' => 'Invoice No.'.str_replace($invoiceSettings->invoice_num_prefix, '', $invoice->invoice_number),
                            'date' => date("m/d/Y", strtotime($invoice->date_issued)),
                            'amount' => str_replace('$-', '-$', $amount),
                            'name' => $name
                        ];
                    }
                }
            break;
        }

        // $result = [
        //     'draw' => $post['draw'],
        //     'recordsTotal' => count($transactions),
        //     'recordsFiltered' => count($data),
        //     'data' => $data
        // ];

        echo json_encode($data);
    }

    public function delete_transaction($transactionType, $transactionId)
    {
        switch ($transactionType) {
            case 'expense':
                $delete = $this->delete_expense($transactionId);
            break;
            case 'check':
                $delete = $this->delete_check($transactionId);
            break;
            case 'bill':
                $delete = $this->delete_bill($transactionId);
            break;
            case 'purchase-order':
                $delete = $this->delete_purchase_order($transactionId);
            break;
            case 'vendor-credit':
                $delete = $this->delete_vendor_credit($transactionId);
            break;
            case 'cc-credit' :
                $delete = $this->delete_cc_credit($transactionId);
            break;
            case 'credit-card-payment':
                $delete = $this->delete_cc_payment($transactionId);
            break;
            case 'bill-payment':
                $delete = $this->delete_bill_payment($transactionId);
            break;
            case 'deposit' :
                $delete = $this->delete_deposit($transactionId);
            break;
            case 'journal' :
                $delete = $this->delete_journal_entry($transactionId);
            break;
            case 'transfer' :
                $delete = $this->delete_transfer($transactionId);
            break;
            case 'inventory-qty-adjust' :
                $delete = $this->delete_qty_adjustment($transactionId);
            break;
            case 'credit-card-pmt':
                $delete = $this->delete_cc_payment($transactionId);
            break;
            case 'time-activity' :
                $delete = $this->delete_time_activity($transactionId);
            break;
            case 'receive-payment' :
                $delete = $this->delete_receive_payment($transactionId);
            break;
            case 'credit-memo' :
                $delete = $this->delete_credit_memo($transactionId);
            break;
            case 'sales-receipt' :
                $delete = $this->delete_sales_receipt($transactionId);
            break;
            case 'refund-receipt' :
                $delete = $this->delete_refund_receipt($transactionId);
            break;
            case 'delayed-credit' :
                $delete = $this->delete_delayed_credit($transactionId);
            break;
            case 'delayed-charge' :
                $delete = $this->delete_delayed_charge($transactionId);
            break;
            case 'invoice' : 
                $delete = $this->delete_invoice($transactionId);
            break;
        }

        echo json_encode([
            'data' => $transactionId,
            'success' => $delete ? true : false,
            'message' => $delete ? 'Transaction successfully deleted!' : 'Unexpected error occurred.'
        ]);
    }

    private function delete_expense($expenseId)
    {
        $expense = $this->vendors_model->get_expense_by_id($expenseId, logged('company_id'));

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Expense', $expenseId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);
        }

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Expense', $expenseId);

        $this->accounting_linked_transactions_model->unlink_all_from_linked_to('expense', $expenseId);

        $categories = $this->expenses_model->get_transaction_categories($expenseId, 'Expense');
        $items = $this->expenses_model->get_transaction_items($expenseId, 'Expense');

        if (count($categories) > 0) {
            foreach ($categories as $category) {
                if(!is_null($category->linked_transaction_category_id) && $category->linked_transaction_category_id !== "") {
                    $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($category->linked_transaction_category_id);
                    $receivedAmount = floatval($category->amount) > floatval($linkedCat->amount) ? 0.00 : floatval($linkedCat->received) - floatval($category->amount);

                    $linkedCatData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_category_details($category->linked_transaction_category_id, $linkedCatData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($category->linked_transaction_id, $expense->company_id);
                    $balance = floatval($category->amount) > floatval($linkedCat->amount) ? floatval($linkedTransac->remaining_balance) + floatval($linkedCat->amount) : floatval($linkedTransac->remaining_balance) + floatval($category->amount);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }

        if (count($items) > 0) {
            foreach ($items as $item) {
                $location = $this->items_model->getItemLocation($item->location_id, $item->item_id);

                $newQty = intval($location->qty) - intval($item->quantity);

                $this->items_model->updateLocationQty($item->location_id, $item->item_id, $newQty);

                if(!is_null($item->linked_transaction_item_id) && $item->linked_transaction_item_id !== "") {
                    $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($item->linked_transaction_item_id);
                    $receivedAmount = floatval($item->total) > floatval($linkedItem->received) ? 0.00 : floatval($linkedItem->received) - floatval($item->total);

                    $linkedItemData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_item($item->linked_transaction_item_id, $linkedItemData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($item->linked_transaction_id, $expense->company_id);
                    $balance = floatval($item->total) > floatval($linkedItem->total) ? floatval($linkedTransac->remaining_balance) + floatval($linkedItem->total) : floatval($linkedTransac->remaining_balance) + floatval($item->total);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }

        $this->expenses_model->delete_vendor_transaction_categories('Expense', $expenseId);
        $this->expenses_model->delete_vendor_transaction_items('Expense', $expenseId);

        $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Expense', $expenseId);
        $removeTags = $this->tags_model->remove_transaction_tags('Expense', $expenseId);

        $update = $this->vendors_model->update_expense($expenseId, ['status' => 0]);

        return $update;
    }

    private function delete_check($checkId)
    {
        $check = $this->vendors_model->get_check_by_id($checkI, logged('company_id'));

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Check', $checkId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);
        }

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Check', $checkId);

        $this->accounting_linked_transactions_model->unlink_all_from_linked_to('check', $checkId);

        $categories = $this->expenses_model->get_transaction_categories($checkId, 'Check');
        $items = $this->expenses_model->get_transaction_items($checkId, 'Check');

        if (count($categories) > 0) {
            foreach ($categories as $category) {
                if(!is_null($category->linked_transaction_category_id) && $category->linked_transaction_category_id !== "") {
                    $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($category->linked_transaction_category_id);
                    $receivedAmount = floatval($category->amount) > floatval($linkedCat->amount) ? 0.00 : floatval($linkedCat->received) - floatval($category->amount);

                    $linkedCatData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_category_details($category->linked_transaction_category_id, $linkedCatData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($category->linked_transaction_id, $expense->company_id);
                    $balance = floatval($category->amount) > floatval($linkedCat->amount) ? floatval($linkedTransac->remaining_balance) + floatval($linkedCat->amount) : floatval($linkedTransac->remaining_balance) + floatval($category->amount);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }

        if (count($items) > 0) {
            foreach ($items as $item) {
                $location = $this->items_model->getItemLocation($item->location_id, $item->item_id);

                $newQty = intval($location->qty) - intval($item->quantity);

                $this->items_model->updateLocationQty($item->location_id, $item->item_id, $newQty);

                if(!is_null($item->linked_transaction_item_id) && $item->linked_transaction_item_id !== "") {
                    $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($item->linked_transaction_item_id);
                    $receivedAmount = floatval($item->total) > floatval($linkedItem->received) ? 0.00 : floatval($linkedItem->received) - floatval($item->total);

                    $linkedItemData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_item($item->linked_transaction_item_id, $linkedItemData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($item->linked_transaction_id, $expense->company_id);
                    $balance = floatval($item->total) > floatval($linkedItem->total) ? floatval($linkedTransac->remaining_balance) + floatval($linkedItem->total) : floatval($linkedTransac->remaining_balance) + floatval($item->total);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }

        $this->expenses_model->delete_vendor_transaction_categories('Check', $checkId);
        $this->expenses_model->delete_vendor_transaction_items('Check', $checkId);

        $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Check', $checkId);
        $removeTags = $this->tags_model->remove_transaction_tags('Check', $checkId);

        $update = $this->vendors_model->update_check($checkId, ['status' => 0]);

        return $update;
    }

    private function delete_bill($billId)
    {
        $this->accounting_linked_transactions_model->unlink_all_from_linked_to('bill', $billId);

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Bill', $billId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);
        }

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Bill', $billId);

        $this->accounting_linked_transactions_model->unlink_all_from_linked_to('bill', $billId);

        $categories = $this->expenses_model->get_transaction_categories($billId, 'Bill');
        $items = $this->expenses_model->get_transaction_items($billId, 'Bill');

        if (count($categories) > 0) {
            foreach ($categories as $category) {
                if(!is_null($category->linked_transaction_category_id) && $category->linked_transaction_category_id !== "") {
                    $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($category->linked_transaction_category_id);
                    $receivedAmount = floatval($category->amount) > floatval($linkedCat->amount) ? 0.00 : floatval($linkedCat->received) - floatval($category->amount);

                    $linkedCatData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_category_details($category->linked_transaction_category_id, $linkedCatData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($category->linked_transaction_id, $expense->company_id);
                    $balance = floatval($category->amount) > floatval($linkedCat->amount) ? floatval($linkedTransac->remaining_balance) + floatval($linkedCat->amount) : floatval($linkedTransac->remaining_balance) + floatval($category->amount);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }

        if (count($items) > 0) {
            foreach ($items as $item) {
                $location = $this->items_model->getItemLocation($item->location_id, $item->item_id);

                $newQty = intval($location->qty) - intval($item->quantity);

                $this->items_model->updateLocationQty($item->location_id, $item->item_id, $newQty);

                if(!is_null($item->linked_transaction_item_id) && $item->linked_transaction_item_id !== "") {
                    $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($item->linked_transaction_item_id);
                    $receivedAmount = floatval($item->total) > floatval($linkedItem->received) ? 0.00 : floatval($linkedItem->received) - floatval($item->total);

                    $linkedItemData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_item($item->linked_transaction_item_id, $linkedItemData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($item->linked_transaction_id, $expense->company_id);
                    $balance = floatval($item->total) > floatval($linkedItem->total) ? floatval($linkedTransac->remaining_balance) + floatval($linkedItem->total) : floatval($linkedTransac->remaining_balance) + floatval($item->total);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }

        $this->expenses_model->delete_vendor_transaction_categories('Bill', $billId);
        $this->expenses_model->delete_vendor_transaction_items('Bill', $billId);

        $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Bill', $billId);
        $removeTags = $this->tags_model->remove_transaction_tags('Bill', $billId);

        $update = $this->vendors_model->update_bill($billId, ['status' => 0]);

        return $update;
    }

    private function delete_purchase_order($purchaseOrderId)
    {
        $categories = $this->expenses_model->get_transaction_categories($purchaseOrderId, 'Purchase Order');
        $items = $this->expenses_model->get_transaction_items($purchaseOrderId, 'Purchase Order');

        if (count($items) > 0) {
            foreach($categories as $category) {
                $linked = $this->expenses_model->get_categories_by_linked_data('purchase_order', $purchaseOrderId, $category->id);

                foreach($linked as $li) {
                    $linkedData = [
                        'linked_transaction_type' => null,
                        'linked_transaction_id' => null,
                        'linked_transaction_category_id' => null
                    ];

                    $this->vendors_model->update_transaction_category_details($li->id, $linkedData);
                }
            }

            foreach ($items as $item) {
                $itemAccDetails = $this->items_model->getItemAccountingDetails($item->item_id);

                $newQtyPO = intval($itemAccDetails->qty_po) + intval($item->quantity);

                $this->items_model->updateItemAccountingDetails(['qty_po' => $newQtyPO], $item->item_id);

                $linked = $this->expenses_model->get_items_by_linked_data('purchase_order', $purchaseOrderId, $item->id);

                foreach($linked as $li) {
                    $linkedData = [
                        'linked_transaction_type' => null,
                        'linked_transaction_id' => null,
                        'linked_transaction_item_id' => null
                    ];

                    $this->vendors_model->update_transaction_item($li->id, $linkedData);
                }
            }
        }

        $this->expenses_model->delete_vendor_transaction_categories('Purchase Order', $purchaseOrderId);
        $this->expenses_model->delete_vendor_transaction_items('Purchase Order', $purchaseOrderId);

        $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Purchase Order', $purchaseOrderId);
        $removeTags = $this->tags_model->remove_transaction_tags('Purchase Order', $purchaseOrderId);

        $update = $this->vendors_model->update_purchase_order($purchaseOrderId, ['status' => 0]);

        return $update;
    }

    private function delete_vendor_credit($vendorCreditId)
    {
        $vendorCredit = $this->vendors_model->get_vendor_credit_by_id($vendorCreditId, logged('company_id'));
        $vendor = $this->vendors_model->get_vendor_by_id($vendorCredit->vendor_id);

        if ($vendor->vendor_credits === null & $vendor->vendor_credits === "") {
            $vendorCredits = floatval($vendorCredit->total_amount);
        } else {
            $vendorCredits = floatval($vendor->vendor_credits) - floatval($vendorCredit->total_amount);
        }

        $vendorData = [
            'vendor_credits' => number_format($vendorCredits, 2, '.', ',')
        ];

        $this->vendors_model->updateVendor($vendor->id, $vendorData);

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Vendor Credit', $vendorCreditId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);
        }

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Vendor Credit', $vendorCreditId);

        $items = $this->expenses_model->get_transaction_items($vendorCreditId, 'Vendor Credit');

        if (count($items) > 0) {
            foreach ($items as $item) {
                $location = $this->items_model->getItemLocation($item->location_id, $item->item_id);

                $newQty = intval($location->qty) + intval($item->quantity);

                $this->items_model->updateLocationQty($item->location_id, $item->item_id, $newQty);
            }
        }

        $this->expenses_model->delete_vendor_transaction_categories('Vendor Credit', $vendorCreditId);
        $this->expenses_model->delete_vendor_transaction_items('Vendor Credit', $vendorCreditId);

        $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Vendor Credit', $vendorCreditId);
        $removeTags = $this->tags_model->remove_transaction_tags('Vendor Credit', $vendorCreditId);

        $update = $this->vendors_model->update_vendor_credit($vendorCreditId, ['status' => 0]);

        return $update;
    }

    private function delete_cc_credit($ccCreditId)
    {
        $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($ccCreditId, logged('company_id'));

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Credit Card Credit', $ccCreditId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);
        }

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Credit Card Credit', $ccCreditId);

        $items = $this->expenses_model->get_transaction_items($ccCreditId, 'Credit Card Credit');

        if (count($items) > 0) {
            foreach ($items as $item) {
                $location = $this->items_model->getItemLocation($item->location_id, $item->item_id);

                $newQty = intval($location->qty) + intval($item->quantity);

                $this->items_model->updateLocationQty($item->location_id, $item->item_id, $newQty);
            }
        }

        $this->expenses_model->delete_vendor_transaction_categories('Credit Card Credit', $ccCreditId);
        $this->expenses_model->delete_vendor_transaction_items('Credit Card Credit', $ccCreditId);

        $removeAttachments = $this->accounting_attachments_model->unlink_attachments('CC Credit', $ccCreditId);
        $removeTags = $this->tags_model->remove_transaction_tags('CC Credit', $ccCreditId);

        $update = $this->vendors_model->update_credit_card_credit($ccCreditId, ['status' => 0]);

        return $update;
    }

    private function delete_cc_payment($ccPaymentId)
    {
        $ccPayment = $this->vendors_model->get_credit_card_payment_by_id($ccPaymentId);

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('CC Payment', $ccPaymentId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);
        }

        $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('CC Payment', $ccPaymentId);

        $removeAttachments = $this->accounting_attachments_model->unlink_attachments('CC Payment', $ccPaymentId);

        $update = $this->vendors_model->update_credit_card_payment($ccPaymentId, ['status' => 0]);

        return $update;
    }

    private function delete_bill_payment($billPaymentId)
    {
        $billPayment = $this->vendors_model->get_bill_payment_by_id($billPaymentId);

        $billPaymentData = [
            'vendor_credits_applied' => null,
            'status' => 0
        ];

        $update = $this->vendors_model->update_bill_payment($billPaymentId, $billPaymentData);

        if ($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Bill Payment', $billPaymentId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Bill Payment', $billPaymentId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Bill Payment', $billPaymentId);

            $vCredits = !is_null($billPayment->vendor_credits_applied) ? json_decode($billPayment->vendor_credits_applied, true) : null;
            if (!is_null($vCredits)) {
                foreach ($vCredits as $vCreditId => $amount) {
                    $vCredit = $this->vendors_model->get_vendor_credit_by_id($vCreditId, logged('company_id'));
                    $vCreditData = [
                        'status' => 1,
                        'remaining_balance' => floatval($vCredit->remaining_balance) + floatval($amount),
                        'updated_at' => date("Y-m-d H:i:s")
                    ];

                    $this->vendors_model->update_vendor_credit($vCredit->id, $vCreditData);

                    $vendor = $this->vendors_model->get_vendor_by_id($billPayment->payee_id);
                    $vendorData = [
                        'vendor_credits' => floatval($vendor->vendor_credits) + floatval($amount)
                    ];

                    $this->vendors_model->updateVendor($billPayment->payee_id, $vendorData);
                }
            }

            $paymentItems = $this->vendors_model->get_bill_payment_items($billPaymentId);
            foreach ($paymentItems as $paymentItem) {
                $bill = $this->expenses_model->get_bill_data($paymentItem->bill_id);

                $billData = [
                    'remaining_balance' => floatval($bill->remaining_balance) + floatval($paymentItem->total_amount),
                    'status' => 1,
                    'updated_at' => date("Y-m-d H:i:s")
                ];

                $this->expenses_model->update_bill_data($bill->id, $billData);
            }
    
            $this->vendors_model->delete_bill_payment_items($billPaymentId);
        }

        return $update;
    }

    private function delete_deposit($depositId)
    {
        $deposit = $this->accounting_bank_deposit_model->getById($depositId, logged('company_id'));
        $funds = $this->accounting_bank_deposit_model->getFunds($deposit->id);

        $update = $this->accounting_bank_deposit_model->update($deposit->id, ['status' => 0]);

        if($update) {
            $this->accounting_attachments_model->unlink_attachments('Deposit', $depositId);

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Deposit', $depositId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Deposit', $depositId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Deposit', $depositId);
            $removeTags = $this->tags_model->remove_transaction_tags('Deposit', $depositId);
        }

        return $update;
    }

    private function delete_journal_entry($journalEntryId)
    {
        $journalEntry = $this->accounting_journal_entries_model->getById($journalEntryId, logged('company_id'));
        $entries = $this->accounting_journal_entries_model->getEntries($journalEntryId);

        $journalEntryData = [
            'status' => 0
        ];

        $update = $this->accounting_journal_entries_model->update($journalEntry->id, $journalEntryData);

        if($update) {
            $this->accounting_attachments_model->unlink_attachments('Journal', $journalEntryId);

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Journal', $journalEntryId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Journal', $journalEntryId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Journal', $journalEntryId);
        }

        return $update;
    }

    private function delete_transfer($transferId)
    {
        $transfer = $this->accounting_transfer_funds_model->getById($transferId, logged('company_id'));

        $update = $this->accounting_transfer_funds_model->update($transfer->id, ['status' => 0]);

        if($update) {
            $this->accounting_attachments_model->unlink_attachments('Transfer', $transferId);

            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Transfer', $transferId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Transfer', $transferId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Transfer', $transferId);
        }

        return $update;
    }

    private function delete_qty_adjustment($adjustmentId)
    {
        $adjustment = $this->accounting_inventory_qty_adjustments_model->get_by_id($adjustmentId);
        $adjustedProds = $this->accounting_inventory_qty_adjustments_model->get_adjusted_products($adjustment->id);

        $update = $this->accounting_inventory_qty_adjustments_model->update($adjustment->id, ['status' => 0]);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Inventory Qty Adjust', $adjustmentId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Inventory Qty Adjust', $adjustmentId);

            $locationData = [];
            foreach($adjustedProds as $adjustedProd) {
                $itemAccDetails = $this->items_model->getItemAccountingDetails($adjustedProd->product_id);
                $startingValAdj = $this->starting_value_model->get_by_item_id($adjustedProd->product_id);
                $item = $this->items_model->getItemById($adjustedProd->product_id)[0];

                if(!is_null($startingValAdj)) {
                    $amount = floatval($adjustedProd->change_in_quantity) * floatval($startingValAdj->initial_cost);
                } else {
                    $amount = floatval($adjustedProd->change_in_quantity) *  floatval($item->cost);
                }

                $location = $this->items_model->getItemLocation($adjustedProd->location_id, $adjustedProd->product_id);
                $qty = intval($location->qty) - intval($adjustedProd->change_in_quantity);
                $locationData[] = [
                    'id' => $adjustedProd->location_id,
                    'qty' => $qty
                ];
            }

            $adjustQuantity = $this->items_model->updateBatchLocations($locationData);
        }

        return $update;
    }

    private function delete_time_activity($activityId)
    {
        $activity = $this->accounting_single_time_activity_model->get_by_id($activityId);

        $update = $this->accounting_single_time_activity_model->update($activity->id, ['status' => 0]);

        if($update) {
            $date = date('Y-m-d', strtotime($activity->date));
            $dateTime = new DateTime($date);
            $weekNo = $dateTime->format('W');

            $newDate = new DateTime();
            $firstDay = $newDate->setISODate($dateTime->format("Y"), $weekNo, 0);
            $firstDayString = $firstDay->format('Y-m-d');
            $lastDay = $newDate->setISODate($dateTime->format("Y"), $weekNo, 6);
            $lastDayString = $lastDay->format('Y-m-d');

            $activityData = [
                'name_key' => $activity->name_key,
                'name_id' => $activity->name_id,
                'start_date' => $firstDayString,
                'end_date' => $lastDayString
            ];

            $activities = $this->accounting_weekly_timesheet_model->get_timesheet_activities($activityData);

            if(count($activities) < 1) {
                $this->accounting_weekly_timesheet_model->delete_timesheet($activityData);
            }
        }

        return $update;
    }

    private function delete_receive_payment($receivePaymentId)
    {
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($receivePaymentId);

        $paymentData = [
            'amount_received' => 0.00,
            'amount_to_credit' => 0.00,
            'amount_to_apply' => 0.00,
            'credit_balance' => 0.00,
            'status' => 0
        ];

        $update = $this->accounting_receive_payment_model->updateReceivePayment($payment->id, $paymentData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Payment', $receivePaymentId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Payment', $receivePaymentId);

            $invoices = $this->accounting_receive_payment_model->get_payment_invoices($payment->id);
            $credits = $this->accounting_receive_payment_model->get_payment_credits($payment->id);

            foreach($invoices as $paymentInvoice) {
                $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($paymentInvoice->invoice_id);
                $balance = floatval($invoice->balance) + floatval($paymentInvoice->payment_amount);

                if(floatval($invoice->grand_total) === $balance) {
                    $status = 'Schedule';
                }

                if(floatval($invoice->grand_total) > $balance) {
                    $status = 'Partially Paid';
                }

                $invoiceData = [
                    'balance' => $balance,
                    'status' => isset($status) ? $status : $invoice->status
                ];
                $this->accounting_invoices_model->updateInvoices($invoiceId, $invoiceData);

                $paymentRecordData = [
                    'company_id' => logged('company_id'),
                    'customer_id' => $payment->customer_id,
                    'invoice_amount' => floatval($paymentInvoice->payment_amount),
                    'payment_date' => date("Y-m-d", strtotime($payment->payment_date)),
                    'payment_method' => is_null($payment->payment_method) || $payment->payment_method === '' ? 'cash' : $payment->payment_method,
                    'invoice_number' => $invoice->invoice_number
                ];
                $this->payment_records_model->delete_payment_record($paymentRecordData);

                $this->accounting_receive_payment_model->delete_payment_invoice($paymentInvoice->id);
            }

            foreach($credits as $paymentCredit) {
                $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($paymentCredit->credit_memo_id);

                $balance = floatval($creditMemo->balance) + floatval($paymentCredit->payment_amount);

                $creditMemoData = [
                    'balance' => number_format(floatval($balance), 2, '.', ',')
                ];
                $this->accounting_credit_memo_model->updateCreditMemo($creditMemo->id, $creditMemoData);

                $this->accounting_receive_payment_model->delete_payment_credit($paymentCredit->id);
            }

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Payment', $receivePaymentId);
        }

        return $update;
    }

    private function delete_credit_memo($creditMemoId)
    {
        $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($creditMemoId);

        $creditMemoData = [
            'balance' => 0.00,
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'status' => 0
        ];

        $update = $this->accounting_credit_memo_model->updateCreditMemo($creditMemoId, $creditMemoData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Credit Memo', $creditMemoId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Credit Memo', $creditMemoId);

            $this->void_customer_transaction_items('Credit Memo', $creditMemoId);

            $this->accounting_credit_memo_model->delete_customer_transaction_items('Credit Memo', $creditMemoId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Credit Memo', $creditMemoId);
            $removeTags = $this->tags_model->remove_transaction_tags('Credit Memo', $creditMemoId);
        }

        return $update;
    }

    private function delete_sales_receipt($salesReceiptId)
    {
        $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($salesReceiptId);

        $salesReceiptData = [
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'status' => 0
        ];

        $update = $this->accounting_sales_receipt_model->updateSalesReceipt($salesReceiptId, $salesReceiptData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Sales Receipt', $salesReceiptId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Sales Receipt', $salesReceiptId);

            $this->void_customer_transaction_items('Sales Receipt', $salesReceiptId);

            $this->accounting_credit_memo_model->delete_customer_transaction_items('Sales Receipt', $salesReceiptId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Sales Receipt', $salesReceiptId);
            $removeTags = $this->tags_model->remove_transaction_tags('Sales Receipt', $salesReceiptId);
        }

        return $update;
    }

    private function delete_refund_receipt($refundReceiptId)
    {
        $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($refundReceiptId);

        $refundReceiptData = [
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'status' => 0
        ];

        $update = $this->accounting_refund_receipt_model->updateRefundReceipt($refundReceiptId, $refundReceiptData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Refund Receipt', $refundReceiptId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Refund Receipt', $refundReceiptId);

            $this->void_customer_transaction_items('Refund Receipt', $refundReceiptId);

            $this->accounting_credit_memo_model->delete_customer_transaction_items('Refund Receipt', $refundReceiptId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Refund Receipt', $refundReceiptId);
            $removeTags = $this->tags_model->remove_transaction_tags('Refund Receipt', $refundReceiptId);
        }

        return $update;
    }

    private function delete_delayed_credit($delayedCreditId)
    {
        $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($delayedCreditId);

        $refundReceiptData = [
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'status' => 0
        ];

        $update = $this->accounting_delayed_credit_model->updateDelayedCredit($delayedCreditId, $refundReceiptData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Delayed Credit', $delayedCreditId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Delayed Credit', $delayedCreditId);

            $this->void_customer_transaction_items('Delayed Credit', $delayedCreditId);

            $this->accounting_credit_memo_model->delete_customer_transaction_items('Delayed Credit', $delayedCreditId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Delayed Credit', $delayedCreditId);
            $removeTags = $this->tags_model->remove_transaction_tags('Delayed Credit', $delayedCreditId);
        }

        return $update;
    }

    private function delete_delayed_charge($delayedChargeId)
    {
        $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($delayedChargeId);

        $delayedChargeData = [
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'status' => 0
        ];

        $update = $this->accounting_delayed_charge_model->updateDelayedCharge($delayedChargeId, $delayedChargeData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Delayed Charge', $delayedChargeId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Delayed Charge', $delayedChargeId);

            $this->void_customer_transaction_items('Delayed Charge', $delayedChargeId);

            $this->accounting_credit_memo_model->delete_customer_transaction_items('Delayed Charge', $delayedChargeId);

            $removeAttachments = $this->accounting_attachments_model->unlink_attachments('Delayed Charge', $delayedChargeId);
            $removeTags = $this->tags_model->remove_transaction_tags('Delayed Charge', $delayedChargeId);
        }

        return $update;
    }

    private function delete_invoice($invoiceId)
    {
        $invoice = $this->invoice_model->getinvoice($invoiceId);

        $invoiceData = [
            'total_due' => 0.00,
            'balance' => 0.00,
            'sub_total' => 0.00,
            'taxes' => 0.00,
            'adjustment_value' => 0.00,
            'grand_total' => 0.00,
            'view_flag' => 1
        ];

        $update = $this->invoice_model->update_invoice($invoiceId, $invoiceData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Invoice', $invoiceId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);
            }

            $this->accounting_account_transactions_model->delete_account_transactions_by_transaction('Invoice', $invoiceId);

            $linkedTransactions = $this->accounting_linked_transactions_model->get_linked_transactions('invoice', $invoice->id);

            if(count($linkedTransactions) > 0) {
                foreach($linkedTransactions as $linkedTransac) {
                    if($linkedTransac->linked_transaction_type === 'delayed_credit') {
                        $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($linkedTransac->linked_transaction_id);

                        $creditData = [
                            'status' => 1
                        ];

                        $creditUpdate = $this->accounting_delayed_credit_model->updateDelayedCredit($delayedCredit->id, $creditData);
                    } else {
                        $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($linkedTransac->linked_transaction_id);

                        $chargeData = [
                            'status' => 1
                        ];

                        $chargeUpdate = $this->accounting_delayed_charge_model->updateDelayedCharge($delayedCharge->id, $chargeData);
                    }

                    $this->accounting_linked_transactions_model->unlink($linkedTransac->id);
                }
            }

            $invoiceItems = $this->invoice_model->get_invoice_items($invoice->id);

            foreach($invoiceItems as $invoiceItem) {
                if(!in_array($invoiceItem->items_id, ['0', null, '']) && in_array($invoiceItem->package_id, ['0', null, ''])) {
                    $item = $this->items_model->getItemById($invoiceItem->items_id)[0];
                    $itemAccDetails = $this->items_model->getItemAccountingDetails($invoiceItem->items_id);

                    if ($itemAccDetails) {
                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $location = $this->items_model->getItemLocation($invoiceItem->location_id, $invoiceItem->items_id);
                            $newQty = intval($location->qty) + intval($invoiceItem->qty);
                            $this->items_model->updateLocationQty($invoiceItem->location_id, $invoiceItem->items_id, $newQty);
                        }
                    }
                } else {
                    $package = $this->items_model->get_package_by_id($invoiceItem->package_id);
                    $packageItems = $this->items_model->get_package_items($invoiceItem->package_id);

                    foreach($packageItems as $packageItem) {
                        $item = $this->items_model->getItemById($packageItem->item_id)[0];
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                        $totalQty = intval($packageItem->quantity) * intval($invoiceItem->qty);

                        if ($itemAccDetails) {
                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $location = $this->items_model->get_first_location($packageItem->item_id);
                                $newQty = intval($location->qty) + intval($totalQty);
                                $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);
                            }
                        }
                    }
                }
            }

            $this->invoice_model->delete_items($invoice->id);
        }

        return $update;
    }

    public function void_transaction($transactionType, $transactionId)
    {
        switch ($transactionType) {
            case 'expense':
                $return = $this->void_expense($transactionId);
            break;
            case 'check':
                $return = $this->void_check($transactionId);
            break;
            case 'cc-credit' :
                $return = $this->void_cc_credit($transactionId);
            break;
            case 'credit-card-payment':
                $return = $this->void_cc_payment($transactionId);
            break;
            case 'bill-payment':
                $return = $this->void_bill_payment($transactionId);
            break;
            case 'transfer' :
                $return = $this->void_transfer($transactionId);
            break;
            case 'receive-payment' :
                $return = $this->void_receive_payment($transactionId);
            break;
            case 'credit-memo' :
                $return = $this->void_credit_memo($transactionId);
            break;
            case 'sales-receipt' :
                $return = $this->void_sales_receipt($transactionId);
            break;
            case 'refund-receipt' :
                $return = $this->void_refund_receipt($transactionId);
            break;
            case 'invoice' :
                $return = $this->void_invoice($transactionId);
            break;
        }

        echo json_encode($return);
    }

    private function void_expense($expenseId)
    {
        $expense = $this->vendors_model->get_expense_by_id($expenseId, logged('company_id'));

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Expense', $expenseId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);

            $transacData = [
                'amount' => 0.00
            ];

            $this->accounting_account_transactions_model->update($transac->id, $transacData);
        }

        $this->accounting_linked_transactions_model->unlink_all_from_linked_to('expense', $expenseId);

        $data = [
            'memo' => 'Voided',
            'status' => 4,
            'total_amount' => 0.00,
        ];

        $void = $this->vendors_model->update_expense($expenseId, $data);

        if ($void) {
            $this->void_categories('Expense', $expenseId);
            $this->void_items('Expense', $expenseId);
        }

        return [
            'data' => $expenseId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_check($checkId)
    {
        $check = $this->vendors_model->get_check_by_id($checkId, logged('company_id'));

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Check', $checkId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);

            $transacData = [
                'amount' => 0.00
            ];

            $this->accounting_account_transaction_model->update($transac->id, $transacData);
        }

        $this->accounting_linked_transactions_model->unlink_all_from_linked_to('check', $checkId);

        $data = [
            'memo' => 'Voided',
            'status' => 4,
            'total_amount' => 0.00
        ];

        $void = $this->vendors_model->update_check($checkId, $data);

        if ($void) {
            $this->void_categories('Check', $checkId);
            $this->void_items('Check', $checkId);
        }

        return [
            'data' => $checkId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_cc_credit($ccCreditId)
    {
        $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($ccCreditId, logged('company_id'));

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('CC Credit', $ccCreditId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);

            $transacData = [
                'amount' => 0.00
            ];

            $this->accounting_account_transaction_model->update($transac->id, $transacData);
        }

        $data = [
            'memo' => 'Voided',
            'status' => 4,
            'amount' => 0.00,
        ];

        $void = $this->vendors_model->update_credit_card_credit($ccCreditId, $data);

        if ($void) {
            $this->void_categories('Credit Card Credit', $ccCreditId);
            $this->void_items('Credit Card Credit', $ccCreditId);
        }

        return [
            'data' => $ccCreditId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_cc_payment($ccPaymentId)
    {
        $ccPayment = $this->vendors_model->get_credit_card_payment_by_id($ccPaymentId);

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('CC Payment', $ccPaymentId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);

            $transacData = [
                'amount' => 0.00
            ];

            $this->accounting_account_transaction_model->update($transac->id, $transacData);
        }

        $data = [
            'memo' => 'Voided',
            'status' => 4,
            'amount' => 0.00,
        ];

        $void = $this->vendors_model->update_credit_card_payment($ccPaymentId, $data);

        return [
            'data' => $ccPaymentId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_bill_payment($billPaymentId)
    {
        $billPayment = $this->vendors_model->get_bill_payment_by_id($billPaymentId);

        $billPaymentData = [
            'total_amount' => 0.00,
            'memo' => 'Voided',
            'status' => 4,
        ];

        $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Bill Payment', $billPaymentId);

        foreach($accountTransacs as $transac)
        {
            $account = $this->chart_of_accounts_model->getById($transac->account_id);
            $accountType = $this->account_model->getById($account->account_id);

            if($accountType->account_name === 'Credit Card') {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
            } else {
                $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
            }

            $newBalance = number_format($newBalance, 2, '.', ',');

            $accData = [
                'id' => $account->id,
                'company_id' => logged('company_id'),
                'balance' => floatval(str_replace(',', '', $newBalance))
            ];

            $this->chart_of_accounts_model->updateBalance($accData);

            $transacData = [
                'amount' => 0.00
            ];

            $this->accounting_account_transaction_model->update($transac->id, $transacData);
        }

        $void = $this->vendors_model->update_bill_payment($billPaymentId, $billPaymentData);

        $vCredits = !is_null($billPayment->vendor_credits_applied) ? json_decode($billPayment->vendor_credits_applied, true) : null;
        if (!is_null($vCredits)) {
            foreach ($vCredits as $vCreditId => $amount) {
                $vCredit = $this->vendors_model->get_vendor_credit_by_id($vCreditId, logged('company_id'));
                $vCreditData = [
                    'status' => 1,
                    'remaining_balance' => floatval($vCredit->remaining_balance) + floatval($amount),
                    'updated_at' => date("Y-m-d H:i:s")
                ];

                $this->vendors_model->update_vendor_credit($vCredit->id, $vCreditData);
            }
        }

        $paymentItems = $this->vendors_model->get_bill_payment_items($billPaymentId);
        foreach ($paymentItems as $paymentItem) {
            $bill = $this->expenses_model->get_bill_data($paymentItem->bill_id);

            $billData = [
                'remaining_balance' => floatval($bill->remaining_balance) + floatval($paymentItem->total_amount),
                'status' => 1,
                'updated_at' => date("Y-m-d H:i:s")
            ];

            $this->expenses_model->update_bill_data($bill->id, $billData);
        }

        $this->vendors_model->delete_bill_payment_items($billPaymentId);

        return [
            'data' => $billPaymentId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_categories($transactionType, $transactionId)
    {
        $categories = $this->expenses_model->get_transaction_categories($transactionId, $transactionType);

        if (count($categories) > 0) {
            foreach ($categories as $category) {
                $categoryDetails = [
                    'amount' => 0.00,
                    'linked_transaction_type' => null,
                    'linked_transaction_id' => null,
                    'linked_transaction_category_id' => null
                ];

                $this->vendors_model->update_transaction_category_details($category->id, $categoryDetails);

                if(!is_null($category->linked_transaction_category_id) && $category->linked_transaction_category_id !== "" && $transactionType !== 'Credit Card Credit') {
                    $linkedCat = $this->expenses_model->get_vendor_transaction_category_by_id($category->linked_transaction_category_id);
                    $receivedAmount = floatval($category->amount) > floatval($linkedCat->amount) ? 0.00 : floatval($linkedCat->received) - floatval($category->amount);

                    $linkedCatData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_category_details($category->linked_transaction_category_id, $linkedCatData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($category->linked_transaction_id, $expense->company_id);
                    $balance = floatval($category->amount) > floatval($linkedCat->amount) ? floatval($linkedTransac->remaining_balance) + floatval($linkedCat->amount) : floatval($linkedTransac->remaining_balance) + floatval($category->amount);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }
    }

    private function void_items($transactionType, $transactionId)
    {
        $items = $this->expenses_model->get_transaction_items($transactionId, $transactionType);

        if (count($items) > 0) {
            foreach ($items as $item) {
                $location = $this->items_model->getItemLocation($item->location_id, $item->item_id);

                $itemAccDetails = $this->items_model->getItemAccountingDetails($item->item_id);

                switch($transactionType) {
                    case 'Credit Card Credit' :
                        $newQty = intval($location->qty) + intval($item->quantity);
                    break;
                    default :
                        $newQty = intval($location->qty) - intval($item->quantity);
                    break;
                }

                $this->items_model->updateLocationQty($item->location_id, $item->item_id, $newQty);

                $itemDetails = [
                    'quantity' => 0,
                    'rate' => 0.00,
                    'discount' => 0.00,
                    'tax' => 0.00,
                    'total' => 0.00,
                    'linked_transaction_type' => null,
                    'linked_transaction_id' => null,
                    'linked_transaction_item_id' => null
                ];

                $this->vendors_model->update_transaction_item($item->id, $itemDetails);

                if(!is_null($item->linked_transaction_item_id) && $item->linked_transaction_item_id !== "" && $transactionType !== 'Credit Card Credit') {
                    $linkedItem = $this->expenses_model->get_vendor_transaction_item_by_id($item->linked_transaction_item_id);
                    $receivedAmount = floatval($item->total) > floatval($linkedItem->received) ? 0.00 : floatval($linkedItem->received) - floatval($item->total);

                    $linkedItemData = [
                        'received' => $receivedAmount
                    ];

                    $this->vendors_model->update_transaction_item($item->linked_transaction_item_id, $linkedItemData);

                    $linkedTransac = $this->vendors_model->get_purchase_order_by_id($item->linked_transaction_id, $expense->company_id);
                    $balance = floatval($item->total) > floatval($linkedItem->total) ? floatval($linkedTransac->remaining_balance) + floatval($linkedItem->total) : floatval($linkedTransac->remaining_balance) + floatval($item->total);

                    $purchOrderData = [
                        'remaining_balance' => $balance,
                        'status' => 1
                    ];

                    $this->vendors_model->update_purchase_order($linkedTransac->id, $purchOrderData);
                }
            }
        }
    }

    private function void_transfer($transferId)
    {
        $transfer = $this->accounting_transfer_funds_model->getById($transferId, logged('company_id'));

        $transferData = [
            'transfer_amount' => 0.00,
            'transfer_memo' => 'Voided',
            'status' => 4,
        ];

        $void = $this->accounting_transfer_funds_model->update($transfer->id, $transferData);

        if($void) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Transfer', $transferId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);

                $transacData = [
                    'amount' => 0.00
                ];

                $this->accounting_account_transaction_model->update($transac->id, $transacData);
            }
        }

        return [
            'data' => $transferId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_receive_payment($receivePaymentId)
    {
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($receivePaymentId);

        $paymentData = [
            'amount_received' => 0.00,
            'amount_to_credit' => 0.00,
            'amount_to_apply' => 0.00,
            'credit_balance' => 0.00,
            'status' => 4
        ];

        $update = $this->accounting_receive_payment_model->updateReceivePayment($payment->id, $paymentData);

        if($update) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Payment', $receivePaymentId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);

                $transacData = [
                    'amount' => 0.00
                ];

                $this->accounting_account_transaction_model->update($transac->id, $transacData);
            }

            $invoices = $this->accounting_receive_payment_model->get_payment_invoices($payment->id);
            $credits = $this->accounting_receive_payment_model->get_payment_credits($payment->id);

            foreach($invoices as $paymentInvoice) {
                $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($paymentInvoice->invoice_id);
                $balance = floatval($invoice->balance) + floatval($paymentInvoice->payment_amount);

                if(floatval($invoice->grand_total) === $balance) {
                    $status = 'Schedule';
                }

                if(floatval($invoice->grand_total) > $balance) {
                    $status = 'Partially Paid';
                }

                $invoiceData = [
                    'balance' => $balance,
                    'status' => isset($status) ? $status : $invoice->status
                ];
                $this->accounting_invoices_model->updateInvoices($invoiceId, $invoiceData);

                $paymentRecordData = [
                    'company_id' => logged('company_id'),
                    'customer_id' => $payment->customer_id,
                    'invoice_amount' => floatval($paymentInvoice->payment_amount),
                    'payment_date' => date("Y-m-d", strtotime($payment->payment_date)),
                    'payment_method' => is_null($payment->payment_method) || $payment->payment_method === '' ? 'cash' : $payment->payment_method,
                    'invoice_number' => $invoice->invoice_number
                ];
                $this->payment_records_model->delete_payment_record($paymentRecordData);

                $this->accounting_receive_payment_model->delete_payment_invoice($paymentInvoice->id);
            }

            foreach($credits as $paymentCredit) {
                $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($paymentCredit->credit_memo_id);

                $balance = floatval($creditMemo->balance) + floatval($paymentCredit->payment_amount);

                $creditMemoData = [
                    'balance' => number_format(floatval($balance), 2, '.', ',')
                ];
                $this->accounting_credit_memo_model->updateCreditMemo($creditMemo->id, $creditMemoData);

                $this->accounting_receive_payment_model->delete_payment_credit($paymentCredit->id);
            }
        }

        return $update;
    }

    private function void_credit_memo($creditMemoId)
    {
        $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($creditMemoId);

        $creditMemoData = [
            'balance' => 0.00,
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'message_on_statement' => 'Voided',
            'status' => 4
        ];

        $void = $this->accounting_credit_memo_model->updateCreditMemo($creditMemoId, $creditMemoData);

        if($void) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Credit Memo', $creditMemoId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);

                $transacData = [
                    'amount' => 0.00
                ];

                $this->accounting_account_transaction_model->update($transac->id, $transacData);
            }

            $this->void_customer_transaction_items('Credit Memo', $creditMemoId);
        }

        return [
            'data' => $creditMemoId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_sales_receipt($salesReceiptId)
    {
        $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($salesReceiptId);

        $salesReceiptData = [
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'message_on_statement' => 'Voided',
            'status' => 4
        ];

        $void = $this->accounting_sales_receipt_model->updateSalesReceipt($salesReceiptId, $salesReceiptData);

        if($void) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Sales Receipt', $salesReceiptId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);

                $transacData = [
                    'amount' => 0.00
                ];

                $this->accounting_account_transaction_model->update($transac->id, $transacData);
            }

            $this->void_customer_transaction_items('Sales Receipt', $salesReceiptId);
        }

        return [
            'data' => $salesReceiptId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_refund_receipt($refundReceiptId)
    {
        $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($refundReceiptId);

        $refundReceiptData = [
            'total_amount' => 0.00,
            'subtotal' => 0.00,
            'tax_total' => 0.00,
            'discount_total' => 0.00,
            'adjustment_value' => 0.00,
            'message_on_statement' => 'Voided',
            'status' => 4
        ];

        $void = $this->accounting_refund_receipt_model->updateRefundReceipt($refundReceiptId, $refundReceiptData);

        if($void) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Refund Receipt', $refundReceiptId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);

                $transacData = [
                    'amount' => 0.00
                ];

                $this->accounting_account_transaction_model->update($transac->id, $transacData);
            }

            $this->void_customer_transaction_items('Refund Receipt', $refundReceiptId);
        }

        return [
            'data' => $refundReceiptId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_invoice($invoiceId)
    {
        $invoice = $this->invoice_model->getinvoice($invoiceId);

        $invoiceData = [
            'total_due' => 0.00,
            'balance' => 0.00,
            'message_to_customer' => 'Voided',
            'sub_total' => 0.00,
            'taxes' => 0.00,
            'adjustment_value' => 0.00,
            'grand_total' => 0.00,
            'voided' => 1
        ];

        $void = $this->invoice_model->update_invoice($invoiceId, $invoiceData);

        if($void) {
            $accountTransacs = $this->accounting_account_transactions_model->get_account_transactions_by_transaction('Invoice', $invoiceId);

            foreach($accountTransacs as $transac)
            {
                $account = $this->chart_of_accounts_model->getById($transac->account_id);
                $accountType = $this->account_model->getById($account->account_id);

                if($accountType->account_name === 'Credit Card') {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount));
                } else {
                    $newBalance = $transac->type === 'increase' ? floatval(str_replace(',', '', $account->balance)) - floatval(str_replace(',', '', $transac->amount)) : floatval(str_replace(',', '', $account->balance)) + floatval(str_replace(',', '', $transac->amount));
                }

                $newBalance = number_format($newBalance, 2, '.', ',');

                $accData = [
                    'id' => $account->id,
                    'company_id' => logged('company_id'),
                    'balance' => floatval(str_replace(',', '', $newBalance))
                ];

                $this->chart_of_accounts_model->updateBalance($accData);

                $transacData = [
                    'amount' => 0.00
                ];

                $this->accounting_account_transaction_model->update($transac->id, $transacData);
            }

            $invoiceItems = $this->invoice_model->get_invoice_items($invoice->id);

            foreach($invoiceItems as $invoiceItem) {
                if(!in_array($invoiceItem->items_id, ['0', null, '']) && in_array($invoiceItem->package_id, ['0', null, ''])) {
                    $item = $this->items_model->getItemById($invoiceItem->items_id)[0];
                    $itemAccDetails = $this->items_model->getItemAccountingDetails($invoiceItem->items_id);

                    if ($itemAccDetails) {
                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $location = $this->items_model->getItemLocation($invoiceItem->location_id, $invoiceItem->items_id);
                            $newQty = intval($location->qty) + intval($invoiceItem->qty);
                            $this->items_model->updateLocationQty($invoiceItem->location_id, $invoiceItem->items_id, $newQty);
                        }
                    }
                } else {
                    $package = $this->items_model->get_package_by_id($invoiceItem->package_id);
                    $packageItems = $this->items_model->get_package_items($invoiceItem->package_id);

                    foreach($packageItems as $packageItem) {
                        $item = $this->items_model->getItemById($packageItem->item_id)[0];
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                        $totalQty = intval($packageItem->quantity) * intval($invoiceItem->qty);

                        if ($itemAccDetails) {
                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $location = $this->items_model->get_first_location($packageItem->item_id);
                                $newQty = intval($location->qty) + intval($totalQty);
                                $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);
                            }
                        }
                    }
                }

                $invoiceItemData = [
                    'qty' => 0,
                    'cost' => 0.00,
                    'tax' => 0.00,
                    'discount' => 0.00,
                    'total' => 0.00,
                    'tax_rate_used' => 0.00
                ];

                $this->invoice_model->update_invoice_item($invoiceItem->id, $invoiceItemData);
            }
        }

        return [
            'data' => $invoiceId,
            'success' => $void ? true : false,
            'message' => $void ? 'Transaction successfully voided!' : 'Unexpected error occurred.'
        ];
    }

    private function void_customer_transaction_items($transactionType, $transactionId)
    {
        $items = $this->accounting_credit_memo_model->get_customer_transaction_items($transactionType, $transactionId);

        foreach($items as $transactionItem) {
            if($transactionType !== 'Delayed Credit' && $transactionType !== 'Delayed Charge') {
                if(!in_array($transactionItem->item_id, ['0', null, '']) && in_array($transactionItem->package_id, ['0', null, ''])) {
                    $item = $this->items_model->getItemById($transactionItem->item_id)[0];
                    $itemAccDetails = $this->items_model->getItemAccountingDetails($transactionItem->item_id);

                    if ($itemAccDetails) {
                        if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                            $location = $this->items_model->getItemLocation($transactionItem->location_id, $transactionItem->item_id);

                            switch($transactionType) {
                                case 'Credit Memo' :
                                    $newQty = intval($location->qty) - intval($transactionItem->quantity);
                                break;
                                case 'Sales Receipt' :
                                    $newQty = intval($location->qty) + intval($transactionItem->quantity);
                                break;
                                case 'Refund Receipt' :
                                    $newQty = intval($location->qty) - intval($transactionItem->quantity);
                                break;
                            }

                            $this->items_model->updateLocationQty($transactionItem->location_id, $transactionItem->item_id, $newQty);
                        }
                    }
                } else {
                    $package = $this->items_model->get_package_by_id($transactionItem->package_id);
                    $packageItems = json_decode($transactionItem->package_item_details);

                    foreach($packageItems as $packageItem) {
                        $item = $this->items_model->getItemById($packageItem->item_id)[0];
                        $itemAccDetails = $this->items_model->getItemAccountingDetails($packageItem->item_id);
                        $totalQty = intval($packageItem->quantity) * intval($transactionItem->quantity);

                        if ($itemAccDetails) {
                            if(strtolower($item->type) === 'product' || strtolower($item->type) === 'inventory') {
                                $location = $this->items_model->get_first_location($packageItem->item_id);

                                switch($transactionType) {
                                    case 'Credit Memo' :
                                        $newQty = intval($location->qty) - intval($totalQty);
                                    break;
                                    case 'Sales Receipt' :
                                        $newQty = intval($location->qty) + intval($totalQty);
                                    break;
                                    case 'Refund Receipt' :
                                        $newQty = intval($location->qty) - intval($totalQty);
                                    break;
                                }

                                $this->items_model->updateLocationQty($location->id, $packageItem->item_id, $newQty);
                            }
                        }
                    }
                }
            }

            $transactionItemData = [
                'quantity' => 0,
                'price' => 0.00,
                'discount' => 0.00,
                'tax' => 0.00,
                'total' => 0.00
            ];

            $this->accounting_credit_memo_model->update_customer_transaction_item($transactionItem->id, $transactionItemData);
        }
    }

    private function generate_purchase_order_pdf($purchaseOrderId, $fileName = 'print.pdf')
    {
        $this->load->library('pdf');
        $view = "accounting/modals/print_action/print_transactions";

        $data = [];

        $purchaseOrder = $this->vendors_model->get_purchase_order_by_id($purchaseOrderId, logged('company_id'));
        $items = $this->expenses_model->get_transaction_items($purchaseOrderId, 'Purchase Order');
        $categories = $this->expenses_model->get_transaction_categories($purchaseOrderId, 'Purchase Order');

        $payee = $this->vendors_model->get_vendor_by_id($purchaseOrder->vendor_id);
        $payeeName = $payee->title !== null && $payee->title !== "" ? $payee->title : "";
        $payeeName .= $payee->f_name !== null && $payee->f_name !== "" ? " $payee->f_name" : "";
        $payeeName .= $payee->m_name !== null && $payee->m_name !== "" ? " $payee->m_name" : "";
        $payeeName .= $payee->l_name !== null && $payee->l_name !== "" ? " $payee->l_name" : "";
        $payeeName .= $payee->suffix !== null && $payee->suffix !== "" ? " $payee->suffix" : "";

        $payeeName = $payeeName === "" ? $payee->display_name : $payeeName;

        $tableItems = [];

        foreach ($items as $item) {
            $itemDetails = $this->items_model->getItemById($item->item_id)[0];

            if ($transactionType === 'expense') {
                $tableItems[] = [
                    'name' => $itemDetails->title,
                    'description' => '',
                    'amount' => number_format(floatval($item->total), 2, '.', ',')
                ];
            } else {
                $tableItems[] = [
                    'activity' => $itemDetails->title,
                    'qty' => $item->quantity,
                    'rate' => number_format(floatval($item->rate), 2, '.', ','),
                    'amount' => number_format(floatval($item->total), 2, '.', ','),
                ];
            }
        }

        foreach ($categories as $category) {
            $categoryAcc = $this->chart_of_accounts_model->getById($category->expense_account_id);

            if ($transactionType === 'expense') {
                $tableItems[] = [
                    'name' => $categoryAcc->name,
                    'description' => $category->description,
                    'amount' => number_format(floatval($category->amount), 2, '.', ',')
                ];
            } else {
                $tableItems[] = [
                    'activity' => $categoryAcc->name,
                    'qty' => '',
                    'rate' => number_format(floatval(1), 2, '.', ','),
                    'amount' => number_format(floatval($category->amount), 2, '.', ','),
                ];
            }
        }

        usort($tableItems, function ($a, $b) {
            return strcmp($a['activity'], $b['activity']);
        });

        $data[] = [
            'type' => 'purchase-order',
            'payee' => $payee,
            'payeeName' => $payeeName,
            'transaction' => $purchaseOrder,
            'table_items' => $tableItems
        ];

        $this->pdf->save_pdf($view, ['data' => $data], $fileName, 'portrait');

        return $fileName;
    }

    public function print_purchase_order_modal($purchaseOrderId)
    {
        $fileName = $this->generate_purchase_order_pdf($purchaseOrderId);
        
        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['purchaseOrderId'] = $purchaseOrderId;
        $this->page_data['pdf'] = $pdf;
        $this->load->view('accounting/modals/view_print_purchase_order', $this->page_data);
    }

    public function download_purchase_order($purchaseOrderId)
    {
        $purchaseOrder = $this->vendors_model->get_purchase_order_by_id($purchaseOrderId, logged('company_id'));
        $fileName = $this->generate_purchase_order_pdf($purchaseOrderId);

        $fullPath = base_url("/assets/pdf/$fileName");
        if ($fd = fopen ($fullPath, "r")) {
            $fsize = filesize($fullPath);
            header("Content-type: application/pdf"); // add here more headers for diff.     extensions
            header("Content-Disposition: attachment; filename=\"Download $purchaseOrder->purchase_order_no.pdf\"");
            header("Content-length: $fsize");
            header("Cache-control: private"); //use this to open files directly
            readfile($fullPath);

            unlink(getcwd()."/assets/pdf/$fileName");
            fclose ($fd);
            exit;
        }
    }

    public function po_send_email_modal($purchaseOrderId)
    {
        $purchaseOrder = $this->vendors_model->get_purchase_order_by_id($purchaseOrderId, logged('company_id'));
        $vendor = $this->vendors_model->get_vendor_by_id($purchaseOrder->vendor_id);

        $vendorName = $vendor->title !== null && $vendor->title !== "" ? $vendor->title : "";
        $vendorName .= $vendor->f_name !== null && $vendor->f_name !== "" ? " $vendor->f_name" : "";
        $vendorName .= $vendor->m_name !== null && $vendor->m_name !== "" ? " $vendor->m_name" : "";
        $vendorName .= $vendor->l_name !== null && $vendor->l_name !== "" ? " $vendor->l_name" : "";
        $vendorName .= $vendor->suffix !== null && $vendor->suffix !== "" ? " $vendor->suffix" : "";
        $vendorName = $vendorName === "" ? $vendor->display_name : $vendorName;

        $fileName = $this->generate_purchase_order_pdf($purchaseOrderId);
        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));

        $this->page_data['pdf'] = $pdf;
        $this->page_data['purchaseOrder'] = $purchaseOrder;
        $this->page_data['vendor'] = $vendor;
        $this->page_data['company'] = $this->business_model->getById($purchaseOrder->company_id);
        $this->page_data['vendorName'] = $vendorName;
        $this->load->view('accounting/modals/send_email_modal', $this->page_data);
    }

    public function send_purchase_order_email($purchaseOrderId)
    {
        $purchaseOrder = $this->vendors_model->get_purchase_order_by_id($purchaseOrderId, logged('company_id'));
        $company = $this->business_model->getById($purchaseOrder->company_id);
        $fileName = "Purchase_Order_".$purchaseOrder->purchase_order_no."_from_".str_replace(' ', '_', $company->business_name).".pdf";
        $this->generate_purchase_order_pdf($purchaseOrderId, $fileName);

        $data = $this->input->post();

        $this->email->clear(true);
        $this->email->from($company->business_email);
        $this->email->to($purchaseOrder->email);
        $this->email->subject($data['subject']);
        $this->email->message($data['body']);
        $this->email->attach(base_url("/assets/pdf/$fileName"));

        $sent = $this->email->send();

        unlink(getcwd()."/assets/pdf/$fileName");

        $return = [
            'data' => $purchaseOrderId,
            'success' => $sent,
            'message' => $sent ? "Email sent to $purchaseOrder->email" : "Email sending failed"
        ];

        echo json_encode($return);
    }

    public function get_timesheet_activities()
    {
        $post = $this->input->post();

        $name = explode('-', $post['person_tracking']);
        $dates = explode('-', $post['date_range']);

        $timesheetData = [
            'name_type' => $name[0],
            'name_id' => $name[1],
            'week_start_date' => date("Y-m-d", strtotime($dates[0])),
            'week_end_date' => date("Y-m-d", strtotime($dates[1]))
        ];

        $timesheet = $this->accounting_weekly_timesheet_model->get_timesheet($timesheetData);

        $activityData = [
            'name_key' => $name[0],
            'name_id' => $name[1],
            'start_date' => date("Y-m-d", strtotime($dates[0])),
            'end_date' => date("Y-m-d", strtotime($dates[1]))
        ];
        $activities = $this->accounting_weekly_timesheet_model->get_timesheet_activities($activityData);

        $timeActivities = [];
        foreach($activities as $activity) {
            $customer = $this->accounting_customers_model->get_by_id($activity->customer_id);
            $activity->customer_name = $customer->first_name . ' ' . $customer->last_name;
            $service = $this->items_model->getItemById($activity->service_id)[0];
            $activity->service_name = $service->title;

            $totalTime = substr($activity->time, 0, -3);

            $day = strtolower(date("l", strtotime($activity->date)));

            $activity->hours = [
                $day => $totalTime
            ];

            $find = array_filter($timeActivities, function($v, $k) use ($activity) {
                return $activity->customer_id === $v->customer_id && $activity->service_id === $v->service_id && $activity->billable === $v->billable && $activity->hourly_rate === $v->hourly_rate && $activity->taxable === $v->taxable;
            }, ARRAY_FILTER_USE_BOTH);

            if(count($find) < 1) {
                $timeActivities[] = $activity;
            } else {
                $timeActivities[array_key_first($find)]->hours[$day] = $totalTime;
            }
        }

        echo json_encode([
            'timesheet' => $timesheet,
            'activities' => $timeActivities
        ]);
    }

    public function copy_transaction($transactionType, $transactionId)
    {
        switch($transactionType) {
            case 'deposit' :
                $deposit = $this->accounting_bank_deposit_model->getById($transactionId, logged('company_id'));
                $account = $this->chart_of_accounts_model->getById($deposit->account_id);
                $balance = '$'.number_format(floatval($account->balance), 2, '.', ',');
                $balance = str_replace('$-', '-$', $balance);
                $cashBackAccount = $this->chart_of_accounts_model->getById($deposit->cash_back_account_id);
                $funds = $this->accounting_bank_deposit_model->getFunds($deposit->id);

                foreach($funds as $key => $fund) {
                    $funds[$key]->account = $this->chart_of_accounts_model->getById($fund->received_from_account_id);

                    switch($fund->received_from_key) {
                        case 'customer' :
                            $customer = $this->accounting_customers_model->get_by_id($fund->received_from_id);
                            $funds[$key]->name = $customer->first_name . ' ' . $customer->last_name;
                        break;
                        case 'vendor' :
                            $vendor = $this->vendors_model->get_vendor_by_id($fund->received_from_id);
                            $funds[$key]->name = $vendor->display_name;
                        break;
                        case 'employee' :
                            $employee = $this->users_model->getUser($fund->received_from_id);
                            $funds[$key]->name = $employee->FName . ' ' . $employee->LName;
                        break;
                    }

                    $funds[$key]->payment = $this->accounting_payment_methods_model->getById($fund->payment_method);
                }

                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Deposit', $transactionId);
                $this->page_data['deposit'] = $deposit;
                $this->page_data['funds'] = $funds;
                $this->page_data['account'] = $account;
                $this->page_data['balance'] = $balance;
                $this->page_data['cash_back_account'] = $cashBackAccount;

                $view = 'bank_deposit_modal';
            break;
            case 'transfer' :
                $transfer = $this->accounting_transfer_funds_model->getById($transactionId, logged('company_id'));
                $transfer->transfer_from = $this->chart_of_accounts_model->getById($transfer->transfer_from_account_id);
                $transfer->transfer_to = $this->chart_of_accounts_model->getById($transfer->transfer_to_account_id);
        
                $this->page_data['transfer'] = $transfer;

                $view = 'transfer_modal';
            break;
            case 'journal' :
                $journalEntry = $this->accounting_journal_entries_model->getById($transactionId, logged('company_id'));
                $entries = $this->accounting_journal_entries_model->getEntries($journalEntry->id);

                foreach($entries as $key => $entry) {
                    $entries[$key]->account = $this->chart_of_accounts_model->getById($entry->account_id);

                    switch($entry->name_key) {
                        case 'customer' :
                            $customer = $this->accounting_customers_model->get_by_id($entry->name_id);
                            $entries[$key]->name = $customer->first_name . ' ' . $customer->last_name;
                        break;
                        case 'vendor' :
                            $vendor = $this->vendors_model->get_vendor_by_id($entry->name_id);
                            $entries[$key]->name = $vendor->display_name;
                        break;
                        case 'employee' :
                            $employee = $this->users_model->getUser($entry->name_id);
                            $entries[$key]->name = $employee->FName . ' ' . $employee->LName;
                        break;
                    }
                }

                $this->page_data['journal_no'] = $journalEntry->journal_no;
                $this->page_data['journal_date'] = $journalEntry->journal_date !== "" && !is_null($journalEntry->journal_date) ? date("m/d/Y", strtotime($journalEntry->journal_date)) : "";
                $this->page_data['entries'] = $entries;
                $this->page_data['journal_entry'] = $journalEntry;

                $view = 'journal_entry_modal';
            break;
            case 'expense' :
                $expense = $this->vendors_model->get_expense_by_id($transactionId, logged('company_id'));
                $paymentAccs = [];
                $paymentAccsType = $this->account_model->getAccTypeByName(['Bank', 'Credit Card', 'Other Current Assets']);

                foreach ($paymentAccsType as $accType) {
                    $accounts = $this->chart_of_accounts_model->getByAccountType($accType->id, null, logged('company_id'));

                    if (count($accounts) > 0) {
                        foreach ($accounts as $account) {
                            $childAccs = $this->chart_of_accounts_model->getChildAccounts($account->id);

                            $account->childAccs = $childAccs;

                            $paymentAccs[$accType->account_name][] = $account;

                            if ($account->id === $expense->payment_account_id) {
                                $selectedBalance = $account->balance;
                            }

                            foreach ($childAccs as $childAcc) {
                                if ($childAcc->id === $expense->payment_account_id) {
                                    $selectedBalance = $childAcc->balance;
                                }
                            }
                        }
                    }
                }

                if (strpos($selectedBalance, '-') !== false) {
                    $balance = str_replace('-', '', $selectedBalance);
                    $selectedBalance = '-$'.number_format($balance, 2, '.', ',');
                } else {
                    $selectedBalance = '$'.number_format($selectedBalance, 2, '.', ',');
                }

                $categories = $this->expenses_model->get_transaction_categories($transactionId, 'Expense');
                $items = $this->expenses_model->get_transaction_items($transactionId, 'Expense');

                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Expense', $transactionId);
                $this->page_data['expense'] = $expense;
                $this->page_data['categories'] = $categories;
                $this->page_data['items'] = $items;
                $this->page_data['balance'] = $selectedBalance;

                $view = 'expense_modal';
            break;
            case 'check' :
                $check = $this->vendors_model->get_check_by_id($transactionId, logged('company_id'));
                $bankAccsType = $this->account_model->getAccTypeByName('Bank');

                $bankAccs = [];
                $accounts = $this->chart_of_accounts_model->getByAccountType($bankAccsType->id, null, logged('company_id'));
                if (count($accounts) > 0) {
                    foreach ($accounts as $account) {
                        $childAccs = $this->chart_of_accounts_model->getChildAccounts($account->id);

                        $account->childAccs = $childAccs;

                        $bankAccs[] = $account;

                        if ($account->id === $check->bank_account_id) {
                            $selectedBalance = $account->balance;
                        }

                        foreach ($childAccs as $childAcc) {
                            if ($childAcc->id === $check->bank_account_id) {
                                $selectedBalance = $childAcc->balance;
                            }
                        }
                    }
                }

                if (strpos($selectedBalance, '-') !== false) {
                    $balance = str_replace('-', '', $selectedBalance);
                    $selectedBalance = '-$'.number_format($balance, 2, '.', ',');
                } else {
                    $selectedBalance = '$'.number_format($selectedBalance, 2, '.', ',');
                }

                $categories = $this->expenses_model->get_transaction_categories($transactionId, 'Check');
                $items = $this->expenses_model->get_transaction_items($transactionId, 'Check');

                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Check', $transactionId);
                $this->page_data['check'] = $check;
                $this->page_data['categories'] = $categories;
                $this->page_data['items'] = $items;
                $this->page_data['balance'] = $selectedBalance;

                $view = 'check_modal';
            break;
            case 'bill' :
                $bill = $this->vendors_model->get_bill_by_id($transactionId, logged('company_id'));
                $terms = $this->accounting_terms_model->getActiveCompanyTerms(logged('company_id'));
        
                $selectedTerm = $terms[0];
        
                $categories = $this->expenses_model->get_transaction_categories($transactionId, 'Bill');
                $items = $this->expenses_model->get_transaction_items($transactionId, 'Bill');
        
                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Bill', $transactionId);
                $this->page_data['due_date'] = date("m/d/Y", strtotime($bill->due_date));
                $this->page_data['bill'] = $bill;
                $this->page_data['categories'] = $categories;
                $this->page_data['items'] = $items;

                $view = 'bill_modal';
            break;
            case 'purchase-order' :
                $purchaseOrder = $this->vendors_model->get_purchase_order_by_id($transactionId, logged('company_id'));

                $categories = $this->expenses_model->get_transaction_categories($transactionId, 'Purchase Order');
                $items = $this->expenses_model->get_transaction_items($transactionId, 'Purchase Order');

                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Purchase Order', $transactionId);
                $this->page_data['purchaseOrder'] = $purchaseOrder;
                $this->page_data['categories'] = $categories;
                $this->page_data['items'] = $items;

                $view = 'purchase_order_modal';
            break;
            case 'vendor-credit' :
                $vendorCredit = $this->vendors_model->get_vendor_credit_by_id($transactionId, logged('company_id'));

                $categories = $this->expenses_model->get_transaction_categories($transactionId, 'Vendor Credit');
                $items = $this->expenses_model->get_transaction_items($transactionId, 'Vendor Credit');

                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Vendor Credit', $transactionId);
                $this->page_data['vendorCredit'] = $vendorCredit;
                $this->page_data['categories'] = $categories;
                $this->page_data['items'] = $items;

                $view = 'vendor_credit_modal';
            break;
            case 'cc-credit' :
                $ccCredit = $this->vendors_model->get_credit_card_credit_by_id($transactionId, logged('company_id'));

                $creditCard = $this->chart_of_accounts_model->getById($ccCredit->bank_credit_account_id);

                $selectedBalance = $creditCard->balance;
                if (strpos($selectedBalance, '-') !== false) {
                    $balance = str_replace('-', '', $selectedBalance);
                    $selectedBalance = '-$'.number_format(floatval($balance), 2, '.', ',');
                } else {
                    $selectedBalance = '$'.number_format(floatval($selectedBalance), 2, '.', ',');
                }

                $categories = $this->expenses_model->get_transaction_categories($transactionId, 'Credit Card Credit');
                $items = $this->expenses_model->get_transaction_items($transactionId, 'Credit Card Credit');

                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('CC Credit', $transactionId);
                $this->page_data['ccCredit'] = $ccCredit;
                $this->page_data['categories'] = $categories;
                $this->page_data['items'] = $items;
                $this->page_data['balance'] = $selectedBalance;

                $view = 'credit_card_credit_modal';
            break;
            case 'invoice' :
                $invoice = $this->invoice_model->getinvoice($transactionId);
                $invoiceItems = $this->invoice_model->get_invoice_items($transactionId);
                $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);
                $term = $this->accounting_terms_model->get_by_id($invoice->terms, logged('company_id'));
                $paymentMethods = explode(',', $invoice->payment_methods);
                $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

                $discount = floatval($invoice->grand_total) - floatval($invoice->sub_total);
                $discount += floatval($invoice->taxes);
                $discount += floatval($invoice->adjustment_value);

                $invoice->discount_total = $discount;

                foreach($invoiceItems as $key => $invoiceItem) {
                    if(!in_array($invoiceItem->items_id, ['0', null, '']) && in_array($invoiceItem->package_id, ['0', null, ''])) {
                        $invoiceItems[$key]->itemDetails = $this->items_model->getItemById($invoiceItem->items_id)[0];
                        $invoiceItems[$key]->locations = $this->items_model->getLocationByItemId($invoiceItem->items_id);
                    } else {
                        $invoiceItems[$key]->packageDetails = $this->items_model->get_package_by_id($invoiceItem->package_id);
                        $invoiceItems[$key]->packageItems = json_decode($invoiceItem->package_item_details);
                    }
                }

                $customer = $this->accounting_customers_model->get_by_id($invoice->customer_id);
                $this->page_data['customer'] = $customer;
                $this->page_data['invoice_prefix'] = $invoiceSettings->invoice_num_prefix;
                $this->page_data['paymentMethods'] = $paymentMethods;
                $this->page_data['invoice'] = $invoice;
                $this->page_data['items'] = $invoiceItems;
                $this->page_data['payments'] = $paymentRecords;
                $this->page_data['term'] = $term;
                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Invoice', $transactionId);

                $view = 'invoice_modal';
            break;
            case 'estimate' :
                $estimate = $this->estimate_model->getEstimate($transactionId);

                $this->page_data['estimate'] = $estimate;
                switch($estimate->estimate_type) {
                    case 'Standard' :
                        $view = "standard_estimate_modal";
                        $items = $this->estimate_model->getItemlistByID($transactionId);

                        $discount = 0.00;
                        foreach($items as $key => $item) {
                            $items[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];

                            $discount += floatval($item->discount);
                        }

                        $this->page_data['discount'] = $discount;
                        $this->page_data['items'] = $items;
                    break;
                    case 'Option' :
                        $view = "options_estimate_modal";
                        $itemsOption1 = $this->estimate_model->getItemlistByIDOption1($transactionId);

                        foreach($itemsOption1 as $key => $item) {
                            $itemsOption1[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                        }

                        $this->page_data['itemsOption1'] = $itemsOption1;

                        $itemsOption2 = $this->estimate_model->getItemlistByIDOption2($transactionId);

                        foreach($itemsOption2 as $key => $item) {
                            $itemsOption2[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                        }

                        $this->page_data['itemsOption2'] = $itemsOption2;
                    break;
                    case 'Bundle' :
                        $view = "bundle_estimate_modal";
                        $itemsBundle1 = $this->estimate_model->getItemlistByIDBundle1($transactionId);

                        foreach($itemsBundle1 as $key => $item) {
                            $itemsBundle1[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                        }

                        $this->page_data['itemsBundle1'] = $itemsBundle1;

                        $itemsBundle2 = $this->estimate_model->getItemlistByIDBundle2($transactionId);

                        foreach($itemsBundle2 as $key => $item) {
                            $itemsBundle2[$key]->itemDetails = $this->items_model->getItemById($item->items_id)[0];
                        }

                        $this->page_data['itemsBundle2'] = $itemsBundle2;
                    break;
                }
            break;
            case 'credit-memo' :
                $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($transactionId);
                $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Credit Memo', $transactionId);
                $payments = $this->accounting_credit_memo_model->get_credit_memo_payments($transactionId);

                foreach($items as $key => $item) {
                    if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                        $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                        $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
                    } else {
                        $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                        $items[$key]->packageItems = json_decode($item->package_item_details);
                    }
                }

                $paymentAmounts = array_column($payments, 'payment_amount');
                $totalPayment = array_sum($paymentAmounts);

                foreach($payments as $key => $payment) {
                    $receivePayment = $this->accounting_receive_payment_model->getReceivePaymentDetails($payment->receive_payment_id);
                    $payments[$key]->receive_payment = $receivePayment;
                }

                $this->page_data['creditMemo'] = $creditMemo;
                $this->page_data['items'] = $items;
                $this->page_data['payments'] = $payments;
                $this->page_data['totalPayment'] = $totalPayment;
                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Credit Memo', $transactionId);

                $view = 'credit_memo_modal';
            break;
            case 'sales-receipt' :
                $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($transactionId);
                $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Sales Receipt', $transactionId);
        
                foreach($items as $key => $item) {
                    if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                        $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                        $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
                    } else {
                        $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                        $items[$key]->packageItems = json_decode($item->package_item_details);
                    }
                }

                $this->page_data['receipt'] = $salesReceipt;
                $this->page_data['items'] = $items;
                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Sales Receipt', $transactionId);

                $view = 'sales_receipt_modal';
            break;
            case 'refund-receipt' :
                $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($transactionId);
                $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Refund Receipt', $transactionId);
                $refundAcc = $this->chart_of_accounts_model->getById($refundReceipt->refund_from_account);
        
                foreach($items as $key => $item) {
                    if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                        $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                        $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
                    } else {
                        $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                        $items[$key]->packageItems = json_decode($item->package_item_details);
                    }
                }

                $this->page_data['receipt'] = $refundReceipt;
                $this->page_data['items'] = $items;
                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Refund Receipt', $transactionId);
                $this->page_data['refundAcc'] = $refundAcc;

                $view = 'refund_receipt_modal';
            break;
            case 'delayed-credit' :
                $delayedCredit = $this->accounting_delayed_credit_model->getDelayedCreditDetails($transactionId);
                $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Delayed Credit', $transactionId);
        
                foreach($items as $key => $item) {
                    if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                        $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                        $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
                    } else {
                        $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                        $items[$key]->packageItems = json_decode($item->package_item_details);
                    }
                }

                $this->page_data['credit'] = $delayedCredit;
                $this->page_data['items'] = $items;
                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Delayed Credit', $transactionId);

                $view = 'delayed_credit_modal';
            break;
            case 'delayed-charge' :
                $delayedCharge = $this->accounting_delayed_charge_model->getDelayedChargeDetails($transactionId);
                $items = $this->accounting_credit_memo_model->get_customer_transaction_items('Delayed Charge', $transactionId);
        
                foreach($items as $key => $item) {
                    if(!in_array($item->item_id, ['0', null, '']) && in_array($item->package_id, ['0', null, ''])) {
                        $items[$key]->itemDetails = $this->items_model->getItemById($item->item_id)[0];
                        $items[$key]->locations = $this->items_model->getLocationByItemId($item->item_id);
                    } else {
                        $items[$key]->packageDetails = $this->items_model->get_package_by_id($item->package_id);
                        $items[$key]->packageItems = json_decode($item->package_item_details);
                    }
                }

                $this->page_data['charge'] = $delayedCharge;
                $this->page_data['items'] = $items;
                $this->page_data['tags'] = $this->tags_model->get_transaction_tags('Delayed Charge', $transactionId);

                $view = 'delayed_charge_modal';
            break;
        }

        $this->page_data['is_copy'] = true;

        $this->load->view("v2/includes/accounting/modal_forms/$view", $this->page_data);
    }

    public function get_customer_invoices($customerId)
    {
        $post = $this->input->post();
        $search = $post['search'];

        $filters = [
            'customer_id' => $customerId
        ];

        if(!in_array($post['from_date'], ['', null])) {
            $filters['from_date'] = date("Y-m-d", strtotime($post['from_date']));
        }

        if(!in_array($post['to_date'], ['', null])) {
            $filters['to_date'] = date("Y-m-d", strtotime($post['to_date']));
        }

        $filters['overdue'] = $post['overdue'];

        $invoices = $this->accounting_invoices_model->get_customer_invoices_to_pay($filters);
        $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

        $data = [];
        foreach($invoices as $invoice) {
            $invoiceNum = str_replace($invoiceSettings->invoice_num_prefix, '', $invoice->invoice_number);
            $description = "<a href='/invoice/genview/$invoice->id' class='text-decoration-none'>Invoice #$invoiceNum</a> (".date("m/d/Y", strtotime($invoice->date_issued)).")";

            $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);

            $paymentAmounts = array_column($paymentRecords, 'invoice_amount');
            $totalPayment = array_sum($paymentAmounts);

            $balance = floatval($invoice->grand_total) - floatval($totalPayment);

            if($search !== "") {
                if(stripos($invoiceNum, $search) !== false) {
                    $data[] = [
                        'id' => $invoice->id,
                        'description' => $description,
                        'date_issued' => date("m/d/Y", strtotime($invoice->date_issued)),
                        'due_date' => date("m/d/Y", strtotime($invoice->due_date)),
                        'original_amount' => number_format(floatval($invoice->grand_total), 2, '.', ','),
                        'open_balance' => number_format(floatval($balance), 2, '.', ',')
                    ];
                }
            } else {
                $data[] = [
                    'id' => $invoice->id,
                    'description' => $description,
                    'date_issued' => date("m/d/Y", strtotime($invoice->date_issued)),
                    'due_date' => date("m/d/Y", strtotime($invoice->due_date)),
                    'original_amount' => number_format(floatval($invoice->grand_total), 2, '.', ','),
                    'open_balance' => number_format(floatval($balance), 2, '.', ',')
                ];
            }
        }

        echo json_encode($data);
    }

    public function get_customer_credits($customerId)
    {
        $post = $this->input->post();
        $search = $post['search'];

        $filters = [
            'customer_id' => $customerId
        ];

        if(!in_array($post['from_date'], ['', null])) {
            $filters['from_date'] = date("Y-m-d", strtotime($post['from_date']));
        }

        if(!in_array($post['to_date'], ['', null])) {
            $filters['to_date'] = date("Y-m-d", strtotime($post['to_date']));
        }

        $creditMemos = $this->accounting_credit_memo_model->get_customer_open_credit_memos($filters);

        $data = [];
        foreach($creditMemos as $creditMemo) {
            $descriptionText = "Credit Memo";
            $descriptionText .= !in_array($creditMemo->ref_no, ['', null]) ? ' #'.$creditMemo->ref_no : '';
            $description = "<a href='/accounting/view-transaction/credit-memo/$creditMemo->id' class='text-decoration-none'>$descriptionText</a> (".date("m/d/Y", strtotime($creditMemo->credit_memo_date)).")";

            if($search !== "") {
                if(stripos($creditMemo->ref_no, $search) !== false) {
                    $data[] = [
                        'id' => $creditMemo->id,
                        'type' => 'credit-memo',
                        'description' => $description,
                        'date' => date("m/d/Y", strtotime($creditMemo->credit_memo_date)),
                        'original_amount' => number_format(floatval($creditMemo->total_amount), 2, '.', ','),
                        'open_balance' => number_format(floatval($creditMemo->balance), 2, '.', ',')
                    ];
                }
            } else {
                $data[] = [
                    'id' => $creditMemo->id,
                    'type' => 'credit-memo',
                    'description' => $description,
                    'date' => date("m/d/Y", strtotime($creditMemo->credit_memo_date)),
                    'original_amount' => number_format(floatval($creditMemo->total_amount), 2, '.', ','),
                    'open_balance' => number_format(floatval($creditMemo->balance), 2, '.', ',')
                ];
            }
        }

        $unappliedPayments = $this->accounting_receive_payment_model->get_customer_unapplied_payments($filters);

        foreach($unappliedPayments as $unappliedPayment) {
            $description = "<a href='/accounting/view-transaction/unapplied-payment/$unappliedPayment->id' class='text-info'>Unapplied Payment</a> (".date("m/d/Y", strtotime($unappliedPayment->payment_date)).")";

            if($search === '') {
                $data[] = [
                    'id' => $unappliedPayment->id,
                    'type' => 'unapplied-payment',
                    'description' => $description,
                    'date' => date("m/d/Y", strtotime($unappliedPayment->payment_date)),
                    'original_amount' => number_format(floatval($unappliedPayment->amount_to_credit), 2, '.', ','),
                    'open_balance' => number_format(floatval($unappliedPayment->credit_balance), 2, '.', ',')
                ];
            }
        }

        usort($data, function($a, $b) {
            return strotime($a['date']) > strtotime($b['date']);
        });

        echo json_encode($data);
    }

    public function find_customer_by_invoice_no()
    {
        $invoiceNo = $this->input->post('invoice_no');
        $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));
        $invoiceNum = $invoiceSettings->invoice_num_prefix.''.$invoiceNo;

        $customer = $this->accounting_invoices_model->get_customer_by_invoice_number($invoiceNum);

        if(!is_null($customer)) {
            $customerName = $customer->first_name . ' ' . $customer->last_name;
        }

        $result = [
            'success' => !is_null($customer),
            'customer_id' => !is_null($customer) ? $customer->prof_id : null,
            'customer_name' => !is_null($customer) ? $customerName : null
        ];

        echo json_encode($result);
    }

    public function load_payment_invoices($paymentId)
    {
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);
        $post = $this->input->post();
        $search = $post['search'];

        $filters = [
            'overdue' => $post['overdue'],
            'customer_id' => $payment->customer_id
        ];

        if(!empty($post['from_date'])) {
            $filters['from_date'] = date("Y-m-d", strtotime($post['from_date']));
        }

        if(!empty($post['to_date'])) {
            $filters['to_date'] = date("Y-m-d", strtotime($post['to_date']));
        }

        $paymentInvoices = $this->accounting_receive_payment_model->get_payment_invoices($paymentId);
        $invoices = $this->accounting_invoices_model->get_customer_invoices_to_pay($filters);
        $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

        $data = [];
        foreach($paymentInvoices as $paymentInvoice) {
            $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($paymentInvoice->invoice_id);
            $invoiceNum = str_replace($invoiceSettings->invoice_num_prefix, '', $invoice->invoice_number);
            $description = "<a href='/invoice/genview/$invoice->id' class='text-decoration-none'>Invoice #$invoiceNum</a> (".date("m/d/Y", strtotime($invoice->date_issued)).")";

            $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);

            $paymentAmounts = array_column($paymentRecords, 'invoice_amount');
            $totalPayment = array_sum($paymentAmounts);

            $balance = floatval($invoice->grand_total) - floatval($totalPayment);

            if($search !== "") {
                if(stripos($invoiceNum, $search) !== false) {
                    $data[] = [
                        'id' => $invoice->id,
                        'description' => $description,
                        'due_date' => date("m/d/Y", strtotime($invoice->due_date)),
                        'original_amount' => number_format(floatval($invoice->grand_total), 2, '.', ','),
                        'open_balance' => number_format(floatval($balance), 2, '.', ','),
                        'checked' => true,
                        'payment_amount' => number_format(floatval($paymentInvoice->payment_amount), 2, '.', ',')
                    ];
                }
            } else {
                $data[] = [
                    'id' => $invoice->id,
                    'description' => $description,
                    'due_date' => date("m/d/Y", strtotime($invoice->due_date)),
                    'original_amount' => number_format(floatval($invoice->grand_total), 2, '.', ','),
                    'open_balance' => number_format(floatval($balance), 2, '.', ','),
                    'checked' => true,
                    'payment_amount' => number_format(floatval($paymentInvoice->payment_amount), 2, '.', ',')
                ];
            }
        }

        foreach($invoices as $invoice) {
            $invoiceNum = str_replace($invoiceSettings->invoice_num_prefix, '', $invoice->invoice_number);
            $description = "<a href='/invoice/genview/$invoice->id' class='text-decoration-none'>Invoice #$invoiceNum</a> (".date("m/d/Y", strtotime($invoice->date_issued)).")";

            $paymentRecords = $this->accounting_invoices_model->get_invoice_payment_records($invoice->invoice_number);

            $paymentAmounts = array_column($paymentRecords, 'invoice_amount');
            $totalPayment = array_sum($paymentAmounts);

            $balance = floatval($invoice->grand_total) - floatval($totalPayment);

            $lookup = array_filter($data, function($v, $k) use ($invoice) {
                return $v['id'] === $invoice->id;
            }, ARRAY_FILTER_USE_BOTH);

            if(count($lookup) < 1) {
                if($search !== "") {
                    if(stripos($invoiceNum, $search) !== false) {
                        $data[] = [
                            'id' => $invoice->id,
                            'description' => $description,
                            'due_date' => date("m/d/Y", strtotime($invoice->due_date)),
                            'original_amount' => number_format(floatval($invoice->grand_total), 2, '.', ','),
                            'open_balance' => number_format(floatval($balance), 2, '.', ','),
                            'payment_amount' => 0.00
                        ];
                    }
                } else {
                    $data[] = [
                        'id' => $invoice->id,
                        'description' => $description,
                        'due_date' => date("m/d/Y", strtotime($invoice->due_date)),
                        'original_amount' => number_format(floatval($invoice->grand_total), 2, '.', ','),
                        'open_balance' => number_format(floatval($balance), 2, '.', ','),
                        'payment_amount' => 0.00
                    ];
                }
            }
        }

        echo json_encode($data);
    }

    public function load_payment_credits($paymentId)
    {
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);
        $post = $this->input->post();
        $search = $post['search'];

        $filters = [
            'customer_id' => $payment->customer_id
        ];

        if(!empty($post['from_date'])) {
            $filters['from_date'] = date("Y-m-d", strtotime($post['from_date']));
        }

        if(!empty($post['to_date'])) {
            $filters['to_date'] = date("Y-m-d", strtotime($post['to_date']));
        }

        $paymentCredits = $this->accounting_receive_payment_model->get_payment_credits($paymentId);
        $creditMemos = $this->accounting_credit_memo_model->get_customer_open_credit_memos($filters);
        $unappliedPayments = $this->accounting_receive_payment_model->get_customer_unapplied_payments($filters);

        $data = [];
        foreach($paymentCredits as $credit) {
            $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($credit->credit_memo_id);

            $description = "<a href='/accounting/view-transaction/credit-memo/$creditMemo->id' class='text-decoration-none'>Credit Memo #$creditMemo->ref_no</a> (".date("m/d/Y", strtotime($creditMemo->credit_memo_date)).")";

            if($search !== "") {
                if(stripos($creditMemo->ref_no, $search) !== false) {
                    $data[] = [
                        'id' => $creditMemo->id,
                        'type' => 'credit-memo',
                        'description' => $description,
                        'original_amount' => number_format(floatval($creditMemo->total_amount), 2, '.', ','),
                        'open_balance' => number_format(floatval($creditMemo->balance), 2, '.', ','),
                        'checked' => true,
                        'payment_amount' => number_format(floatval($credit->payment_amount), 2, '.', ',')
                    ];
                }
            } else {
                $data[] = [
                    'id' => $creditMemo->id,
                    'type' => 'credit-memo',
                    'description' => $description,
                    'original_amount' => number_format(floatval($creditMemo->total_amount), 2, '.', ','),
                    'open_balance' => number_format(floatval($creditMemo->balance), 2, '.', ','),
                    'checked' => true,
                    'payment_amount' => number_format(floatval($credit->payment_amount), 2, '.', ',')
                ];
            }
        }

        foreach($creditMemos as $creditMemo) {
            $description = "<a href='/accounting/view-transaction/credit-memo/$creditMemo->id' class='text-decoration-none'>Credit Memo #$creditMemo->ref_no</a> (".date("m/d/Y", strtotime($creditMemo->credit_memo_date)).")";

            $lookup = array_filter($data, function($v, $k) use ($creditMemo) {
                return $v['id'] === $creditMemo->id;
            }, ARRAY_FILTER_USE_BOTH);

            if(count($lookup) < 1) {
                if($search !== "") {
                    if(stripos($creditMemo->ref_no, $search) !== false) {
                        $data[] = [
                            'id' => $creditMemo->id,
                            'type' => 'credit-memo',
                            'description' => $description,
                            'original_amount' => number_format(floatval($creditMemo->total_amount), 2, '.', ','),
                            'open_balance' => number_format(floatval($creditMemo->balance), 2, '.', ','),
                            'payment_amount' => 0.00
                        ];
                    }
                } else {
                    $data[] = [
                        'id' => $creditMemo->id,
                        'type' => 'credit-memo',
                        'description' => $description,
                        'original_amount' => number_format(floatval($creditMemo->total_amount), 2, '.', ','),
                        'open_balance' => number_format(floatval($creditMemo->balance), 2, '.', ','),
                        'payment_amount' => 0.00
                    ];
                }
            }
        }


        foreach($unappliedPayments as $unappliedPayment) {
            $description = "<a href='/accounting/view-transaction/unapplied-payment/$unappliedPayment->id' class='text-decoration-none'>Unapplied Payment</a> (".date("m/d/Y", strtotime($unappliedPayment->payment_date)).")";

            if($search === '') {
                $data[] = [
                    'id' => $unappliedPayment->id,
                    'type' => 'unapplied-payment',
                    'description' => $description,
                    'original_amount' => number_format(floatval($unappliedPayment->amount_to_credit), 2, '.', ','),
                    'open_balance' => number_format(floatval($unappliedPayment->credit_balance), 2, '.', ','),
                    'payment_amount' => 0.00
                ];
            }
        }

        echo json_encode($data);
    }

    public function print_payment($paymentId)
    {
        $this->load->helper('string');
        $this->load->library('pdf');
        $view = "accounting/modals/print_action/print_payment";

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_payment_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);
        $paymentInvoices = $this->accounting_receive_payment_model->get_payment_invoices($paymentId);
        $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

        foreach($paymentInvoices as $key => $paymentInvoice) {
            $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($paymentInvoice->invoice_id);

            $paymentInvoices[$key]->invoice = $invoice;
        }

        $customer = $this->accounting_customers_model->get_by_id($payment->customer_id);
        $customerName = $customer->first_name . ' ' . $customer->last_name;

        $address = '';
        $address .= $customer->mail_add !== "" ? $customer->mail_add : "";
        $address .= $customer->city !== "" ? '<br />' . $customer->city : "";
        $address .= $customer->state !== "" ? ', ' . $customer->state : "";
        $address .= $customer->zip_code !== "" ? ' ' . $customer->zip_code : "";
        $address .= $customer->country !== "" ? ' ' . $customer->country : "";

        $pdfData = [
            'invoice_prefix' => $invoiceSettings->invoice_num_prefix,
            'customerName' => $customerName,
            'address' => $address,
            'payment' => $payment,
            'paymentInvoices' => $paymentInvoices
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['payment'] = $payment;
        $this->page_data['pdf'] = $pdf;
        $this->load->view('accounting/modals/view_print_payment', $this->page_data);
    }

    public function print_invoice($invoiceId)
    {
        $this->load->helper('string');
        $this->load->library('pdf');
        $view = 'invoice/pdf/template';

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_invoice_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $invoice = $this->invoice_model->getinvoice($invoiceId);

        $img = explode("/", parse_url((companyProfileImage(logged('company_id'))) ? companyProfileImage(logged('company_id')) : $url->assets)['path']);

        $pdfData = [
            'invoice' => $invoice,
            'items' => $this->invoice_model->getItemsInv($invoice->id),
            'user' => get_user_by_id(logged('id')),
            'users' => $this->invoice_model->getInvoiceCustomer($invoice->id),
            'company' => get_company_by_id(logged('company_id')),
            'format' => 'pdf',
            'profile' => $img[2] . "/" . $img[3] . "/" . $img[4],
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['pdf'] = $pdf;
        $this->page_data['invoice'] = $invoice;
        $this->load->view('accounting/modals/view_print_invoice', $this->page_data);
    }

    public function download_invoice_pdf($invoiceId)
    {
        $this->load->library('pdf');
        $this->load->helper('string');

        $invoice = $this->invoice_model->getinvoice($invoiceId);

        $view = 'invoice/pdf/template';

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_invoice_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $invoice = $this->invoice_model->getinvoice($invoiceId);

        $img = explode("/", parse_url((companyProfileImage(logged('company_id'))) ? companyProfileImage(logged('company_id')) : $url->assets)['path']);

        $pdfData = [
            'invoice' => $invoice,
            'items' => $this->invoice_model->getItemsInv($invoice->id),
            'user' => get_user_by_id(logged('id')),
            'users' => $this->invoice_model->getInvoiceCustomer($invoice->id),
            'company' => get_company_by_id(logged('company_id')),
            'format' => 'pdf',
            'profile' => $img[2] . "/" . $img[3] . "/" . $img[4],
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $invoiceNum = str_replace($invoiceSettings->invoice_num_prefix, '', $invoice->invoice_number);

        $fullPath = base_url("/assets/pdf/$fileName");
        if ($fd = fopen ($fullPath, "r")) {
            $fsize = filesize($fullPath);
            header("Content-type: application/pdf"); // add here more headers for diff.     extensions
            header("Content-Disposition: attachment; filename=\"Invoice $invoiceNum.pdf\"");
            header("Content-length: $fsize");
            header("Cache-control: private"); //use this to open files directly
            readfile($fullPath);

            unlink(getcwd()."/assets/pdf/$fileName");
            fclose ($fd);
            exit;
        }
    }

    public function download_payment_pdf($paymentId)
    {
        $this->load->library('pdf');
        $this->load->helper('string');
        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);
        $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

        $view = "accounting/modals/print_action/print_payment";
        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_payment_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $payment = $this->accounting_receive_payment_model->getReceivePaymentDetails($paymentId);
        $paymentInvoices = $this->accounting_receive_payment_model->get_payment_invoices($paymentId);

        foreach($paymentInvoices as $key => $paymentInvoice) {
            $invoice = $this->accounting_invoices_model->get_invoice_by_invoice_id($paymentInvoice->invoice_id);

            $paymentInvoices[$key]->invoice = $invoice;
        }

        $customer = $this->accounting_customers_model->get_by_id($payment->customer_id);
        $customerName = $customer->first_name . ' ' . $customer->last_name;

        $address = '';
        $address .= $customer->mail_add !== "" ? $customer->mail_add : "";
        $address .= $customer->city !== "" ? '<br />' . $customer->city : "";
        $address .= $customer->state !== "" ? ', ' . $customer->state : "";
        $address .= $customer->zip_code !== "" ? ' ' . $customer->zip_code : "";
        $address .= $customer->country !== "" ? ' ' . $customer->country : "";

        $pdfData = [
            'invoice_prefix' => $invoiceSettings->invoice_num_prefix,
            'customerName' => $customerName,
            'address' => $address,
            'payment' => $payment,
            'paymentInvoices' => $paymentInvoices
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $fullPath = base_url("/assets/pdf/$fileName");
        if ($fd = fopen ($fullPath, "r")) {
            $fsize = filesize($fullPath);
            header("Content-type: application/pdf"); // add here more headers for diff.     extensions
            header("Content-Disposition: attachment; filename=\"Receive Payment.pdf\"");
            header("Content-length: $fsize");
            header("Cache-control: private"); //use this to open files directly
            readfile($fullPath);

            unlink(getcwd()."/assets/pdf/$fileName");
            fclose ($fd);
            exit;
        }
    }

    public function add_package()
    {
        $post = $this->input->post();

        $packageDetails = [
            'name' => $post['name'],
            'package_type'  => '1',
            'total_price' => $post['total_price'],
            'amount_set' => $post['amount_set'],
            'created_by' => logged('id'),
            'company_id' => logged('company_id'),
            'created_at' => date("Y-m-d H:i:s")
        ];

        $packageId = $this->workorder_model->addPackage($packageDetails);

        foreach($post['item'] as $key => $itemId) {
            $packageItemData = [
                'item_id' => $itemId,
                'package_id' => $packageId,
                'package_type' => '1',
                'price' => $post['item_amount'][$key],
                'quantity' => $post['quantity'][$key]
            ];

            $addPackageItem = $this->workorder_model->addItemPackage($packageItemData);
        }

        echo json_encode(['id' => $packageId, 'success' => $packageId ? true : false]);
    }

    public function get_last_invoice_number()
    {
        $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

        $lastInvoiceNum = $this->invoice_model->get_last_invoice_number(logged('company_id'), $invoiceSettings->invoice_num_prefix);
        $newInvoiceNum = 'INV-'.str_pad(intval($lastInvoiceNum) + 1, 9, "0", STR_PAD_LEFT);

        echo $newInvoiceNum;
    }

    public function print_credit_memo($creditMemoId)
    {
        $this->load->helper('string');
        $this->load->library('pdf');
        $view = "accounting/modals/print_action/print_credit_memo";

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_credit_memo_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($creditMemoId);
        $memoItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Credit Memo', $creditMemoId);

        foreach($memoItems as $key => $creditMemoItem) {
            $subtotal = floatval($creditMemoItem->price) * floatval($creditMemoItem->quantity);
            $taxAmount = floatval($creditMemoItem->tax) * floatval($subtotal);
            $taxAmount = floatval($taxAmount) / 100;

            $memoItems[$key]->item = $this->items_model->getItemById($creditMemoItem->item_id)[0];
            $memoItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
        }

        $pdfData = [
            'creditMemo' => $creditMemo,
            'memoItems' => $memoItems
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['pdf'] = $pdf;
        $this->page_data['creditMemo'] = $creditMemo;
        $this->load->view('accounting/modals/view_print_credit_memo', $this->page_data);
    }

    public function download_credit_memo_pdf($creditMemoId)
    {
        $this->load->library('pdf');
        $this->load->helper('string');

        $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($creditMemoId);
        $memoItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Credit Memo', $creditMemoId);

        $view = "accounting/modals/print_action/print_credit_memo";
        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_credit_memo_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        foreach($memoItems as $key => $creditMemoItem) {
            $subtotal = floatval($creditMemoItem->price) * floatval($creditMemoItem->quantity);
            $taxAmount = floatval($creditMemoItem->tax) * floatval($subtotal);
            $taxAmount = floatval($taxAmount) / 100;

            $memoItems[$key]->item = $this->items_model->getItemById($creditMemoItem->item_id)[0];
            $memoItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
        }

        $pdfData = [
            'creditMemo' => $creditMemo,
            'memoItems' => $memoItems
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $fullPath = base_url("/assets/pdf/$fileName");
        if ($fd = fopen ($fullPath, "r")) {
            $fsize = filesize($fullPath);
            header("Content-type: application/pdf"); // add here more headers for diff.     extensions
            header("Content-Disposition: attachment; filename=\"Credit Memo $creditMemo->ref_no.pdf\"");
            header("Content-length: $fsize");
            header("Cache-control: private"); //use this to open files directly
            readfile($fullPath);

            unlink(getcwd()."/assets/pdf/$fileName");
            fclose ($fd);
            exit;
        }
    }

    public function print_sales_receipt($salesReceiptId)
    {
        $this->load->helper('string');
        $this->load->library('pdf');
        $view = "accounting/modals/print_action/print_sales_receipt";

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_sales_receipt_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($salesReceiptId);
        $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Sales Receipt', $salesReceiptId);

        foreach($receiptItems as $key => $receiptItem) {
            $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
            $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
            $taxAmount = floatval($taxAmount) / 100;

            $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
            $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
        }

        $pdfData = [
            'salesReceipt' => $salesReceipt,
            'receiptItems' => $receiptItems
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['pdf'] = $pdf;
        $this->page_data['salesReceipt'] = $salesReceipt;
        $this->load->view('v2/includes/accounting/modal_forms/view_print_sales_receipt', $this->page_data);
    }

    public function download_sales_receipt_pdf($salesReceiptId)
    {
        $this->load->library('pdf');
        $this->load->helper('string');

        $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($salesReceiptId);
        $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Sales Receipt', $salesReceiptId);

        $view = "accounting/modals/print_action/print_sales_receipt";
        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_sales_receipt_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        foreach($receiptItems as $key => $receiptItem) {
            $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
            $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
            $taxAmount = floatval($taxAmount) / 100;

            $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
            $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
        }

        $pdfData = [
            'salesReceipt' => $salesReceipt,
            'receiptItems' => $receiptItems
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $fullPath = base_url("/assets/pdf/$fileName");
        if ($fd = fopen ($fullPath, "r")) {
            $fsize = filesize($fullPath);
            header("Content-type: application/pdf"); // add here more headers for diff.     extensions
            header("Content-Disposition: attachment; filename=\"Sales Receipt $salesReceipt->ref_no.pdf\"");
            header("Content-length: $fsize");
            header("Cache-control: private"); //use this to open files directly
            readfile($fullPath);

            unlink(getcwd()."/assets/pdf/$fileName");
            fclose ($fd);
            exit;
        }
    }

    public function print_refund_receipt($refundReceiptId)
    {
        $this->load->helper('string');
        $this->load->library('pdf');
        $view = "accounting/modals/print_action/print_refund_receipt";

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_refund_receipt_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($refundReceiptId);
        $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Refund Receipt', $refundReceiptId);

        $paymentMethod = $this->accounting_payment_methods_model->getById($refundReceipt->payment_method);

        foreach($receiptItems as $key => $receiptItem) {
            $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
            $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
            $taxAmount = floatval($taxAmount) / 100;

            $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
            $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
        }

        $pdfData = [
            'paymentMethod' => $paymentMethod,
            'refundReceipt' => $refundReceipt,
            'receiptItems' => $receiptItems
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['pdf'] = $pdf;
        $this->page_data['refundReceipt'] = $refundReceipt;
        $this->load->view('accounting/modals/view_print_refund_receipt', $this->page_data);
    }

    public function download_refund_receipt_pdf($refundReceiptId)
    {
        $this->load->library('pdf');
        $this->load->helper('string');

        $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($refundReceiptId);
        $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Refund Receipt', $refundReceiptId);

        $paymentMethod = $this->accounting_payment_methods_model->getById($refundReceipt->payment_method);

        $view = "accounting/modals/print_action/print_refund_receipt";
        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_refund_receipt_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        foreach($receiptItems as $key => $receiptItem) {
            $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
            $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
            $taxAmount = floatval($taxAmount) / 100;

            $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
            $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
        }

        $pdfData = [
            'paymentMethod' => $paymentMethod,
            'refundReceipt' => $refundReceipt,
            'receiptItems' => $receiptItems
        ];

        $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

        $fullPath = base_url("/assets/pdf/$fileName");
        if ($fd = fopen ($fullPath, "r")) {
            $fsize = filesize($fullPath);
            header("Content-type: application/pdf"); // add here more headers for diff.     extensions
            header("Content-Disposition: attachment; filename=\"Refund Receipt $salesReceipt->ref_no.pdf\"");
            header("Content-length: $fsize");
            header("Cache-control: private"); //use this to open files directly
            readfile($fullPath);

            unlink(getcwd()."/assets/pdf/$fileName");
            fclose ($fd);
            exit;
        }
    }

    public function preview_and_print_sample()
    {
        $this->load->helper('string');
        $this->load->library('pdf');
        $post = $this->input->post();

        if($post['check_type'] === "1") {
            $view = "accounting/modals/print_action/print_checks_sample_voucher";

            $data = [
                'top-margin' => 25 - intval($post['vertical']),
                'left-padding' => 15 + intval($post['horizontal']),
                'right-padding' => 15 - intval($post['horizontal'])
            ];
        } else {
            $view = "accounting/modals/print_action/print_checks_sample_standard";

            $data = [
                'top-margin' => 32 - intval($post['vertical']),
                'left-padding' => 15 + intval($post['horizontal']),
                'right-padding' => 15 - intval($post['horizontal'])
            ];
        }

        $extension = '.pdf';

        do {
            $randomString = random_string('alnum');
            $fileName = 'print_check_sample_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $fileType = explode('/', $files['type'][$key]);
        $uploadedName = str_replace('.'.$extension, '', $name);

        $data = [
            'top-margin' => 25 - intval($post['vertical']),
            'left-padding' => 15 + intval($post['horizontal']),
            'right-padding' => 15 - intval($post['horizontal'])
        ];

        $this->pdf->save_pdf($view, ['data' => $data], $fileName, 'portrait');

        $pdf = base64_encode(file_get_contents(base_url("/assets/pdf/$fileName")));
        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }

        $this->page_data['pdf'] = $pdf;
        $this->load->view('accounting/modals/view_print_checks', $this->page_data);
    }

    public function save_print_checks_settings()
    {
        $settings = $this->accounting_print_checks_settings_model->get_by_company_id(logged('company_id'));
        $post = $this->input->post();

        $data = [
            'check_type' => $post['check_type'],
            'horizontal' => $post['horizontal'],
            'vertical' => $post['vertical']
        ];

        if(is_null($settings)) {
            $data['company_id'] = logged('company_id');
            $query = $this->accounting_print_checks_settings_model->create($data);
            $id = $query;
        } else {
            $query = $this->accounting_print_checks_settings_model->update_by_company_id(logged('company_id'), $data);
            $id = $settings->id;
        }

        $return = [
            'data' => $id,
            'success' => $query ? true : false
        ];

        echo json_encode($return);
    }

    public function print_sales_transactions()
    {
        $this->load->helper('string');
        $this->load->library('pdf');

        $post = $this->input->post();
        $transactions = $post['transactions'];

        $pdfTransactions = [];
        foreach($transactions as $data)
        {
            $explode = explode('-', $data);

            switch($explode[0]) {
                case 'invoice' :
                    $invoice = $this->invoice_model->getinvoice($explode[1]);
                    $img = explode("/", parse_url((companyProfileImage(logged('company_id'))) ? companyProfileImage(logged('company_id')) : $url->assets)['path']);

                    $invoice->items = $this->invoice_model->getItemsInv($invoice->id);
                    $invoice->user = get_user_by_id(logged('id'));
                    $invoice->users = $this->invoice_model->getInvoiceCustomer($invoice->id);
                    $invoice->company = get_company_by_id(logged('company_id'));
                    $invoice->format = 'pdf';
                    $invoice->profile = $img[2] . "/" . $img[3] . "/" . $img[4];
                    $invoice->type = 'Invoice';

                    $pdfTransactions[] = $invoice;
                break;
                case 'estimate' :
                    $estimate = $this->estimate_model->getEstimate($explode[1]);
                    $customer = $this->accounting_customers_model->getCustomerDetails($estimate->customer_id)[0];
                    $settings = $this->EstimateSettings_model->getEstimateSettingByCompanyId(logged('company_id'));
                    $estimateItems = $this->estimate_model->getItemlistByID($estimate->id);

                    $billingAddress = '';
                    if ($customer->business_name !== "" && $customer->business_name !== null) {
                        $billingAddress .= $customer->business_name;
                    } else {
                        $customerName = '';
                        $customerName .= $customer->first_name !== "" ? $customer->first_name . " " : "";
                        $customerName .= $customer->middle_name !== "" ? $customer->middle_name . " " : "";
                        $customerName .= $customer->last_name !== "" ? $customer->last_name : "";
                        $billingAddress .= trim($customerName);
                    }
                    $billingAddress .= "<br />";

                    $billingAddress .= $customer->mail_add !== "" ? $customer->mail_add : "";
                    $billingAddress .= $customer->city !== "" ? '<br />' . $customer->city : "";
                    $billingAddress .= $customer->state !== "" ? ', ' . $customer->state : "";
                    $billingAddress .= $customer->zip_code !== "" ? ' ' . $customer->zip_code : "";
                    $billingAddress .= $customer->country !== "" ? ' ' . $customer->country : "";

                    foreach($estimateItems as $key => $estimateItem)
                    {
                        $estimateItems[$key]->item = $this->items_model->getItemById($estimateItem->items_id)[0];
                    }

                    $total1 = ((float)$estimate->option1_total) + ((float)$estimate->option2_total);
                    $taxtotal1 = ((float)$estimate->tax1_total) + ((float)$estimate->tax2_total);
                    $subtotal1 = ((float)$estimate->sub_total) + ((float)$estimate->sub_total2);
                    $total2 = ((float)$estimate->bundle1_total) + ((float)$estimate->bundle2_total);
                    $taxtotal2 = ((float)$estimate->tax1_total) + ((float)$estimate->tax2_total);
                    $subtotal2 = ((float)$estimate->sub_total) + ((float)$estimate->sub_total2);

                    if ($estimate->estimate_type == 'Option') {
                        $estimate->total = $total1;
                        $estimate->sub_total = $subtotal1;
                        $estimate->tax_total = $taxtotal1;
                    } elseif ($estimate->estimate_type == 'Bundle') {
                        $estimate->total = $total2;
                        $estimate->sub_total = $subtotal2;
                        $estimate->tax_total = $taxtotal2;
                    } else {
                        $estimate->total = $estimate->grand_total;
                        $estimate->tax_total = $estimate->tax1_total;
                    }

                    $estimate->prefix = !is_null($settings) ? $settings->estimate_num_prefix : 'EST-';
                    $estimate->billing_address= $billingAddress;
                    $estimate->items = $estimateItems;
                    $estimate->type = 'Estimate';

                    $pdfTransactions[] = $estimate;
                break;
                case 'credit_memo' :
                    $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($explode[1]);
                    $memoItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Credit Memo', $explode[1]);

                    foreach($memoItems as $key => $creditMemoItem) {
                        $subtotal = floatval($creditMemoItem->price) * floatval($creditMemoItem->quantity);
                        $taxAmount = floatval($creditMemoItem->tax) * floatval($subtotal);
                        $taxAmount = floatval($taxAmount) / 100;

                        $memoItems[$key]->item = $this->items_model->getItemById($creditMemoItem->item_id)[0];
                        $memoItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
                    }

                    $creditMemo->items = $memoItems;
                    $creditMemo->type = 'Credit Memo';

                    $pdfTransactions[] = $creditMemo;
                break;
                case 'sales_receipt' :
                    $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($explode[1]);
                    $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Sales Receipt', $explode[1]);

                    foreach($receiptItems as $key => $receiptItem) {
                        $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
                        $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
                        $taxAmount = floatval($taxAmount) / 100;

                        $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
                        $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
                    }

                    $salesReceipt->items = $receiptItems;
                    $salesReceipt->type = 'Sales Receipt';

                    $pdfTransactions[] = $salesReceipt;
                break;
                case 'refund' :
                    $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($explode[1]);
                    $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Refund Receipt', $explode[1]);
                    $paymentMethod = $this->accounting_payment_methods_model->getById($refundReceipt->payment_method);

                    foreach($receiptItems as $key => $receiptItem) {
                        $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
                        $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
                        $taxAmount = floatval($taxAmount) / 100;

                        $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
                        $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
                    }

                    $refundReceipt->payment_method = $paymentMethod;
                    $refundReceipt->items = $receiptItems;
                    $refundReceipt->type = 'Refund';

                    $pdfTransactions[] = $refundReceipt;
                break;
            }
        }

        $view = "accounting/modals/print_action/print_sales_transactions";

        $extension = '.pdf';
        do {
            $randomString = random_string('alnum');
            $fileName = 'sales_'.$randomString . '.' .$extension;
            $exists = file_exists('./assets/pdf/'.$fileName);
        } while ($exists);

        $this->pdf->save_pdf($view, ['transactions' => $pdfTransactions], $fileName, 'portrait');

        $pdf = file_get_contents(base_url("/assets/pdf/$fileName"));

        if (file_exists(getcwd()."/assets/pdf/$fileName")) {
            unlink(getcwd()."/assets/pdf/$fileName");
        }
        // Header content type
        header("Content-type: application/pdf");
        header('Content-Disposition: inline; filename="print.pdf";');

        ob_clean();
        flush();
        echo $pdf;
        exit;
    }
    
    public function send_sales_transactions()
    {
        $this->load->helper('string');
        $this->load->library('pdf');

        $post = $this->input->post();
        $transactions = $post['transactions'];

        $company = $this->business_model->getByCompanyId(logged('company_id'));

        $sent = 0;
        foreach($transactions as $data)
        {
            $explode = explode('-', $data);

            switch($explode[0]) {
                case 'invoice' :
                    $invoice = $this->invoice_model->getinvoice($explode[1]);
                    $customer = $this->accounting_customers_model->getCustomerDetails($invoice->customer_id)[0];
                    $invoiceItems = $this->invoice_model->get_invoice_items($explode[1]);
                    $invoiceSettings = $this->invoice_settings_model->getAllByCompany(logged('company_id'));

                    $discount = floatval($invoice->grand_total) - floatval($invoice->sub_total);
                    $discount += floatval($invoice->taxes);
                    $discount += floatval($invoice->adjustment_value);

                    $invoice->discount_total = $discount;

                    foreach($invoiceItems as $key => $invoiceItem) {
                        $invoiceItems[$key]->item = $this->items_model->getItemById($invoiceItem->items_id)[0];

                        $taxAmount = floatval($invoiceItem->tax) * floatval($invoiceItem->total);
                        $taxAmount = floatval($taxAmount) / 100;
                        $invoiceItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
                    }

                    $fileName = 'Invoice_'.$invoice->invoice_number.'_from_'.str_replace(' ', '_', $company->business_name).'.pdf';
                    $view = 'invoice/pdf/template';

                    $img = explode("/", parse_url((companyProfileImage(logged('company_id'))) ? companyProfileImage(logged('company_id')) : $url->assets)['path']);

                    $pdfData = [
                        'invoice' => $invoice,
                        'items' => $this->invoice_model->getItemsInv($invoice->id),
                        'user' => get_user_by_id(logged('id')),
                        'users' => $this->invoice_model->getInvoiceCustomer($invoice->id),
                        'company' => get_company_by_id(logged('company_id')),
                        'format' => 'pdf',
                        'profile' => $img[2] . "/" . $img[3] . "/" . $img[4],
                    ];

                    $email = empty($invoice->customer_email) ? $customer->email : $invoice->customer_email;
                    $subject = "New payment request from $company->business_name - invoice $invoice->invoice_number";
                    $message = "Dear $customer->first_name $customer->last_name,

Here's your invoice! We appreciate your prompt payment.

Thanks for your business!
$company->business_name";
                break;
                case 'estimate' :
                    $this->load->helper('pdf_helper');

                    $estimate = $this->estimate_model->getById($explode[1]);
                    $company_id = $estimate->company_id;
                    $customer = $this->AcsProfile_model->getByProfId($estimate->customer_id);
                    $client   = $this->Clients_model->getById($company_id);
                    $estimateItems = $this->estimate_model->getEstimatesItems($explode[1]);
                    $fileName = 'Estimate_'.$estimate->estimate_number.'_from_'.str_replace(' ', '_', $company->business_name).'.pdf';

                    $html = '
                        <table style="padding-top:-40px;">
                            <tr>
                                <td>
                                    <h5 style="font-size:12px;"><span class="fa fa-user-o"></span> From <br/><span>'.$client->business_name.'</span></h5>
                                    <br />
                                    <span class="">'.$client->business_address.'</span><br />
                                    <span class="">EMAIL: '.$client->email_address.'</span><br />
                                    <span class="">PHONE: '.$client->phone_number.'</span>
                                    <br/><br /><br />
                                    <h5 style="font-size:12px;"><span class="fa fa-user-o"></span> To <br/><span>'.$customer->first_name . ' ' .$customer->last_name.'</span></h5>
                                    <br />
                                    <span class="">'.$customer->mail_add. " " .$customer->city.'</span><br />
                                    <span class="">EMAIL: '.$customer->email.'</span><br />
                                    <span class="">PHONE: '.$customer->phone_w.'</span>
                                </td>
                                <td colspan=1></td>
                                <td style="text-align:right;">
                                    <h5 style="font-size:20px;margin:0px;">ESTIMATE <br /><small style="font-size: 10px;">#'.$estimate->estimate_number.'</small></h5>
                                    <br />
                                    <table>
                                    <tr>
                                        <td>Estimate Date :</td>
                                        <td>'.date("F d, Y", strtotime($estimate->estimate_date)).'</td>
                                    </tr>
                                    <tr>
                                        <td>Expire Due :</td>
                                        <td>'.date("F d, Y", strtotime($estimate->expiry_date)).'</td>
                                    </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                        <br /><br /><br />

                        <table style="width="100%;>
                        <thead>
                            <tr>
                                <th style="width:5%;"><b>#</b></th>
                                <th style="width:35%;"><b>Items</b></th>
                                <th style="width:12%;"><b>Item Type</b></th>
                                <th style="width:12%;text-align: right;"><b>Qty</b></th>
                                <th style="width:12%;text-align: right;"><b>Price</b></th>
                                <th style="width:12%;text-align: right;"><b>Discount</b></th>
                                <th style="width:12%;text-align: right;"><b>Total</b></th>
                            </tr>
                        </thead>
                        <tbody>';
                        $total_amount = 0;
                        $total_tax = 0;
                        $row = 1;
                        foreach ($estimateItems as $item) {
                            $html .= '<tr>
                                <td valign="top" style="width:5%;">'.$row.'</td>
                                <td valign="top" style="width:35%;">'.$item->title.'</td>
                                <td valign="top" style="width:12%;">'.$item->type.'</td>
                                <td valign="top" style="width:12%;text-align: right;">'.$item->qty.'</td>
                                <td valign="top" style="width:12%;text-align: right;">'.number_format($item->iCost, 2).'</td>
                                <td valign="top" style="width:12%;text-align: right;">'.number_format($item->discount, 2).'</td>
                                <td valign="top" style="width:12%;text-align: right;">'.number_format($item->iTotal, 2).'</td>
                            </tr>
                            ';
                            $row++;
                            $total_amount += $item->iTotal;
                        }

                        $html .= '
                        <tr><br><br>
                        <td colspan="6" style="text-align: right;"><b>Subtotal</b></td>
                        <td style="text-align: right;"><b>$'.number_format($estimate->sub_total, 2).'</b></td>
                        </tr>
                        <tr>
                        <td colspan="6" style="text-align: right;"><b>Taxes</b></td>
                        <td style="text-align: right;"><b>$'.number_format($estimate->tax1_total, 2).'</b></td>
                        </tr>
                        <tr>
                        <td colspan="6" style="text-align: right;"><b>'.$estimate->adjustment_name.'</b></td>
                        <td style="text-align: right;"><b>$'.number_format($estimate->adjustment_value, 2).'</b></td>
                        </tr>
                        <tr>
                        <td colspan="6" style="text-align: right;"><b>Grand Total</b></td>
                        <td style="text-align: right;"><b>$'.number_format($total_amount, 2).'</b></td>
                        </tr>
                    </tbody>
                    </table>
                    <br /><br /><br />
                    <p><b>Instructions</b><br /><br />'.$estimate->instructions.'</p>
                    <p><b>Message</b><br /><br />'.$estimate->customer_message.'</p>
                    <p><b>Terms</b><br /><Br />'.$estimate->terms_conditions.'</p>
                    ';

                    tcpdf();
                    $obj_pdf = new TCPDF('P', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
                    $title = "Estimates";
                    $obj_pdf->SetTitle($title);
                    $obj_pdf->setPrintHeader(false);
                    $obj_pdf->setPrintFooter(false);
                    $obj_pdf->setFooterFont(array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
                    $obj_pdf->SetDefaultMonospacedFont('helvetica');
                    $obj_pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
                    $obj_pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
                    $obj_pdf->SetAutoPageBreak(true, PDF_MARGIN_BOTTOM);
                    $obj_pdf->SetFont('helvetica', '', 9);
                    $obj_pdf->setFontSubsetting(false);
                    $obj_pdf->AddPage();
                    ob_end_clean();
                    $obj_pdf->writeHTML($html, true, false, true, false, '');
                    $obj_pdf->Output(getcwd()."/assets/pdf/$fileName", 'F');

                    $email = empty($estimate->email) ? $customer->email : $estimate->email;
                    $subject = "Estimate $estimate->estimate_number from $company->business_name";
                    $message = "Dear $customer->first_name $customer->last_name,

Please review the estimate below. Feel free to contact us if you have any questions.
We look forward to working with you.

Thanks for your business!
$company->business_name";
                break;
                case 'credit_memo' :
                    $creditMemo = $this->accounting_credit_memo_model->getCreditMemoDetails($explode[1]);
                    $memoItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Credit Memo', $explode[1]);
                    $customer = $this->accounting_customers_model->getCustomerDetails($creditMemo->customer_id)[0];

                    foreach($memoItems as $key => $creditMemoItem) {
                        $subtotal = floatval($creditMemoItem->price) * floatval($creditMemoItem->quantity);
                        $taxAmount = floatval($creditMemoItem->tax) * floatval($subtotal);
                        $taxAmount = floatval($taxAmount) / 100;

                        $memoItems[$key]->item = $this->items_model->getItemById($creditMemoItem->item_id)[0];
                        $memoItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
                    }

                    $fileName = 'Credit_Memo_'.$creditMemo->ref_no.'_from_'.str_replace(' ', '_', $company->business_name).'.pdf';
                    $view = "accounting/modals/print_action/print_credit_memo";

                    $pdfData = [
                        'creditMemo' => $creditMemo,
                        'memoItems' => $memoItems
                    ];

                    $email = empty($creditMemo->email) ? $customer->email : $creditMemo->email;
                    $subject = "Credit Memo $creditMemo->ref_no from $company->business_name";
                    $message = "Dear $customer->first_name $customer->last_name,

Your credit memo is attached. We have reduced your account balance by the amount shown on the credit memo.

Have a great day!
$company->business_name";
                break;
                case 'sales_receipt' :
                    $salesReceipt = $this->accounting_sales_receipt_model->getSalesReceiptDetails_by_id($explode[1]);
                    $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Sales Receipt', $explode[1]);
                    $customer = $this->accounting_customers_model->getCustomerDetails($salesReceipt->customer_id)[0];
                    $fileName = 'Sales_Receipt_'.$salesReceipt->ref_no.'_from_'.str_replace(' ', '_', $company->business_name).'.pdf';

                    foreach($receiptItems as $key => $receiptItem) {
                        $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
                        $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
                        $taxAmount = floatval($taxAmount) / 100;

                        $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
                        $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
                    }

                    $view = "accounting/modals/print_action/print_sales_receipt";

                    $pdfData = [
                        'salesReceipt' => $salesReceipt,
                        'receiptItems' => $receiptItems
                    ];

                    $email = empty($salesReceipt->email) ? $customer->email : $salesReceipt->email;
                    $subject = "Sales Receipt $salesReceipt->ref_no from $company->business_name";
                    $message = "Dear $customer->first_name $customer->last_name,

Please review the sales receipt below.
We appreciate it very much.

Thanks for your business!
$company->business_name";
                break;
                case 'refund' :
                    $refundReceipt = $this->accounting_refund_receipt_model->getRefundReceiptDetails_by_id($explode[1]);

                    $receiptItems = $this->accounting_credit_memo_model->get_customer_transaction_items('Refund Receipt', $explode[1]);
                    $paymentMethod = $this->accounting_payment_methods_model->getById($refundReceipt->payment_method);

                    foreach($receiptItems as $key => $receiptItem) {
                        $subtotal = floatval($receiptItem->price) * floatval($receiptItem->quantity);
                        $taxAmount = floatval($receiptItem->tax) * floatval($subtotal);
                        $taxAmount = floatval($taxAmount) / 100;

                        $receiptItems[$key]->item = $this->items_model->getItemById($receiptItem->item_id)[0];
                        $receiptItems[$key]->tax_amount = number_format(floatval($taxAmount), 2, '.', ',');
                    }

                    $fileName = 'Refund_Receipt_'.$refundReceipt->ref_no.'_from_'.str_replace(' ', '_', $company->business_name).'.pdf';
                    $view = "accounting/modals/print_action/print_refund_receipt";

                    $pdfData = [
                        'paymentMethod' => $paymentMethod,
                        'refundReceipt' => $refundReceipt,
                        'receiptItems' => $receiptItems
                    ];

                    $email = empty($refundReceipt->email) ? $customer->email : $refundReceipt->email;
                    $subject = "Refund Receipt from $company->business_name";
                    $message = "Dear $customer->first_name $customer->last_name,

Please find your refund receipt attached to this email.

Thank you.

Have a great day!
$company->business_name";
                break;
            }

            if($explode[0] !== 'estimate') {
                $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');
            }

            $this->email->clear(true);
            $this->email->from($company->business_email);
            $this->email->to($email);
            $this->email->subject($subject);
            $this->email->message($message);

            $this->email->attach(base_url("/assets/pdf/$fileName"));
            $this->email->send();

            unlink(getcwd()."/assets/pdf/$fileName");

            $sent++;
        }

        $count = count($post['transactions']);

        echo json_encode([
            'success' => true,
            'message' => "$sent out of $count transactions sent."
        ]);
    }

    public function send_invoice_reminders()
    {
        $this->load->helper('string');
        $this->load->library('pdf');

        $post = $this->input->post();
        $invoices = $post['invoices'];

        $company = $this->business_model->getByCompanyId(logged('company_id'));

        $sent = 0;
        foreach($invoices as $invoiceId)
        {
            $invoice = $this->invoice_model->getinvoice($invoiceId);
            $fileName = 'Invoice_'.$invoice->invoice_number.'_from_'.str_replace(' ', '_', $company->business_name).'.pdf';
            $view = 'invoice/pdf/template';

            $img = explode("/", parse_url((companyProfileImage(logged('company_id'))) ? companyProfileImage(logged('company_id')) : $url->assets)['path']);

            $pdfData = [
                'invoice' => $invoice,
                'items' => $this->invoice_model->getItemsInv($invoice->id),
                'user' => get_user_by_id(logged('id')),
                'users' => $this->invoice_model->getInvoiceCustomer($invoice->id),
                'company' => get_company_by_id(logged('company_id')),
                'format' => 'pdf',
                'profile' => $img[2] . "/" . $img[3] . "/" . $img[4],
            ];

            $email = empty($invoice->customer_email) ? $customer->email : $invoice->customer_email;
            $subject = "Reminder: Invoice $invoice->invoice_number from $company->business_name";
            $message = "Dear $customer->first_name $customer->last_name,

Just a reminder that we have not received a payment for this invoice yet. Let us know if you have questions.

Thanks for your business!
$company->business_name";

            $this->pdf->save_pdf($view, $pdfData, $fileName, 'portrait');

            $this->email->clear(true);
            $this->email->from($company->business_email);
            $this->email->to($email);
            $this->email->subject($subject);
            $this->email->message($message);
            $this->email->attach(base_url("/assets/pdf/$fileName"));
            $this->email->send();

            unlink(getcwd()."/assets/pdf/$fileName");

            $sent++;
        }

        $count = count($post['invoices']);

        echo json_encode([
            'success' => true,
            'message' => "$sent out of $count transactions sent."
        ]);
    }
}
